import os
import asyncio
import hashlib
import logging
import random
from datetime import datetime, timedelta

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, Bot
from telegram.ext import Application, CallbackQueryHandler, ContextTypes
import aiosqlite
import telegram.error

# AI-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://gptonline.ai/

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s %(levelname)s %(message)s')

# –ß—Ç–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN_APPROVAL = os.getenv("TELEGRAM_BOT_TOKEN_APPROVAL")
TELEGRAM_APPROVAL_CHAT_ID = os.getenv("TELEGRAM_APPROVAL_CHAT_ID")
TELEGRAM_APPROVAL_USER_ID = int(os.getenv("TELEGRAM_APPROVAL_USER_ID", "0"))
TELEGRAM_CHANNEL_ID = os.getenv("TELEGRAM_CHANNEL_ID")  # –î–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π –≤ –∫–∞–Ω–∞–ª

if not TELEGRAM_BOT_TOKEN_APPROVAL or not TELEGRAM_APPROVAL_CHAT_ID or not TELEGRAM_CHANNEL_ID:
    logging.error("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –±–æ—Ç–∞ –∏–ª–∏ –∫–∞–Ω–∞–ª–æ–≤ –Ω–µ –∑–∞–¥–∞–Ω—ã. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
    exit(1)

approval_bot = Bot(token=TELEGRAM_BOT_TOKEN_APPROVAL)

# –¢–µ—Å—Ç–æ–≤—ã–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏
test_images = [
    "https://upload.wikimedia.org/wikipedia/commons/4/47/PNG_transparency_demonstration_1.png",
    "https://upload.wikimedia.org/wikipedia/commons/3/3f/Fronalpstock_big.jpg",
    "https://upload.wikimedia.org/wikipedia/commons/1/17/Google-flutter-logo.png",
    "https://upload.wikimedia.org/wikipedia/commons/d/d6/Wp-w4-big.jpg"
]

post_data = {
    "text_ru": "–ú–∞–π–Ω–∏–Ω–≥–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã —Å–Ω–æ–≤–∞ –≤ —Ñ–æ–∫—É—Å–µ...",
    "image_url": test_images[0],
    "timestamp": None,
    "post_id": 0
}
prev_data = post_data.copy()

pending_post = {"active": False, "timer": None}
text_in_progress = False
image_in_progress = False
full_in_progress = False
chat_in_progress = False

do_not_disturb = {"active": False}
countdown_task = None
last_action_time = {}
approval_message_ids = {"photo": None, "timer": None}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞–º–∏
keyboard = InlineKeyboardMarkup([
    [InlineKeyboardButton("‚úÖ –ü–æ—Å—Ç", callback_data="approve")],
    [InlineKeyboardButton("üïí –ü–æ–¥—É–º–∞—Ç—å", callback_data="think")],
    [InlineKeyboardButton("üìù –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç", callback_data="regenerate")],
    [InlineKeyboardButton("üñºÔ∏è –ù–æ–≤–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞", callback_data="new_image")],
    [InlineKeyboardButton("üÜï –ü–æ—Å—Ç —Ü–µ–ª–∏–∫–æ–º", callback_data="new_post")],
    [InlineKeyboardButton("üí¨ –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å", callback_data="chat"), InlineKeyboardButton("üåô –ù–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å", callback_data="do_not_disturb")],
    [InlineKeyboardButton("‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–æ—Å—Ç", callback_data="restore_previous"), InlineKeyboardButton("üîö –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="end_day")]
])

DB_FILE = "post_history.db"

async def init_db():
    async with aiosqlite.connect(DB_FILE) as db:
        await db.execute("""
            CREATE TABLE IF NOT EXISTS posts (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                text TEXT NOT NULL,
                timestamp TEXT NOT NULL,
                image_hash TEXT
            )
        """)
        await db.commit()
    logging.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")

async def save_post_to_history(text, image_url=None):
    def get_hash(url):
        try:
            import requests
            r = requests.get(url, timeout=5)
            r.raise_for_status()
            return hashlib.sha256(r.content).hexdigest()
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ö–µ—à –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return None

    image_hash = get_hash(image_url) if image_url else None
    async with aiosqlite.connect(DB_FILE) as db:
        await db.execute(
            "INSERT INTO posts (text, timestamp, image_hash) VALUES (?, ?, ?)",
            (text, datetime.now().isoformat(), image_hash)
        )
        await db.commit()
    logging.info("–ü–æ—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –∏—Å—Ç–æ—Ä–∏—é.")

async def send_post_for_approval():
    if do_not_disturb["active"]:
        logging.info("–†–µ–∂–∏–º '–ù–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å' –∞–∫—Ç–∏–≤–µ–Ω, –ø—Ä–æ–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ.")
        return
    if pending_post["active"]:
        logging.info("–ï—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ—Å—Ç, –ø—Ä–æ–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ.")
        return

    post_data["timestamp"] = datetime.now()
    pending_post.update({"active": True, "timer": datetime.now()})
    try:
        photo_msg = await approval_bot.send_photo(
            chat_id=TELEGRAM_APPROVAL_CHAT_ID,
            photo=post_data["image_url"],
            caption=post_data["text_ru"],
            reply_markup=keyboard
        )
        approval_message_ids["photo"] = photo_msg.message_id
        logging.info("–ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ.")
    except telegram.error.RetryAfter as e:
        logging.warning(f"Rate limit, –∂–¥–µ–º {e.retry_after} —Å–µ–∫.")
        await asyncio.sleep(e.retry_after)
        await send_post_for_approval()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–∞ –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ: {e}")

async def send_timer_message():
    countdown_msg = await approval_bot.send_message(
        chat_id=TELEGRAM_APPROVAL_CHAT_ID,
        text="‚è≥ –¢–∞–π–º–µ—Ä: 60 —Å–µ–∫—É–Ω–¥",
        reply_markup=keyboard
    )
    approval_message_ids["timer"] = countdown_msg.message_id

    async def update_countdown(message_id):
        for i in range(59, -1, -1):
            await asyncio.sleep(1)
            try:
                await approval_bot.edit_message_text(
                    chat_id=TELEGRAM_APPROVAL_CHAT_ID,
                    message_id=message_id,
                    text=f"‚è≥ –¢–∞–π–º–µ—Ä: {i} —Å–µ–∫—É–Ω–¥",
                    reply_markup=keyboard
                )
            except Exception:
                pass
        pending_post["active"] = False

    global countdown_task
    if countdown_task is not None and not countdown_task.done():
        countdown_task.cancel()
    countdown_task = asyncio.create_task(update_countdown(approval_message_ids["timer"]))

async def publish_post():
    if TELEGRAM_CHANNEL_ID:
        try:
            await approval_bot.send_photo(
                chat_id=TELEGRAM_CHANNEL_ID,
                photo=post_data["image_url"],
                caption=post_data["text_ru"]
            )
            logging.info("–ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª.")
        except telegram.error.RetryAfter as e:
            logging.warning(f"Rate limit –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏, –∂–¥–µ–º {e.retry_after} —Å–µ–∫.")
            await asyncio.sleep(e.retry_after)
            await approval_bot.send_photo(
                chat_id=TELEGRAM_CHANNEL_ID,
                photo=post_data["image_url"],
                caption=post_data["text_ru"]
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª: {e}")
    else:
        logging.error("TELEGRAM_CHANNEL_ID –Ω–µ –∑–∞–¥–∞–Ω.")
    await save_post_to_history(post_data["text_ru"], post_data["image_url"])
    pending_post["active"] = False

async def check_timer():
    while True:
        await asyncio.sleep(5)
        if pending_post["active"] and pending_post["timer"]:
            if datetime.now() - pending_post["timer"] > timedelta(seconds=60):
                await approval_bot.send_message(
                    chat_id=TELEGRAM_APPROVAL_CHAT_ID,
                    text="‚åõ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ü—É–±–ª–∏–∫—É—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
                )
                await publish_post()

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global text_in_progress, image_in_progress, full_in_progress, chat_in_progress, countdown_task, last_action_time
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id
    now = datetime.now()

    # –ê–Ω—Ç–∏—Å–ø–∞–º: 15 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in last_action_time:
        if (now - last_action_time[user_id]).total_seconds() < 15:
            await approval_bot.send_message(
                chat_id=TELEGRAM_APPROVAL_CHAT_ID,
                text="‚è≥ –ò–¥—ë—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ."
            )
            return
    last_action_time[user_id] = now

    try:
        action = query.data

        if action != 'approve':
            pending_post["timer"] = datetime.now()

        if text_in_progress or image_in_progress or full_in_progress or chat_in_progress:
            await approval_bot.send_message(
                chat_id=TELEGRAM_APPROVAL_CHAT_ID,
                text="‚è≥ –ë–æ—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞—á—É, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
            )
            return

        prev_data.update(post_data)

        if action == 'approve':
            await approval_bot.send_message(chat_id=TELEGRAM_APPROVAL_CHAT_ID, text="‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏...")
            await publish_post()

        elif action == 'regenerate':
            text_in_progress = True
            try:
                await approval_bot.send_message(chat_id=TELEGRAM_APPROVAL_CHAT_ID, text="‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (—Ç–µ—Å—Ç)...")
                post_data['text_ru'] = f"–¢–µ—Å—Ç–æ–≤—ã–π –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç {post_data['post_id'] + 1}"
                post_data['post_id'] += 1
                await send_post_for_approval()
            except Exception as e:
                await approval_bot.send_message(chat_id=TELEGRAM_APPROVAL_CHAT_ID, text=f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
            finally:
                text_in_progress = False

        elif action == 'new_image':
            image_in_progress = True
            try:
                await approval_bot.send_message(chat_id=TELEGRAM_APPROVAL_CHAT_ID, text="‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏ (—Ç–µ—Å—Ç)...")
                new_image = random.choice([img for img in test_images if img != post_data['image_url']])
                post_data['image_url'] = new_image
                post_data['post_id'] += 1
                await send_post_for_approval()
            except Exception as e:
                await approval_bot.send_message(chat_id=TELEGRAM_APPROVAL_CHAT_ID, text=f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏: {e}")
            finally:
                image_in_progress = False

        elif action == 'new_post':
            full_in_progress = True
            try:
                await approval_bot.send_message(chat_id=TELEGRAM_APPROVAL_CHAT_ID, text="‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ –∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ (—Ç–µ—Å—Ç)...")
                post_data['text_ru'] = f"–¢–µ—Å—Ç–æ–≤—ã–π –Ω–æ–≤—ã–π –ø–æ—Å—Ç {post_data['post_id'] + 1}"
                new_image = random.choice([img for img in test_images if img != post_data['image_url']])
                post_data['image_url'] = new_image
                post_data['post_id'] += 1
                await send_post_for_approval()
            except Exception as e:
                await approval_bot.send_message(chat_id=TELEGRAM_APPROVAL_CHAT_ID, text=f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞: {e}")
            finally:
                full_in_progress = False

        elif action == 'think':
            if countdown_task is not None and not countdown_task.done():
                countdown_task.cancel()
            pending_post['timer'] = datetime.now()
            await send_timer_message()

        elif action == 'chat':
            chat_in_progress = True
            try:
                await approval_bot.send_message(
                    chat_id=TELEGRAM_APPROVAL_CHAT_ID,
                    text='üí¨ [–ó–∞–≥–ª—É—à–∫–∞] –ù–∞—á–∞–ª–æ —á–∞—Ç–∞\n' + post_data['text_ru']
                )
            finally:
                chat_in_progress = False

        elif action == 'do_not_disturb':
            do_not_disturb['active'] = True
            await approval_bot.send_message(chat_id=TELEGRAM_APPROVAL_CHAT_ID, text='üåô –†–µ–∂–∏–º "–ù–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å" –≤–∫–ª—é—á–µ–Ω.')

        elif action == 'end_day':
            pending_post['active'] = False
            do_not_disturb['active'] = True
            await approval_bot.send_message(chat_id=TELEGRAM_APPROVAL_CHAT_ID, text='üîö –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.')

        elif action == 'restore_previous':
            post_data.update(prev_data)
            await send_post_for_approval()
            await approval_bot.send_message(chat_id=TELEGRAM_APPROVAL_CHAT_ID, text='‚Ü©Ô∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ—Å—Ç–∞.')

    except Exception as e:
        await approval_bot.send_message(chat_id=TELEGRAM_APPROVAL_CHAT_ID, text=f"‚ùå –û—à–∏–±–∫–∞: {e}")
        logging.error(f"–û—à–∏–±–∫–∞ –≤ button_handler: {e}")

async def delayed_start(app: Application):
    await init_db()
    await send_post_for_approval()
    asyncio.create_task(check_timer())
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")

def main():
    app = Application.builder().token(TELEGRAM_BOT_TOKEN_APPROVAL).post_init(delayed_start).build()
    app.add_handler(CallbackQueryHandler(button_handler))
    app.run_polling()

if __name__ == "__main__":
    main()
