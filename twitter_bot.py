import os
import asyncio
import hashlib
import logging
import random
from datetime import datetime, timedelta, time as dt_time
import tweepy
import requests
import tempfile

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, Bot
from telegram.ext import Application, CallbackQueryHandler, ContextTypes
import aiosqlite
import telegram.error

logging.basicConfig(level=logging.INFO, format='%(asctime)s %(levelname)s %(message)s')

# ========== –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø ==========
TELEGRAM_BOT_TOKEN_APPROVAL = os.getenv("TELEGRAM_BOT_TOKEN_APPROVAL")
TELEGRAM_APPROVAL_CHAT_ID   = os.getenv("TELEGRAM_APPROVAL_CHAT_ID")
TELEGRAM_BOT_TOKEN_CHANNEL  = os.getenv("TELEGRAM_BOT_TOKEN_CHANNEL")
TELEGRAM_CHANNEL_USERNAME_ID = os.getenv("TELEGRAM_CHANNEL_USERNAME_ID")

if not TELEGRAM_BOT_TOKEN_APPROVAL or not TELEGRAM_APPROVAL_CHAT_ID or not TELEGRAM_BOT_TOKEN_CHANNEL or not TELEGRAM_CHANNEL_USERNAME_ID:
    logging.error("–ù–µ –∑–∞–¥–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (BOT_TOKEN_APPROVAL, APPROVAL_CHAT_ID, BOT_TOKEN_CHANNEL –∏–ª–∏ CHANNEL_USERNAME_ID)")
    exit(1)

# ========== TWITTER ==========
TWITTER_API_KEY             = os.getenv("TWITTER_API_KEY")
TWITTER_API_SECRET          = os.getenv("TWITTER_API_SECRET")
TWITTER_ACCESS_TOKEN        = os.getenv("TWITTER_ACCESS_TOKEN")
TWITTER_ACCESS_TOKEN_SECRET = os.getenv("TWITTER_ACCESS_TOKEN_SECRET")

if not all([
    TWITTER_API_KEY,
    TWITTER_API_SECRET,
    TWITTER_ACCESS_TOKEN,
    TWITTER_ACCESS_TOKEN_SECRET
]):
    logging.error("–ù–µ –∑–∞–¥–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Twitter!")
    exit(1)

def get_twitter_clients():
    client_v2 = tweepy.Client(
        consumer_key=TWITTER_API_KEY,
        consumer_secret=TWITTER_API_SECRET,
        access_token=TWITTER_ACCESS_TOKEN,
        access_token_secret=TWITTER_ACCESS_TOKEN_SECRET
    )
    api_v1 = tweepy.API(
        tweepy.OAuth1UserHandler(
            TWITTER_API_KEY,
            TWITTER_API_SECRET,
            TWITTER_ACCESS_TOKEN,
            TWITTER_ACCESS_TOKEN_SECRET
        )
    )
    return client_v2, api_v1

twitter_client_v2, twitter_api_v1 = get_twitter_clients()

approval_bot = Bot(token=TELEGRAM_BOT_TOKEN_APPROVAL)
channel_bot = Bot(token=TELEGRAM_BOT_TOKEN_CHANNEL)

# ========== –î–û–ë–ê–í–õ–ï–ù–û –î–õ–Ø TWITTER FOLLOWERS ==========
def get_twitter_followers_count():
    user = twitter_api_v1.get_user(screen_name="AiCoin_ETH")
    return user.followers_count

async def update_pinned_message_with_followers():
    followers = get_twitter_followers_count()
    text = (
        f"üÖß: <b>{followers}</b>\n"
        "Subscribe: https://x.com/AiCoin_ETH\n"
        "üåê: https://getaicoin.com"
    )
    chat = await channel_bot.get_chat(TELEGRAM_CHANNEL_USERNAME_ID)
    pinned = chat.pinned_message
    if pinned:
        await channel_bot.edit_message_text(
            chat_id=TELEGRAM_CHANNEL_USERNAME_ID,
            message_id=pinned.message_id,
            text=text,
            parse_mode='HTML'
        )
    else:
        msg = await channel_bot.send_message(
            chat_id=TELEGRAM_CHANNEL_USERNAME_ID,
            text=text,
            parse_mode='HTML'
        )
        await channel_bot.pin_chat_message(
            chat_id=TELEGRAM_CHANNEL_USERNAME_ID,
            message_id=msg.message_id
        )

# ========== –î–ê–ù–ù–´–ï –î–õ–Ø –¢–ï–°–¢–ê ==========
test_images = [
    "https://upload.wikimedia.org/wikipedia/commons/4/47/PNG_transparency_demonstration_1.png",
    "https://upload.wikimedia.org/wikipedia/commons/3/3f/Fronalpstock_big.jpg",
    "https://upload.wikimedia.org/wikipedia/commons/1/17/Google-flutter-logo.png",
    "https://upload.wikimedia.org/wikipedia/commons/d/d6/Wp-w4-big.jpg"
]

post_data = {
    "text_ru":   "–ú–∞–π–Ω–∏–Ω–≥–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã —Å–Ω–æ–≤–∞ –≤ —Ñ–æ–∫—É—Å–µ...",
    "image_url": test_images[0],
    "timestamp": None,
    "post_id":   0,
    "text_en":   "Mining tokens are back in focus. Example of a full English post for Telegram or short version for Twitter!"
}
prev_data = post_data.copy()

# ========== –¢–ê–ô–ú–ï–†–´ –ò –ö–û–õ-–í–û –ü–û–°–¢–û–í ==========
TIMER_PUBLISH_DEFAULT = 180    # 3 –º–∏–Ω—É—Ç—ã –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
TIMER_PUBLISH_EXTEND  = 900    # 15 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –ª—é–±–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏

pending_post         = {"active": False, "timer": None, "timeout": TIMER_PUBLISH_DEFAULT}
do_not_disturb       = {"active": False}
last_action_time     = {}
approval_message_ids = {"photo": None}
DB_FILE = "post_history.db"

scheduled_posts_per_day = 6
manual_posts_today = 0  # –°–∫–æ–ª—å–∫–æ —Ä—É—á–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è

def reset_timer(timeout=None):
    pending_post["timer"] = datetime.now()
    if timeout:
        pending_post["timeout"] = timeout

# ========== –ö–õ–ê–í–ò–ê–¢–£–†–´ ==========
keyboard = InlineKeyboardMarkup([
    [InlineKeyboardButton("‚úÖ –ü–æ—Å—Ç", callback_data="approve")],
    [InlineKeyboardButton("üïí –ü–æ–¥—É–º–∞—Ç—å", callback_data="think")],
    [InlineKeyboardButton("üÜï –ù–æ–≤—ã–π –ø–æ—Å—Ç", callback_data="new_post")],
    [InlineKeyboardButton("üí¨ –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å", callback_data="chat"), InlineKeyboardButton("üåô –ù–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å", callback_data="do_not_disturb")],
    [InlineKeyboardButton("‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–æ—Å—Ç", callback_data="restore_previous"), InlineKeyboardButton("üîö –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="end_day")]
])

def post_choice_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–ü–æ—Å—Ç –≤ Twitter", callback_data="post_twitter")],
        [InlineKeyboardButton("–ü–æ—Å—Ç –≤ Telegram", callback_data="post_telegram")],
        [InlineKeyboardButton("–ü–û–°–¢!", callback_data="post_both")],
        [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_to_main")]
    ])

def post_action_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("Post EN", callback_data="post_en")],
        [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_to_choice")]
    ])

post_end_keyboard = InlineKeyboardMarkup([
    [InlineKeyboardButton("üÜï –ù–æ–≤—ã–π –ø–æ—Å—Ç", callback_data="new_post_manual")],
    [InlineKeyboardButton("üåô –ù–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å", callback_data="do_not_disturb")],
    [InlineKeyboardButton("üîö –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="end_day")],
    [InlineKeyboardButton("üí¨ –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å", callback_data="chat")]
])

# ========== –ì–ï–ù–ï–†–ê–¶–ò–Ø –†–ê–°–ü–ò–°–ê–ù–ò–Ø ==========
def generate_random_schedule(
    posts_per_day=6,
    day_start_hour=6,
    day_end_hour=24,
    min_offset=-20,
    max_offset=20
):
    now = datetime.now()
    today = now.date()
    # –ù–µ –Ω–∞—á–∏–Ω–∞—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é –≤ –ø—Ä–æ—à–ª–æ–º, –µ—Å–ª–∏ –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –¥–Ω–µ–º
    start = datetime.combine(today, dt_time(hour=day_start_hour, minute=0, second=0))
    if now > start:
        start = now + timedelta(seconds=1)
    end = datetime.combine(today, dt_time(hour=day_end_hour, minute=0, second=0))
    total_seconds = int((end - start).total_seconds())
    if posts_per_day < 1:
        return []
    base_step = total_seconds // posts_per_day

    schedule = []
    for i in range(posts_per_day):
        base_sec = i * base_step
        offset_sec = random.randint(min_offset * 60, max_offset * 60) + random.randint(-59, 59)
        post_time = start + timedelta(seconds=base_sec + offset_sec)
        # –ù–µ –≤—ã—Ö–æ–¥–∏—Ç—å –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã
        if post_time < start:
            post_time = start
        if post_time > end:
            post_time = end
        schedule.append(post_time)
    schedule.sort()
    return schedule

# ========== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ü–û–°–¢–†–û–ï–ù–ò–Ø –¢–ï–ö–°–¢–ê ==========
def build_twitter_post(text_en: str) -> str:
    signature = (
        "\nRead more on Telegram: t.me/AiCoin_ETH or on the website: https://getaicoin.com/ "
        "#AiCoin #Ai $Ai #crypto #blockchain #AI #DeFi"
    )
    max_length = 280
    reserve = max_length - len(signature)
    if len(text_en) > reserve:
        main_part = text_en[:reserve - 3].rstrip() + "..."
    else:
        main_part = text_en
    return main_part + signature

# ========== TWITTER POST –° –û–ë–•–û–î–û–ú ==========
def publish_post_to_twitter(text, image_url=None):
    try:
        media_ids = None
        if image_url:
            response = requests.get(image_url)
            response.raise_for_status()
            with tempfile.NamedTemporaryFile(delete=False, suffix='.jpg') as tmp:
                tmp.write(response.content)
                tmp_path = tmp.name
            try:
                media = twitter_api_v1.media_upload(tmp_path)
                media_ids = [media.media_id_string]
            finally:
                os.remove(tmp_path)
        twitter_client_v2.create_tweet(text=text, media_ids=media_ids)
        logging.info("–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ Twitter!")
        return True
    except Exception as e:
        pending_post["active"] = False
        logging.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Twitter: {e}")
        asyncio.create_task(approval_bot.send_message(
            chat_id=TELEGRAM_APPROVAL_CHAT_ID,
            text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Twitter: {e}\n"
                 "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n"
                 "- –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–ª—é—á–µ–π/—Ç–æ–∫–µ–Ω–æ–≤\n"
                 "- –õ–∏–º–∏—Ç—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (Twitter API)\n"
                 "- –§–æ—Ä–º–∞—Ç –º–µ–¥–∏–∞\n"
                 "- –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞\n"
                 "–ü–æ—Å—Ç –Ω–µ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –ø–æ–≤—Ç–æ—Ä–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
        ))
        return False

# ========== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–î ==========
async def init_db():
    async with aiosqlite.connect(DB_FILE) as db:
        await db.execute(
            """
            CREATE TABLE IF NOT EXISTS posts (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                text TEXT NOT NULL,
                timestamp TEXT NOT NULL,
                image_hash TEXT
            )
            """
        )
        await db.commit()
    logging.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")

def get_image_hash(url: str) -> str | None:
    try:
        r = requests.get(url, timeout=3)
        r.raise_for_status()
        return hashlib.sha256(r.content).hexdigest()
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ö–µ—à –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return None

async def save_post_to_history(text, image_url=None):
    image_hash = get_image_hash(image_url) if image_url else None
    async with aiosqlite.connect(DB_FILE) as db:
        await db.execute(
            "INSERT INTO posts (text, timestamp, image_hash) VALUES (?, ?, ?)",
            (text, datetime.now().isoformat(), image_hash)
        )
        await db.commit()
    logging.info("–ü–æ—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –∏—Å—Ç–æ—Ä–∏—é.")

# ========== –û–¢–ü–†–ê–í–ö–ê –ù–ê –ú–û–î–ï–†–ê–¶–ò–Æ ==========
async def send_post_for_approval():
    if do_not_disturb["active"] or pending_post["active"]:
        return

    post_data["timestamp"] = datetime.now()
    pending_post.update({
        "active": True,
        "timer": datetime.now(),
        "timeout": TIMER_PUBLISH_DEFAULT
    })
    try:
        photo_msg = await approval_bot.send_photo(
            chat_id=TELEGRAM_APPROVAL_CHAT_ID,
            photo=post_data["image_url"],
            caption=post_data["text_ru"],
            reply_markup=keyboard
        )
        approval_message_ids["photo"] = photo_msg.message_id
        logging.info("–ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ: {e}")

# ========== –ü–£–ë–õ–ò–ö–ê–¶–ò–Ø –í –ö–ê–ù–ê–õ ==========
async def publish_post_to_channel():
    try:
        msg = await channel_bot.send_photo(
            chat_id=TELEGRAM_CHANNEL_USERNAME_ID,
            photo=post_data["image_url"],
            caption=post_data["text_ru"]
        )
        logging.info(f"–ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª {TELEGRAM_CHANNEL_USERNAME_ID}, message_id={msg.message_id}")
        await approval_bot.send_message(
            chat_id=TELEGRAM_APPROVAL_CHAT_ID,
            text=f"‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª {TELEGRAM_CHANNEL_USERNAME_ID}!\n\n–°—Å—ã–ª–∫–∞: https://t.me/{TELEGRAM_CHANNEL_USERNAME_ID.lstrip('@')}/{msg.message_id}"
        )
    except telegram.error.Forbidden as e:
        pending_post["active"] = False
        logging.error(f"Forbidden: –ë–æ—Ç –Ω–µ –∞–¥–º–∏–Ω –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –ø–∏—Å–∞—Ç—å –≤ –∫–∞–Ω–∞–ª {TELEGRAM_CHANNEL_USERNAME_ID}: {e}")
        await approval_bot.send_message(
            chat_id=TELEGRAM_APPROVAL_CHAT_ID,
            text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç: —É –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –∏–ª–∏ –æ–Ω –Ω–µ –≤ –∫–∞–Ω–∞–ª–µ!"
        )
    except telegram.error.BadRequest as e:
        pending_post["active"] = False
        logging.error(f"BadRequest: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ username –∫–∞–Ω–∞–ª–∞ {TELEGRAM_CHANNEL_USERNAME_ID}: {e}")
        await approval_bot.send_message(
            chat_id=TELEGRAM_APPROVAL_CHAT_ID,
            text=f"‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ username –∫–∞–Ω–∞–ª–∞ {TELEGRAM_CHANNEL_USERNAME_ID}!"
        )
    except Exception as e:
        pending_post["active"] = False
        logging.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª {TELEGRAM_CHANNEL_USERNAME_ID}: {e}")
        await approval_bot.send_message(
            chat_id=TELEGRAM_APPROVAL_CHAT_ID,
            text="‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª!"
        )

    asyncio.create_task(save_post_to_history(post_data["text_ru"], post_data["image_url"]))
    pending_post["active"] = False

# ========== –¢–ê–ô–ú–ï–† –ú–û–î–ï–†–ê–¶–ò–ò ==========
async def check_timer():
    while True:
        await asyncio.sleep(0.5)
        if pending_post["active"] and pending_post.get("timer"):
            passed = (datetime.now() - pending_post["timer"]).total_seconds()
            if passed > pending_post.get("timeout", TIMER_PUBLISH_DEFAULT):
                try:
                    await approval_bot.send_message(
                        chat_id=TELEGRAM_APPROVAL_CHAT_ID,
                        text="‚åõ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ü—É–±–ª–∏–∫—É—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
                    )
                    await publish_post_to_channel()
                    twitter_text = build_twitter_post(post_data["text_en"])
                    publish_post_to_twitter(twitter_text, post_data["image_url"])
                    logging.info("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞.")
                    await approval_bot.send_message(
                        chat_id=TELEGRAM_APPROVAL_CHAT_ID,
                        text="‚úÖ –ü–æ—Å—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã –≤ Telegram –∏ Twitter."
                    )
                    await approval_bot.send_message(
                        chat_id=TELEGRAM_APPROVAL_CHAT_ID,
                        text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                        reply_markup=post_end_keyboard
                    )
                except Exception as e:
                    pending_post["active"] = False
                    await approval_bot.send_message(
                        chat_id=TELEGRAM_APPROVAL_CHAT_ID,
                        text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}\n–í–æ–∑–º–æ–∂–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á–∏, –ª–∏–º–∏—Ç—ã, –ø—Ä–∞–≤–∞ –±–æ—Ç–∞, –ª–∏–º–∏—Ç—ã Twitter/Telegram."
                    )
                    await approval_bot.send_message(
                        chat_id=TELEGRAM_APPROVAL_CHAT_ID,
                        text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                        reply_markup=post_end_keyboard
                    )
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
                pending_post["active"] = False  # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã —ç—Ç–æ–≥–æ –ø–æ—Å—Ç–∞

# ========== –ê–°–ò–ù–•–†–û–ù–ù–û–ï –†–ê–°–ü–ò–°–ê–ù–ò–ï ==========
async def schedule_daily_posts():
    global manual_posts_today
    while True:
        manual_posts_today = 0  # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ä—É—á–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –∫–∞–∂–¥—ã–π –Ω–æ–≤—ã–π –¥–µ–Ω—å
        now = datetime.now()
        if now.hour < 6:
            to_sleep = (datetime.combine(now.date(), dt_time(hour=6)) - now).total_seconds()
            logging.info(f"–ñ–¥—É –¥–æ 06:00... {int(to_sleep)} —Å–µ–∫")
            await asyncio.sleep(to_sleep)

        posts_left = lambda: scheduled_posts_per_day - manual_posts_today
        while posts_left() > 0:
            schedule = generate_random_schedule(posts_per_day=posts_left())
            logging.info(f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞–≤—Ç–æ-–ø–æ—Å—Ç–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: {[t.strftime('%H:%M:%S') for t in schedule]}")
            for post_time in schedule:
                # –ü–µ—Ä–µ—Å—á—ë—Ç –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ ‚Äî –µ—Å–ª–∏ —Ä—É—á–Ω–æ–π –ø–æ—Å—Ç –±—ã–ª –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω, —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è –æ—Å—Ç–∞–≤—à–µ–µ—Å—è —á–∏—Å–ª–æ
                if posts_left() <= 0:
                    break
                now = datetime.now()
                delay = (post_time - now).total_seconds()
                if delay > 0:
                    logging.info(f"–ñ–¥—É {int(delay)} —Å–µ–∫ –¥–æ {post_time.strftime('%H:%M:%S')} –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∞–≤—Ç–æ-–ø–æ—Å—Ç–∞")
                    await asyncio.sleep(delay)
                pending_post["active"] = False
                post_data["text_ru"] = f"–ù–æ–≤—ã–π –ø–æ—Å—Ç ({post_time.strftime('%H:%M:%S')})"
                post_data["image_url"] = random.choice(test_images)
                post_data["post_id"] += 1
                post_data["is_manual"] = False
                await send_post_for_approval()
                # –ñ–¥—ë–º –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ –∏–ª–∏ –∞–≤—Ç–æ—Ç–∞–π–º–∞—É—Ç–∞ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ —Ç–∞–π–º–µ—Ä—É)
                while pending_post["active"]:
                    await asyncio.sleep(1)
        # –ñ–¥—ë–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è
        tomorrow = datetime.combine(datetime.now().date() + timedelta(days=1), dt_time(hour=0))
        to_next_day = (tomorrow - datetime.now()).total_seconds()
        await asyncio.sleep(to_next_day)
        manual_posts_today = 0  # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤ –Ω–∞—á–∞–ª–µ –Ω–æ–≤–æ–≥–æ –¥–Ω—è

# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–û–ö ==========
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global last_action_time, prev_data, manual_posts_today
    await update.callback_query.answer()
    if pending_post["active"]:
        reset_timer(TIMER_PUBLISH_EXTEND)

    user_id = update.effective_user.id
    now = datetime.now()
    if user_id in last_action_time and (now - last_action_time[user_id]).seconds < 3:
        await approval_bot.send_message(chat_id=TELEGRAM_APPROVAL_CHAT_ID, text="‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ...", reply_markup=keyboard)
        return
    last_action_time[user_id] = now
    action = update.callback_query.data
    prev_data.update(post_data)

    # --- –ù–æ–≤–∞—è –≤–µ—Ç–∫–∞: –ø–æ—Å–ª–µ "‚úÖ –ü–æ—Å—Ç" ---
    if action == 'approve':
        twitter_text = build_twitter_post(post_data["text_en"])
        await approval_bot.send_photo(
            chat_id=TELEGRAM_APPROVAL_CHAT_ID,
            photo=post_data["image_url"],
            caption=twitter_text,
            reply_markup=post_choice_keyboard()
        )
        return

    if action == "post_twitter":
        twitter_text = build_twitter_post(post_data["text_en"])
        context.user_data["publish_mode"] = "twitter"
        await approval_bot.send_photo(
            chat_id=TELEGRAM_APPROVAL_CHAT_ID,
            photo=post_data["image_url"],
            caption=twitter_text,
            reply_markup=post_action_keyboard()
        )
        return
    if action == "post_telegram":
        context.user_data["publish_mode"] = "telegram"
        await approval_bot.send_photo(
            chat_id=TELEGRAM_APPROVAL_CHAT_ID,
            photo=post_data["image_url"],
            caption=post_data["text_en"] + "\n\nüåê https://getaicoin.com/",
            reply_markup=post_action_keyboard()
        )
        return
    if action == "post_both":
        twitter_text = build_twitter_post(post_data["text_en"])
        context.user_data["publish_mode"] = "both"
        await approval_bot.send_photo(
            chat_id=TELEGRAM_APPROVAL_CHAT_ID,
            photo=post_data["image_url"],
            caption=twitter_text,
            reply_markup=post_action_keyboard()
        )
        return
    if action == "post_en":
        mode = context.user_data.get("publish_mode", "twitter")
        twitter_text = build_twitter_post(post_data["text_en"])
        twitter_success = False
        telegram_success = False
        is_manual = post_data.get("is_manual", False)
        if mode == "twitter":
            twitter_success = publish_post_to_twitter(twitter_text, post_data["image_url"])
            pending_post["active"] = False
            await approval_bot.send_message(
                chat_id=TELEGRAM_APPROVAL_CHAT_ID,
                text="‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Twitter!" if twitter_success else "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Twitter.",
                reply_markup=None
            )
            await approval_bot.send_message(
                chat_id=TELEGRAM_APPROVAL_CHAT_ID,
                text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=post_end_keyboard
            )
        elif mode == "telegram":
            try:
                await channel_bot.send_photo(
                    chat_id=TELEGRAM_CHANNEL_USERNAME_ID,
                    photo=post_data["image_url"],
                    caption=post_data["text_en"] + "\n\nüåê https://getaicoin.com/"
                )
                telegram_success = True
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Telegram: {e}")
                await approval_bot.send_message(
                    chat_id=TELEGRAM_APPROVAL_CHAT_ID,
                    text=f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram: {e}",
                    reply_markup=None
                )
            pending_post["active"] = False
            await approval_bot.send_message(
                chat_id=TELEGRAM_APPROVAL_CHAT_ID,
                text="‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram!" if telegram_success else "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram.",
                reply_markup=None
            )
            await approval_bot.send_message(
                chat_id=TELEGRAM_APPROVAL_CHAT_ID,
                text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=post_end_keyboard
            )
        elif mode == "both":
            try:
                await channel_bot.send_photo(
                    chat_id=TELEGRAM_CHANNEL_USERNAME_ID,
                    photo=post_data["image_url"],
                    caption=post_data["text_en"] + "\n\nüåê https://getaicoin.com/"
                )
                telegram_success = True
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Telegram: {e}")
                await approval_bot.send_message(
                    chat_id=TELEGRAM_APPROVAL_CHAT_ID,
                    text=f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram: {e}",
                    reply_markup=None
                )
            twitter_success = publish_post_to_twitter(twitter_text, post_data["image_url"])
            pending_post["active"] = False
            await approval_bot.send_message(
                chat_id=TELEGRAM_APPROVAL_CHAT_ID,
                text="‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram!" if telegram_success else "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram.",
                reply_markup=None
            )
            await approval_bot.send_message(
                chat_id=TELEGRAM_APPROVAL_CHAT_ID,
                text="‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Twitter!" if twitter_success else "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Twitter.",
                reply_markup=None
            )
            await approval_bot.send_message(
                chat_id=TELEGRAM_APPROVAL_CHAT_ID,
                text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=post_end_keyboard
            )
        # –ü–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ä—É—á–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ - —É–º–µ–Ω—å—à–∞–µ–º —á–∏—Å–ª–æ –∞–≤—Ç–æ-–ø–æ—Å—Ç–æ–≤
        if is_manual:
            manual_posts_today += 1
            post_data["is_manual"] = False
        return
    if action == "cancel_to_main":
        if pending_post["active"]:
            await send_post_for_approval()
        return
    if action == "cancel_to_choice":
        twitter_text = build_twitter_post(post_data["text_en"])
        await approval_bot.send_photo(
            chat_id=TELEGRAM_APPROVAL_CHAT_ID,
            photo=post_data["image_url"],
            caption=twitter_text,
            reply_markup=post_choice_keyboard()
        )
        return

    if action == "new_post":
        pending_post["active"] = False
        post_data["text_ru"] = f"–ù–æ–≤—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç #{post_data['post_id'] + 1}"
        post_data["image_url"] = random.choice(test_images)
        post_data["post_id"] += 1
        post_data["is_manual"] = False
        await send_post_for_approval()
        return
    if action == "new_post_manual":
        pending_post["active"] = False
        post_data["text_ru"] = f"–†—É—á–Ω–æ–π –Ω–æ–≤—ã–π –ø–æ—Å—Ç #{post_data['post_id'] + 1}"
        post_data["image_url"] = random.choice(test_images)
        post_data["post_id"] += 1
        post_data["is_manual"] = True
        await send_post_for_approval()
        return
    elif action == 'think':
        await approval_bot.send_message(chat_id=TELEGRAM_APPROVAL_CHAT_ID, text="üßê –î—É–º–∞–µ–º –¥–∞–ª—å—à–µ‚Ä¶", reply_markup=keyboard)
    elif action == "chat":
        await approval_bot.send_message(
            chat_id=TELEGRAM_APPROVAL_CHAT_ID,
            text="üí¨ –ù–∞—á–∏–Ω–∞–µ–º —á–∞—Ç:\n" + post_data["text_ru"],
            reply_markup=post_end_keyboard
        )
    elif action == "do_not_disturb":
        do_not_disturb["active"] = not do_not_disturb["active"]
        status = "–≤–∫–ª—é—á—ë–Ω" if do_not_disturb["active"] else "–≤—ã–∫–ª—é—á–µ–Ω"
        await approval_bot.send_message(
            chat_id=TELEGRAM_APPROVAL_CHAT_ID,
            text=f"üåô –†–µ–∂–∏–º ¬´–ù–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å¬ª {status}.",
            reply_markup=post_end_keyboard
        )
    elif action == "restore_previous":
        post_data.update(prev_data)
        await approval_bot.send_message(chat_id=TELEGRAM_APPROVAL_CHAT_ID, text="‚Ü©Ô∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç.", reply_markup=keyboard)
        if pending_post["active"]:
            await send_post_for_approval()
    elif action == "end_day":
        pending_post["active"] = False
        do_not_disturb["active"] = True
        await approval_bot.send_message(chat_id=TELEGRAM_APPROVAL_CHAT_ID, text="üîö –ó–∞–≤–µ—Ä—à–∏–ª–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.", reply_markup=post_end_keyboard)

# ========== –ó–ê–ü–£–°–ö ==========
async def delayed_start(app: Application):
    await init_db()
    asyncio.create_task(schedule_daily_posts())
    await send_post_for_approval()
    asyncio.create_task(check_timer())
    await update_pinned_message_with_followers()  # <<< –î–û–ë–ê–í–õ–ï–ù–û!
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")

def main():
    logging.info("–°—Ç–∞—Ä—Ç Telegram –±–æ—Ç–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏‚Ä¶")
    app = Application.builder()\
        .token(TELEGRAM_BOT_TOKEN_APPROVAL)\
        .post_init(delayed_start)\
        .build()
    app.add_handler(CallbackQueryHandler(button_handler))
    app.run_polling(poll_interval=0.12, timeout=1)

if __name__ == "__main__":
    main()
