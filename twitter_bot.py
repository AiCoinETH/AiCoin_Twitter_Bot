import os
import asyncio
import hashlib
import logging
import random
from datetime import datetime, timedelta

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, Bot
from telegram.ext import Application, CallbackQueryHandler, ContextTypes
import aiosqlite
import telegram.error

logging.basicConfig(level=logging.INFO, format='%(asctime)s %(levelname)s %(message)s')

# ========== –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø ==========
TELEGRAM_BOT_TOKEN_APPROVAL = os.getenv("TELEGRAM_BOT_TOKEN_APPROVAL")    # —Ç–æ–∫–µ–Ω –¥–ª—è –≥—Ä—É–ø–ø—ã –º–æ–¥–µ—Ä–∞—Ü–∏–∏
TELEGRAM_APPROVAL_CHAT_ID   = os.getenv("TELEGRAM_APPROVAL_CHAT_ID")
TELEGRAM_BOT_TOKEN_CHANNEL  = os.getenv("TELEGRAM_BOT_TOKEN_CHANNEL")     # —Ç–æ–∫–µ–Ω –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
TELEGRAM_CHANNEL_USERNAME_ID = os.getenv("TELEGRAM_CHANNEL_USERNAME_ID")  # '@AiCoin_ETH'

if not TELEGRAM_BOT_TOKEN_APPROVAL or not TELEGRAM_APPROVAL_CHAT_ID or not TELEGRAM_BOT_TOKEN_CHANNEL or not TELEGRAM_CHANNEL_USERNAME_ID:
    logging.error("–ù–µ –∑–∞–¥–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (BOT_TOKEN_APPROVAL, APPROVAL_CHAT_ID, BOT_TOKEN_CHANNEL –∏–ª–∏ CHANNEL_USERNAME_ID)")
    exit(1)

approval_bot = Bot(token=TELEGRAM_BOT_TOKEN_APPROVAL)
channel_bot = Bot(token=TELEGRAM_BOT_TOKEN_CHANNEL)

# ========== –î–ê–ù–ù–´–ï –î–õ–Ø –¢–ï–°–¢–ê ==========
test_images = [
    "https://upload.wikimedia.org/wikipedia/commons/4/47/PNG_transparency_demonstration_1.png",
    "https://upload.wikimedia.org/wikipedia/commons/3/3f/Fronalpstock_big.jpg",
    "https://upload.wikimedia.org/wikipedia/commons/1/17/Google-flutter-logo.png",
    "https://upload.wikimedia.org/wikipedia/commons/d/d6/Wp-w4-big.jpg"
]

post_data = {
    "text_ru":   "–ú–∞–π–Ω–∏–Ω–≥–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã —Å–Ω–æ–≤–∞ –≤ —Ñ–æ–∫—É—Å–µ...",
    "image_url": test_images[0],
    "timestamp": None,
    "post_id":   0
}
prev_data = post_data.copy()

pending_post         = {"active": False, "timer": None}
do_not_disturb       = {"active": False}
last_action_time     = {}
approval_message_ids = {"photo": None}
DB_FILE = "post_history.db"

# ========== –ö–õ–ê–í–ò–ê–¢–£–†–ê –î–õ–Ø –ú–û–î–ï–†–ê–¶–ò–ò ==========
keyboard = InlineKeyboardMarkup([
    [InlineKeyboardButton("‚úÖ –ü–æ—Å—Ç", callback_data="approve")],
    [InlineKeyboardButton("üïí –ü–æ–¥—É–º–∞—Ç—å", callback_data="think")],
    [InlineKeyboardButton("üìù –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç", callback_data="regenerate")],
    [InlineKeyboardButton("üñºÔ∏è –ù–æ–≤–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞", callback_data="new_image")],
    [InlineKeyboardButton("üÜï –ü–æ—Å—Ç —Ü–µ–ª–∏–∫–æ–º", callback_data="new_post")],
    [InlineKeyboardButton("üí¨ –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å", callback_data="chat"), InlineKeyboardButton("üåô –ù–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å", callback_data="do_not_disturb")],
    [InlineKeyboardButton("‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–æ—Å—Ç", callback_data="restore_previous"), InlineKeyboardButton("üîö –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="end_day")]
])

# ========== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–î ==========
async def init_db():
    async with aiosqlite.connect(DB_FILE) as db:
        await db.execute(
            """
            CREATE TABLE IF NOT EXISTS posts (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                text TEXT NOT NULL,
                timestamp TEXT NOT NULL,
                image_hash TEXT
            )
            """
        )
        await db.commit()
    logging.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")

def get_image_hash(url: str) -> str | None:
    try:
        import requests
        r = requests.get(url, timeout=3)  # –ë—ã–ª–æ 5, —Ç–µ–ø–µ—Ä—å 3
        r.raise_for_status()
        return hashlib.sha256(r.content).hexdigest()
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ö–µ—à –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return None

async def save_post_to_history(text, image_url=None):
    image_hash = get_image_hash(image_url) if image_url else None
    async with aiosqlite.connect(DB_FILE) as db:
        await db.execute(
            "INSERT INTO posts (text, timestamp, image_hash) VALUES (?, ?, ?)",
            (text, datetime.now().isoformat(), image_hash)
        )
        await db.commit()
    logging.info("–ü–æ—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –∏—Å—Ç–æ—Ä–∏—é.")

# ========== –û–¢–ü–†–ê–í–ö–ê –ù–ê –ú–û–î–ï–†–ê–¶–ò–Æ ==========
async def send_post_for_approval():
    if do_not_disturb["active"] or pending_post["active"]:
        return

    post_data["timestamp"] = datetime.now()
    pending_post.update({"active": True, "timer": datetime.now()})
    try:
        photo_msg = await approval_bot.send_photo(
            chat_id=TELEGRAM_APPROVAL_CHAT_ID,
            photo=post_data["image_url"],
            caption=post_data["text_ru"],
            reply_markup=keyboard
        )
        approval_message_ids["photo"] = photo_msg.message_id
        logging.info("–ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ: {e}")

# ========== –ü–£–ë–õ–ò–ö–ê–¶–ò–Ø –í –ö–ê–ù–ê–õ ==========
async def publish_post_to_channel():
    try:
        msg = await channel_bot.send_photo(
            chat_id=TELEGRAM_CHANNEL_USERNAME_ID,
            photo=post_data["image_url"],
            caption=post_data["text_ru"]
        )
        logging.info(f"–ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª {TELEGRAM_CHANNEL_USERNAME_ID}, message_id={msg.message_id}")
    except telegram.error.Forbidden as e:
        logging.error(f"Forbidden: –ë–æ—Ç –Ω–µ –∞–¥–º–∏–Ω –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –ø–∏—Å–∞—Ç—å –≤ –∫–∞–Ω–∞–ª {TELEGRAM_CHANNEL_USERNAME_ID}: {e}")
    except telegram.error.BadRequest as e:
        logging.error(f"BadRequest: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ username –∫–∞–Ω–∞–ª–∞ {TELEGRAM_CHANNEL_USERNAME_ID}: {e}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª {TELEGRAM_CHANNEL_USERNAME_ID}: {e}")

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø–æ —Ñ–∞–∫—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–±—ã—Å—Ç—Ä–µ–µ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫)
    asyncio.create_task(save_post_to_history(post_data["text_ru"], post_data["image_url"]))
    pending_post["active"] = False

# ========== –¢–ê–ô–ú–ï–† –ú–û–î–ï–†–ê–¶–ò–ò ==========
async def check_timer():
    while True:
        await asyncio.sleep(0.3)  # –ë—ã–ª–æ 1 —Å–µ–∫—É–Ω–¥–∞, —Ç–µ–ø–µ—Ä—å –±—ã—Å—Ç—Ä–µ–µ
        if pending_post["active"] and pending_post.get("timer") and (datetime.now() - pending_post["timer"]) > timedelta(seconds=60):
            try:
                await approval_bot.send_message(
                    chat_id=TELEGRAM_APPROVAL_CHAT_ID,
                    text="‚åõ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ü—É–±–ª–∏–∫—É—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
                )
            except Exception:
                pass
            await publish_post_to_channel()
            pending_post["active"] = False

# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–û–ö ==========
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global last_action_time, prev_data
    await update.callback_query.answer()
    user_id = update.effective_user.id
    now = datetime.now()
    if user_id in last_action_time and (now - last_action_time[user_id]).seconds < 3:  # –ë—ã–ª–æ 5, —Ç–µ–ø–µ—Ä—å 3
        await approval_bot.send_message(chat_id=TELEGRAM_APPROVAL_CHAT_ID, text="‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ...")
        return
    last_action_time[user_id] = now
    action = update.callback_query.data
    prev_data.update(post_data)
    if action == 'approve':
        await approval_bot.send_message(chat_id=TELEGRAM_APPROVAL_CHAT_ID, text="‚è≥ –ü—É–±–ª–∏–∫—É—é –≤ –∫–∞–Ω–∞–ª‚Ä¶")
        await publish_post_to_channel()
    elif action == 'think':
        pending_post["timer"] = datetime.now()
        await approval_bot.send_message(chat_id=TELEGRAM_APPROVAL_CHAT_ID, text="üßê –î—É–º–∞–µ–º –¥–∞–ª—å—à–µ‚Ä¶")
    elif action == 'regenerate':
        post_data["text_ru"] = f"–ù–æ–≤—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç #{post_data['post_id'] + 1}"
        post_data["post_id"] += 1
        await send_post_for_approval()
    elif action == "new_image":
        post_data["image_url"] = random.choice([img for img in test_images if img != post_data["image_url"]])
        await send_post_for_approval()
    elif action == "new_post":
        post_data["text_ru"] = f"–ù–æ–≤—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç #{post_data['post_id'] + 1}"
        post_data["image_url"] = random.choice(test_images)
        post_data["post_id"] += 1
        await send_post_for_approval()
    elif action == "chat":
        await approval_bot.send_message(
            chat_id=TELEGRAM_APPROVAL_CHAT_ID,
            text="üí¨ –ù–∞—á–∏–Ω–∞–µ–º —á–∞—Ç:\n" + post_data["text_ru"]
        )
    elif action == "do_not_disturb":
        do_not_disturb["active"] = not do_not_disturb["active"]
        status = "–≤–∫–ª—é—á—ë–Ω" if do_not_disturb["active"] else "–≤—ã–∫–ª—é—á–µ–Ω"
        await approval_bot.send_message(
            chat_id=TELEGRAM_APPROVAL_CHAT_ID,
            text=f"üåô –†–µ–∂–∏–º ¬´–ù–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å¬ª {status}."
        )
    elif action == "restore_previous":
        post_data.update(prev_data)
        await approval_bot.send_message(chat_id=TELEGRAM_APPROVAL_CHAT_ID, text="‚Ü©Ô∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç.")
        await send_post_for_approval()
    elif action == "end_day":
        pending_post["active"] = False
        do_not_disturb["active"] = True
        await approval_bot.send_message(chat_id=TELEGRAM_APPROVAL_CHAT_ID, text="üîö –ó–∞–≤–µ—Ä—à–∏–ª–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.")

# ========== –ó–ê–ü–£–°–ö ==========
async def delayed_start(app: Application):
    await init_db()
    await send_post_for_approval()
    asyncio.create_task(check_timer())
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")

def main():
    logging.info("–°—Ç–∞—Ä—Ç Telegram –±–æ—Ç–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏‚Ä¶")
    app = Application.builder()\
        .token(TELEGRAM_BOT_TOKEN_APPROVAL)\
        .post_init(delayed_start)\
        .build()
    app.add_handler(CallbackQueryHandler(button_handler))
    # –£—Å–∫–æ—Ä–µ–Ω–Ω—ã–π polling!
    app.run_polling(poll_interval=0.12, timeout=1)

if __name__ == "__main__":
    main()
