# -*- coding: utf-8 -*-
"""
–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å—é –≤ SQLite –¥–ª—è twitter_bot.py.

–°–æ–≤–º–µ—Å—Ç–∏–º —Å –æ–∂–∏–¥–∞–Ω–∏—è–º–∏ –±–æ—Ç–∞:
  PLAN_* , ITEM_MENU:, DEL_ITEM:, EDIT_TIME:, EDIT_ITEM:, EDIT_FIELD: (—Ä–µ–∑–µ—Ä–≤),
  AI_FILL_TEXT:, CLONE_ITEM:, AI_NEW_FROM:, –∞ —Ç–∞–∫–∂–µ PLAN_DONE / GEN_DONE / BACK_MAIN_MENU.

–•—Ä–∞–Ω–µ–Ω–∏–µ:
  - –¢–∞–±–ª–∏—Ü–∞ plan_items(user_id, item_id, text, when_hhmm, done, created_at)
  - item_id ‚Äî –ª–æ–∫–∞–ª—å–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (1,2,3,...) ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è
"""

from __future__ import annotations
import re
import asyncio
import aiosqlite
from dataclasses import dataclass
from typing import Callable, Dict, List, Optional, Tuple
from datetime import datetime
from zoneinfo import ZoneInfo

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    Application,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters,
)
from telegram.error import BadRequest

# ------------------
# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã / –≥–ª–æ–±–∞–ª—ã
# ------------------
TZ = ZoneInfo("Europe/Kyiv")
DB_FILE = "planner.db"

USER_STATE: Dict[int, dict] = {}   # –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ (–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞/–≤—Ä–µ–º–µ–Ω–∏/–Ω–æ–≤–∞—è —Ç–µ–º–∞); –∫–ª—é—á: user_id
_ai_generator: Optional[Callable[[str], "asyncio.Future"]] = None
_db_ready = False  # –ª–µ–Ω–∏–≤—ã–π init

def set_ai_generator(fn: Callable[[str], "asyncio.Future"]) -> None:
    """–ë–æ—Ç –æ—Ç–¥–∞—ë—Ç —Å—é–¥–∞ —Å–≤–æ–π AI-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä (async)."""
    global _ai_generator
    _ai_generator = fn

# ------------
# –ú–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö
# ------------
@dataclass
class PlanItem:
    user_id: int
    item_id: int        # –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–∫–æ–≤—ã–π id –≤–Ω—É—Ç—Ä–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    text: str
    when_hhmm: Optional[str]  # "HH:MM" | None
    done: bool

# ------------
# –ë–∞–∑–∞ (SQLite)
# ------------
CREATE_SQL = """
CREATE TABLE IF NOT EXISTS plan_items (
  user_id     INTEGER NOT NULL,
  item_id     INTEGER NOT NULL,
  text        TEXT    NOT NULL DEFAULT '',
  when_hhmm   TEXT,
  done        INTEGER NOT NULL DEFAULT 0,
  created_at  TEXT    NOT NULL,
  PRIMARY KEY (user_id, item_id)
);
"""

async def _ensure_db() -> None:
    global _db_ready
    if _db_ready: return
    async with aiosqlite.connect(DB_FILE) as db:
        await db.execute(CREATE_SQL)
        await db.commit()
    _db_ready = True

async def _get_items(uid: int) -> List[PlanItem]:
    await _ensure_db()
    async with aiosqlite.connect(DB_FILE) as db:
        db.row_factory = aiosqlite.Row
        cur = await db.execute(
            "SELECT user_id, item_id, text, when_hhmm, done FROM plan_items WHERE user_id=? ORDER BY item_id ASC",
            (uid,)
        )
        rows = await cur.fetchall()
    return [
        PlanItem(user_id=r["user_id"], item_id=r["item_id"], text=r["text"],
                 when_hhmm=r["when_hhmm"], done=bool(r["done"]))
        for r in rows
    ]

async def _next_item_id(uid: int) -> int:
    await _ensure_db()
    async with aiosqlite.connect(DB_FILE) as db:
        cur = await db.execute("SELECT COALESCE(MAX(item_id),0) FROM plan_items WHERE user_id=?", (uid,))
        (mx,) = await cur.fetchone()
    return int(mx) + 1

async def _insert_item(uid: int, text: str = "", when_hhmm: Optional[str] = None) -> PlanItem:
    iid = await _next_item_id(uid)
    now = datetime.now(TZ).isoformat()
    await _ensure_db()
    async with aiosqlite.connect(DB_FILE) as db:
        await db.execute(
            "INSERT INTO plan_items(user_id, item_id, text, when_hhmm, done, created_at) VALUES (?,?,?,?,?,?)",
            (uid, iid, text or "", when_hhmm, 0, now)
        )
        await db.commit()
    return PlanItem(uid, iid, text or "", when_hhmm, False)

async def _update_text(uid: int, iid: int, text: str) -> None:
    await _ensure_db()
    async with aiosqlite.connect(DB_FILE) as db:
        await db.execute(
            "UPDATE plan_items SET text=? WHERE user_id=? AND item_id=?",
            (text or "", uid, iid)
        )
        await db.commit()

async def _update_time(uid: int, iid: int, when_hhmm: Optional[str]) -> None:
    await _ensure_db()
    async with aiosqlite.connect(DB_FILE) as db:
        await db.execute(
            "UPDATE plan_items SET when_hhmm=? WHERE user_id=? AND item_id=?",
            (when_hhmm, uid, iid)
        )
        await db.commit()

async def _update_done(uid: int, iid: int, done: bool) -> None:
    await _ensure_db()
    async with aiosqlite.connect(DB_FILE) as db:
        await db.execute(
            "UPDATE plan_items SET done=? WHERE user_id=? AND item_id=?",
            (1 if done else 0, uid, iid)
        )
        await db.commit()

async def _delete_item(uid: int, iid: int) -> None:
    await _ensure_db()
    async with aiosqlite.connect(DB_FILE) as db:
        await db.execute("DELETE FROM plan_items WHERE user_id=? AND item_id=?", (uid, iid))
        await db.commit()

async def _get_item(uid: int, iid: int) -> Optional[PlanItem]:
    await _ensure_db()
    async with aiosqlite.connect(DB_FILE) as db:
        db.row_factory = aiosqlite.Row
        cur = await db.execute(
            "SELECT user_id, item_id, text, when_hhmm, done FROM plan_items WHERE user_id=? AND item_id=?",
            (uid, iid)
        )
        row = await cur.fetchone()
    if not row: return None
    return PlanItem(row["user_id"], row["item_id"], row["text"], row["when_hhmm"], bool(row["done"]))

async def _clone_item(uid: int, src: PlanItem) -> PlanItem:
    return await _insert_item(uid, text=src.text, when_hhmm=src.when_hhmm)

# -------------------------
# –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã UI
# -------------------------
def _fmt_item(i: PlanItem) -> str:
    t = f"[{i.when_hhmm}]" if i.when_hhmm else "[‚Äî]"
    d = "‚úÖ" if i.done else "üü°"
    txt = (i.text or "").strip() or "(–ø—É—Å—Ç–æ)"
    return f"{d} {t} {txt}"

async def _kb_main(uid: int) -> InlineKeyboardMarkup:
    items = await _get_items(uid)
    rows: List[List[InlineKeyboardButton]] = []
    for it in items:
        rows.append([InlineKeyboardButton(_fmt_item(it), callback_data=f"ITEM_MENU:{it.item_id}")])
    rows += [
        [InlineKeyboardButton("‚ûï –ù–æ–≤–∞—è (–ø—É—Å—Ç–∞—è)", callback_data="PLAN_ADD_EMPTY"),
         InlineKeyboardButton("‚ú® –ù–æ–≤–∞—è –æ—Ç –ò–ò", callback_data="PLAN_ADD_AI")],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="BACK_MAIN_MENU"),
         InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="PLAN_DONE")],
    ]
    return InlineKeyboardMarkup(rows)

def _kb_item(it: PlanItem) -> InlineKeyboardMarkup:
    rows = [
        [InlineKeyboardButton("‚úèÔ∏è –¢–µ–∫—Å—Ç", callback_data=f"EDIT_ITEM:{it.item_id}"),
         InlineKeyboardButton("‚è∞ –í—Ä–µ–º—è", callback_data=f"EDIT_TIME:{it.item_id}")],
        [InlineKeyboardButton("ü§ñ –ò–ò-—Ç–µ–∫—Å—Ç", callback_data=f"AI_FILL_TEXT:{it.item_id}"),
         InlineKeyboardButton("üß¨ –ö–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"CLONE_ITEM:{it.item_id}")],
        [InlineKeyboardButton("‚úÖ/üü° –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"TOGGLE_DONE:{it.item_id}")],
        [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"DEL_ITEM:{it.item_id}")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É", callback_data="PLAN_OPEN")],
    ]
    return InlineKeyboardMarkup(rows)

def _kb_gen_topic() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É", callback_data="PLAN_OPEN")]])

# ---------------
# –ü–∞—Ä—Å–µ—Ä—ã/—Ö–µ–ª–ø–µ—Ä—ã
# ---------------
_TIME_RE = re.compile(r"^([01]?\d|2[0-3]):([0-5]\d)$")

def _parse_time(s: str) -> Optional[str]:
    s = (s or "").strip()
    m = _TIME_RE.match(s)
    if not m:
        return None
    hh, mm = m.groups()
    return f"{int(hh):02d}:{int(mm):02d}"

# ---------------
# –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
# ---------------
async def edit_or_pass(q, text: str, reply_markup: InlineKeyboardMarkup):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ. –ï—Å–ª–∏ ¬´Message is not modified¬ª ‚Äî –º–æ–ª—á–∞ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º."""
    try:
        await q.edit_message_text(text=text, reply_markup=reply_markup)
    except BadRequest as e:
        if "Message is not modified" in str(e):
            try:
                await q.edit_message_reply_markup(reply_markup=reply_markup)
            except BadRequest as e2:
                if "Message is not modified" in str(e2):
                    return
                raise
            return
        raise

# -----------------------------
# –ü—É–±–ª–∏—á–Ω—ã–π entry-point –¥–ª—è –±–æ—Ç–∞
# -----------------------------
async def open_planner(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–∫—Ä—ã—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å —ç–∫—Ä–∞–Ω –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."""
    uid = update.effective_user.id
    kb = await _kb_main(uid)
    text = "üóì –ü–õ–ê–ù –ù–ê –î–ï–ù–¨\n–í—ã–±–∏—Ä–∞–π –∑–∞–¥–∞—á—É –∏–ª–∏ –¥–æ–±–∞–≤—å –Ω–æ–≤—É—é."
    if update.callback_query:
        await edit_or_pass(update.callback_query, text, kb)
    else:
        await update.effective_message.reply_text(text=text, reply_markup=kb)

# --------------------------------------
# –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ä–æ—É—Ç–µ—Ä callback-–∫–Ω–æ–ø–æ–∫ (group=0)
# --------------------------------------
async def _cb_plan_router(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    uid = update.effective_user.id
    data = q.data or ""

    # –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫
    if data in ("PLAN_OPEN", "PLAN_LIST", "show_day_plan"):
        await edit_or_pass(q, "üóì –ü–õ–ê–ù –ù–ê –î–ï–ù–¨", await _kb_main(uid))
        return

    # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—É—Å—Ç–æ–π ‚Äî —Å—Ä–∞–∑—É —Å–ø—Ä–æ—Å–∏—Ç—å –≤—Ä–µ–º—è
    if data == "PLAN_ADD_EMPTY":
        it = await _insert_item(uid, "")
        await q.answer("–î–æ–±–∞–≤–ª–µ–Ω–æ. –£–∫–∞–∂–∏ –≤—Ä–µ–º—è.")
        USER_STATE[uid] = {"mode": "edit_time", "item_id": it.item_id}
        await edit_or_pass(
            q,
            f"‚è∞ –í–≤–µ–¥–∏ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–¥–∞—á–∏ #{it.item_id} –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (–ø–æ –ö–∏–µ–≤—É)",
            InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="PLAN_OPEN")]])
        )
        return

    # –∑–∞–ø—Ä–æ—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–π —Ç–µ–º—ã –æ—Ç –ò–ò (—Å–Ω–∞—á–∞–ª–∞ —Ç–µ–º–∞, –ø–æ—Ç–æ–º –≤—Ä–µ–º—è)
    if data == "PLAN_ADD_AI":
        USER_STATE[uid] = {"mode": "waiting_new_topic"}
        await edit_or_pass(
            q,
            "üß† –í–≤–µ–¥–∏ —Ç–µ–º—É/–ø–æ–¥—Å–∫–∞–∑–∫—É –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–µ–∫—Å—Ç.\n"
            "–ü—Ä–∏–º–µ—Ä—ã: ¬´–∞–Ω–æ–Ω—Å AMA¬ª, ¬´–ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ —Å–∞–π—Ç–∞¬ª, ¬´–∏—Ç–æ–≥–∏ –Ω–µ–¥–µ–ª–∏¬ª.",
            _kb_gen_topic()
        )
        return

    # –º–µ–Ω—é –∞–π—Ç–µ–º–∞
    if data.startswith("ITEM_MENU:"):
        try:
            iid = int(data.split(":", 1)[1])
        except Exception:
            await q.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID")
            return
        it = await _get_item(uid, iid)
        if not it:
            await q.answer("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        await edit_or_pass(q, f"üìù –ó–∞–¥–∞—á–∞ #{it.item_id}\n{_fmt_item(it)}", _kb_item(it))
        return

    # —É–¥–∞–ª–∏—Ç—å
    if data.startswith("DEL_ITEM:"):
        iid = int(data.split(":", 1)[1])
        await _delete_item(uid, iid)
        await q.answer("–£–¥–∞–ª–µ–Ω–æ.")
        await edit_or_pass(q, "üóì –ü–õ–ê–ù –ù–ê –î–ï–ù–¨", await _kb_main(uid))
        return

    # –∫–ª–æ–Ω
    if data.startswith("CLONE_ITEM:"):
        iid = int(data.split(":", 1)[1])
        src = await _get_item(uid, iid)
        if not src:
            await q.answer("–ù–µ—Ç —Ç–∞–∫–æ–π –∑–∞–¥–∞—á–∏")
            return
        await _clone_item(uid, src)
        await q.answer("–°–∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ.")
        await edit_or_pass(q, "üóì –ü–õ–ê–ù –ù–ê –î–ï–ù–¨", await _kb_main(uid))
        return

    # –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å done
    if data.startswith("TOGGLE_DONE:"):
        iid = int(data.split(":", 1)[1])
        it = await _get_item(uid, iid)
        if not it:
            await q.answer("–ù–µ—Ç —Ç–∞–∫–æ–π –∑–∞–¥–∞—á–∏")
            return
        await _update_done(uid, iid, not it.done)
        it = await _get_item(uid, iid)
        await edit_or_pass(q, f"üìù –ó–∞–¥–∞—á–∞ #{iid}\n{_fmt_item(it)}", _kb_item(it))
        return

    # –ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞
    if data.startswith("EDIT_ITEM:"):
        iid = int(data.split(":", 1)[1])
        USER_STATE[uid] = {"mode": "edit_text", "item_id": iid}
        await edit_or_pass(
            q,
            f"‚úèÔ∏è –í–≤–µ–¥–∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–¥–∞—á–∏ #{iid}",
            InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="PLAN_OPEN")]])
        )
        return

    # –ø—Ä–∞–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
    if data.startswith("EDIT_TIME:"):
        iid = int(data.split(":", 1)[1])
        USER_STATE[uid] = {"mode": "edit_time", "item_id": iid}
        await edit_or_pass(
            q,
            f"‚è∞ –í–≤–µ–¥–∏ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–¥–∞—á–∏ #{iid} –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (–ø–æ –ö–∏–µ–≤—É)",
            InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="PLAN_OPEN")]])
        )
        return

    # –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ò–ò
    if data.startswith("AI_FILL_TEXT:"):
        iid = int(data.split(":", 1)[1])
        it = await _get_item(uid, iid)
        if not it:
            await q.answer("–ù–µ—Ç —Ç–∞–∫–æ–π –∑–∞–¥–∞—á–∏")
            return
        hint = it.text or "daily task for Ai Coin"
        if _ai_generator:
            try:
                txt, tags, img = await _ai_generator(hint)
                txt = (txt or "").strip()
                if txt:
                    await _update_text(uid, iid, txt)
                await q.answer("–¢–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª—ë–Ω –ò–ò.")
            except Exception:
                await q.answer("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
        else:
            await q.answer("–ò–ò-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
        it = await _get_item(uid, iid)
        await edit_or_pass(q, f"üìù –ó–∞–¥–∞—á–∞ #{iid}\n{_fmt_item(it)}", _kb_item(it))
        return

    # —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ —Å—Ä–∞–∑—É –æ—Ç –ò–ò
    if data.startswith("AI_NEW_FROM:"):
        topic = data.split(":", 1)[1].strip() or "general"
        it = await _insert_item(uid, f"(–≥–µ–Ω–µ—Ä–∞—Ü–∏—è: {topic})")
        if _ai_generator:
            try:
                txt, tags, img = await _ai_generator(topic)
                if txt:
                    await _update_text(uid, it.item_id, txt)
            except Exception:
                pass
        await q.answer("–°–æ–∑–¥–∞–Ω–æ. –£–∫–∞–∂–∏ –≤—Ä–µ–º—è.")
        USER_STATE[uid] = {"mode": "edit_time", "item_id": it.item_id}
        await edit_or_pass(
            q,
            f"‚è∞ –í–≤–µ–¥–∏ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–¥–∞—á–∏ #{it.item_id} –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (–ø–æ –ö–∏–µ–≤—É)",
            InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="PLAN_OPEN")]])
        )
        return

    # PLAN_DONE / GEN_DONE / BACK_MAIN_MENU ‚Äî –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º (–æ—Ç–¥–∞—Å—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç)

    # fallback: –ª—é–±—ã–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ PLAN_*
    if data.startswith("PLAN_"):
        await open_planner(update, context)

# --------------------------------------
# –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–≤–≤–æ–¥ –¥–ª—è —Ä–µ–∂–∏–º–æ–≤)
# --------------------------------------
async def _msg_router(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    st = USER_STATE.get(uid)
    txt = (update.message.text or "").strip()

    if not st:
        # –µ—Å–ª–∏ –Ω–µ –∂–¥—ë–º –≤–≤–æ–¥–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫
        await open_planner(update, context)
        return

    mode = st.get("mode")
    if mode == "edit_text":
        iid = int(st.get("item_id"))
        await _update_text(uid, iid, txt)
        await update.message.reply_text("‚úÖ –¢–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª—ë–Ω.")
        USER_STATE.pop(uid, None)
        await open_planner(update, context)
        return

    if mode == "edit_time":
        iid = int(st.get("item_id"))
        t = _parse_time(txt)
        if not t:
            await update.message.reply_text("‚è∞ –§–æ—Ä–º–∞—Ç HH:MM. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
            return
        await _update_time(uid, iid, t)
        await update.message.reply_text(f"‚úÖ –í—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {t}")
        USER_STATE.pop(uid, None)
        await open_planner(update, context)
        return

    if mode == "waiting_new_topic":
        topic = txt or "general"
        it = await _insert_item(uid, f"(–≥–µ–Ω–µ—Ä–∞—Ü–∏—è: {topic})")
        if _ai_generator:
            try:
                gen_text, tags, img = await _ai_generator(topic)
                if gen_text:
                    await _update_text(uid, it.item_id, gen_text)
                await update.message.reply_text("‚ú® –°–æ–∑–¥–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é –ò–ò.")
            except Exception:
                await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å, —Å–æ–∑–¥–∞–Ω–∞ –ø—É—Å—Ç–∞—è –∑–∞–¥–∞—á–∞.")
        else:
            await update.message.reply_text("–°–æ–∑–¥–∞–Ω–∞ –ø—É—Å—Ç–∞—è –∑–∞–¥–∞—á–∞ (–ò–ò –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω).")

        # üëâ —Å—Ä–∞–∑—É —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Ä–µ–º—è
        USER_STATE[uid] = {"mode": "edit_time", "item_id": it.item_id}
        await update.message.reply_text(
            f"‚è∞ –í–≤–µ–¥–∏ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–¥–∞—á–∏ #{it.item_id} –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (–ø–æ –ö–∏–µ–≤—É)",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="PLAN_OPEN")]])
        )
        return

    # –Ω–∞ –≤—Å—è–∫–∏–π
    USER_STATE.pop(uid, None)
    await open_planner(update, context)

# ==== –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è twitter_bot.py ====
async def planner_add_from_text(uid: int, text: str) -> int:
    """–°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç item_id."""
    it = await _insert_item(uid, text or "")
    return it.item_id

async def planner_prompt_time(uid: int, chat_id: int, bot) -> None:
    """–°–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—Ä–µ–º—è –¥–ª—è –∑–∞–¥–∞—á–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π/—Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏.
       user_id –Ω—É–∂–µ–Ω –¥–ª—è USER_STATE; chat_id ‚Äî –∫—É–¥–∞ —Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    # –≤ –ø—Ä–æ—Å—Ç–µ–π—à–µ–º –≤–∏–¥–µ ‚Äî –Ω–∞–π–¥—ë–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–¥–∞—á—É
    items = await _get_items(uid)
    if not items:
        return
    iid = items[-1].item_id
    USER_STATE[uid] = {"mode": "edit_time", "item_id": iid}
    kb = InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="PLAN_OPEN")]])
    await bot.send_message(
        chat_id=chat_id,
        text=f"‚è∞ –í–≤–µ–¥–∏ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–¥–∞—á–∏ #{iid} –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (–ø–æ –ö–∏–µ–≤—É)",
        reply_markup=kb
    )

# --------------------------------------
# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ –≤ PTB (group=0)
# --------------------------------------
def register_planner_handlers(app: Application) -> None:
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –†–ê–ù–¨–®–ï –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞ (group=0), —á—Ç–æ–±—ã –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    –∑–∞–±–∏—Ä–∞–ª —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –∫–æ–ª–±—ç–∫–∏. BACK_MAIN_MENU/PLAN_DONE/GEN_DONE –Ω–µ –ª–æ–≤–∏–º.
    """
    app.add_handler(
        CallbackQueryHandler(
            _cb_plan_router,
            pattern=r"^(PLAN_(?!DONE$).+|ITEM_MENU:.*|DEL_ITEM:.*|EDIT_TIME:.*|EDIT_ITEM:.*|EDIT_FIELD:.*|AI_FILL_TEXT:.*|CLONE_ITEM:.*|AI_NEW_FROM:.*|TOGGLE_DONE:.*|show_day_plan)$"
        ),
        group=0
    )
    app.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, _msg_router),
        group=0
    )