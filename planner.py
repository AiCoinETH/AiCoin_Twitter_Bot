# -*- coding: utf-8 -*-
"""
–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å—é –≤ SQLite –¥–ª—è twitter_bot.py.

–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:
  PLAN_OPEN, PLAN_ADD_EMPTY, ITEM_MENU:<id>, DEL_ITEM:<id>, EDIT_TIME:<id>, EDIT_ITEM:<id>,
  TOGGLE_DONE:<id>, SHOW_ITEM:<id>. BACK_MAIN_MENU (–∫–Ω–æ–ø–∫–∞ ¬´–ù–∞–∑–∞–¥¬ª) –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç.

–•—Ä–∞–Ω–µ–Ω–∏–µ:
  - –¢–∞–±–ª–∏—Ü–∞ plan_items(user_id, item_id, text, when_hhmm, done, media_file_id, media_type, created_at)
  - item_id ‚Äî –ª–æ–∫–∞–ª—å–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (1,2,3,...) ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è

–°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞:
  - –ü—Ä–∏–≤—è–∑–∫–∞ –ø–æ (chat_id, user_id) —Å –æ–±—â–µ—á–∞—Ç–æ–≤—ã–º fallback (chat_id, 0)
"""

from __future__ import annotations
import re
import json
import asyncio
import logging
import aiosqlite
import os
from dataclasses import dataclass
from typing import Dict, List, Optional, Tuple, Any
from datetime import datetime
from zoneinfo import ZoneInfo
from functools import wraps

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    Application,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters,
)
from telegram.error import BadRequest, RetryAfter

__all__ = [
    "register_planner_handlers",
    "open_planner",
    "planner_add_from_text",
    "planner_prompt_time",
    "USER_STATE",
]

# ------------------
# –õ–æ–≥–∏ / –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã / –≥–ª–æ–±–∞–ª—ã
# ------------------
log = logging.getLogger("planner")
if log.level == logging.NOTSET:
    log.setLevel(logging.INFO)

TZ = ZoneInfo("Europe/Kyiv")
DB_FILE = os.path.join(os.path.dirname(os.path.abspath(__file__)), "planner.db")

print(f"üìÅ Database path: {DB_FILE}")
print(f"üìÇ Current directory: {os.getcwd()}")
print(f"üìÇ Script directory: {os.path.dirname(os.path.abspath(__file__))}")

STATE: Dict[Tuple[int, int], dict] = {}  # (chat_id,user_id)->state   –∏ (chat_id,0)->state (fallback)
USER_STATE = STATE  # alias

LAST_SIG: Dict[Tuple[int, int], Tuple[str, str]] = {}  # (chat_id, message_id) -> (text, markup_json)
_db_ready = False

# ------------
# –£—Ç–∏–ª–∏—Ç—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# ------------
def _short(val: Any, n: int = 120) -> str:
    s = str(val)
    return s if len(s) <= n else s[:n] + "‚Ä¶"

def _fmt_arg(v: Any) -> str:
    try:
        from telegram import Update as TGUpdate
        if isinstance(v, TGUpdate):
            return f"<Update chat={getattr(getattr(v, 'effective_chat', None), 'id', None)} cb={bool(v.callback_query)}>"
        if v.__class__.__name__ in {"Bot", "Application"}:
            return f"<{v.__class__.__name__}>"
    except Exception:
        pass
    if isinstance(v, PlanItem):
        return f"PlanItem(iid={v.item_id}, time={v.when_hhmm}, done={v.done}, text={_short(v.text, 60)!r})"
    if isinstance(v, list) and v and isinstance(v[0], PlanItem):
        return f"[PlanItem√ó{len(v)}: {', '.join('#'+str(i.item_id) for i in v[:5])}{'‚Ä¶' if len(v)>5 else ''}]"
    if isinstance(v, str):
        return repr(_short(v, 120))
    return _short(v, 120)

def _trace_sync(fn):
    @wraps(fn)
    def wrap(*args, **kwargs):
        log.debug("‚Üí %s(%s%s)", fn.__name__,
                  ", ".join(_fmt_arg(a) for a in args),
                  (", " + ", ".join(f"{k}={_fmt_arg(v)}" for k, v in kwargs.items())) if kwargs else "")
        res = fn(*args, **kwargs)
        log.debug("‚Üê %s = %s", fn.__name__, _fmt_arg(res))
        return res
    return wrap

def _trace_async(fn):
    @wraps(fn)
    async def wrap(*args, **kwargs):
        log.debug("‚Üí %s(%s%s)", fn.__name__,
                  ", ".join(_fmt_arg(a) for a in args),
                  ((", " + ", ".join(f"{k}={_fmt_arg(v)}" for k, v in kwargs.items())) if kwargs else ""))
        res = await fn(*args, **kwargs)
        log.debug("‚Üê %s = %s", fn.__name__, _fmt_arg(res))
        return res
    return wrap

# ------------
# Helpers –¥–ª—è STATE
# ------------
def _state_keys_from_update(update: Update) -> Tuple[Tuple[int, int], Tuple[int, int]]:
    chat_id = update.effective_chat.id if update.effective_chat else 0
    user_id = update.effective_user.id if update.effective_user else 0
    return (chat_id, user_id), (chat_id, 0)

def set_state_for_update(update: Update, st: dict) -> None:
    k_personal, k_chat = _state_keys_from_update(update)
    STATE[k_personal] = st
    STATE[k_chat] = st
    log.debug("STATE set for %s and %s -> %s", k_personal, k_chat, st)

def get_state_for_update(update: Update) -> Optional[dict]:
    k_personal, k_chat = _state_keys_from_update(update)
    st = STATE.get(k_personal) or STATE.get(k_chat)
    log.debug("STATE get %s or %s -> %s", k_personal, k_chat, st)
    return st

def clear_state_for_update(update: Update) -> None:
    k_personal, k_chat = _state_keys_from_update(update)
    STATE.pop(k_personal, None)
    STATE.pop(k_chat, None)
    log.debug("STATE cleared for %s and %s", k_personal, k_chat)

def set_state_for_ids(chat_id: int, user_id: int, st: dict) -> None:
    STATE[(chat_id, user_id)] = st
    STATE[(chat_id, 0)] = st
    log.debug("STATE set for ids (%s,%s) and (%s,0) -> %s", chat_id, user_id, chat_id, st)

# ------------
# –ú–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö
# ------------
@dataclass
class PlanItem:
    user_id: int
    item_id: int        # –ª–æ–∫–∞–ª—å–Ω—ã–π id –≤–Ω—É—Ç—Ä–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    text: str
    when_hhmm: Optional[str]  # "HH:MM" | None
    done: bool
    media_file_id: Optional[str] = None  # Telegram file_id
    media_type: Optional[str] = None     # "photo" | "document" | None

# ------------
# –ë–∞–∑–∞ (SQLite)
# ------------
CREATE_SQL = """
CREATE TABLE IF NOT EXISTS plan_items (
  user_id       INTEGER NOT NULL,
  item_id       INTEGER NOT NULL,
  text          TEXT    NOT NULL DEFAULT '',
  when_hhmm     TEXT,
  done          INTEGER NOT NULL DEFAULT 0,
  media_file_id TEXT,
  media_type    TEXT,
  created_at    TEXT    NOT NULL,
  PRIMARY KEY (user_id, item_id)
);
"""

@_trace_async
async def _migrate_db() -> None:
    """–ú—è–≥–∫–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏, –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–∞ –±–µ–∑ –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π."""
    try:
        async with aiosqlite.connect(DB_FILE) as db:
            for sql in (
                "ALTER TABLE plan_items ADD COLUMN media_file_id TEXT",
                "ALTER TABLE plan_items ADD COLUMN media_type TEXT",
            ):
                try:
                    await db.execute(sql)
                except Exception:
                    pass
            await db.commit()
    except Exception as e:
        log.warning("DB migrate skipped: %s", e)

@_trace_async
async def _ensure_db() -> None:
    global _db_ready
    if _db_ready:
        log.debug("DB already ready")
        return

    log.info("DB init start: %s", DB_FILE)
    async with aiosqlite.connect(DB_FILE) as db:
        await db.execute(CREATE_SQL)
        await db.commit()
    await _migrate_db()
    _db_ready = True
    log.info("DB init complete")

@_trace_async
async def _get_items(uid: int) -> List[PlanItem]:
    await _ensure_db()
    async with aiosqlite.connect(DB_FILE) as db:
        db.row_factory = aiosqlite.Row
        sql = """SELECT user_id, item_id, text, when_hhmm, done, media_file_id, media_type
                 FROM plan_items WHERE user_id=? ORDER BY item_id ASC"""
        cur = await db.execute(sql, (uid,))
        rows = await cur.fetchall()
    return [PlanItem(r["user_id"], r["item_id"], r["text"], r["when_hhmm"], bool(r["done"]),
                     r["media_file_id"], r["media_type"]) for r in rows]

@_trace_async
async def _next_item_id(uid: int) -> int:
    await _ensure_db()
    async with aiosqlite.connect(DB_FILE) as db:
        sql = "SELECT COALESCE(MAX(item_id),0) FROM plan_items WHERE user_id=?"
        cur = await db.execute(sql, (uid,))
        row = await cur.fetchone()
        mx = row[0] if row is not None else 0
    return int(mx) + 1

@_trace_async
async def _insert_item(uid: int, text: str = "", when_hhmm: Optional[str] = None) -> PlanItem:
    iid = await _next_item_id(uid)
    now = datetime.now(TZ).isoformat()
    await _ensure_db()
    async with aiosqlite.connect(DB_FILE) as db:
        sql = """INSERT INTO plan_items(user_id, item_id, text, when_hhmm, done, media_file_id, media_type, created_at)
                 VALUES (?,?,?,?,?,?,?,?)"""
        args = (uid, iid, text or "", when_hhmm, 0, None, None, now)
        await db.execute(sql, args)
        await db.commit()
    return PlanItem(uid, iid, text or "", when_hhmm, False, None, None)

@_trace_async
async def _update_text(uid: int, iid: int, text: str) -> None:
    await _ensure_db()
    async with aiosqlite.connect(DB_FILE) as db:
        await db.execute("UPDATE plan_items SET text=? WHERE user_id=? AND item_id=?",
                         (text or "", uid, iid))
        await db.commit()

@_trace_async
async def _update_time(uid: int, iid: int, when_hhmm: Optional[str]) -> None:
    await _ensure_db()
    async with aiosqlite.connect(DB_FILE) as db:
        await db.execute("UPDATE plan_items SET when_hhmm=? WHERE user_id=? AND item_id=?",
                         (when_hhmm, uid, iid))
        await db.commit()

@_trace_async
async def _update_done(uid: int, iid: int, done: bool) -> None:
    await _ensure_db()
    async with aiosqlite.connect(DB_FILE) as db:
        await db.execute("UPDATE plan_items SET done=? WHERE user_id=? AND item_id=?",
                         (1 if done else 0, uid, iid))
        await db.commit()

@_trace_async
async def _update_media(uid: int, iid: int, file_id: Optional[str], mtype: Optional[str]) -> None:
    await _ensure_db()
    async with aiosqlite.connect(DB_FILE) as db:
        await db.execute("UPDATE plan_items SET media_file_id=?, media_type=? WHERE user_id=? AND item_id=?",
                         (file_id, mtype, uid, iid))
        await db.commit()

@_trace_async
async def _delete_item(uid: int, iid: int) -> None:
    await _ensure_db()
    async with aiosqlite.connect(DB_FILE) as db:
        await db.execute("DELETE FROM plan_items WHERE user_id=? AND item_id=?", (uid, iid))
        await db.commit()

@_trace_async
async def _get_item(uid: int, iid: int) -> Optional[PlanItem]:
    await _ensure_db()
    async with aiosqlite.connect(DB_FILE) as db:
        db.row_factory = aiosqlite.Row
        sql = """SELECT user_id, item_id, text, when_hhmm, done, media_file_id, media_type
                 FROM plan_items WHERE user_id=? AND item_id=?"""
        cur = await db.execute(sql, (uid, iid))
        row = await cur.fetchone()
    if not row:
        return None
    return PlanItem(row["user_id"], row["item_id"], row["text"], row["when_hhmm"], bool(row["done"]),
                    row["media_file_id"], row["media_type"])

# -------------------------
# –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã UI
# -------------------------
@_trace_sync
def _fmt_item(i: PlanItem) -> str:
    t = f"[{i.when_hhmm}]" if i.when_hhmm else "[‚Äî]"
    d = "‚úÖ" if i.done else "üü°"
    cam = " üì∑" if i.media_file_id else ""
    txt = (i.text or "").strip() or "(–ø—É—Å—Ç–æ)"
    return f"{d} {t} {txt}{cam}"

@_trace_async
async def _kb_main(uid: int) -> InlineKeyboardMarkup:
    items = await _get_items(uid)
    rows: List[List[InlineKeyboardButton]] = []
    for it in items:
        rows.append([InlineKeyboardButton(_fmt_item(it), callback_data=f"ITEM_MENU:{it.item_id}")])
    rows += [
        [InlineKeyboardButton("‚ûï –ù–æ–≤–∞—è (–ø—É—Å—Ç–∞—è)", callback_data="PLAN_ADD_EMPTY")],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="BACK_MAIN_MENU")],
    ]
    return InlineKeyboardMarkup(rows)

@_trace_sync
def _kb_item(it: PlanItem) -> InlineKeyboardMarkup:
    rows = [
        [InlineKeyboardButton("‚úèÔ∏è –¢–µ–∫—Å—Ç", callback_data=f"EDIT_ITEM:{it.item_id}"),
         InlineKeyboardButton("‚è∞ –í—Ä–µ–º—è", callback_data=f"EDIT_TIME:{it.item_id}")],
    ]
    if it.media_file_id:
        rows.append([InlineKeyboardButton("üëÅ –ü–æ–∫–∞–∑–∞—Ç—å", callback_data=f"SHOW_ITEM:{it.item_id}")])
    rows += [
        [InlineKeyboardButton("‚úÖ/üü° –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"TOGGLE_DONE:{it.item_id}")],
        [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"DEL_ITEM:{it.item_id}")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É", callback_data="PLAN_OPEN")],
    ]
    return InlineKeyboardMarkup(rows)

@_trace_sync
def _kb_cancel_to_list() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="PLAN_OPEN")]])

@_trace_sync
def _kb_add_more() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ûï –ï—â–µ –æ–¥–Ω–∞ –∑–∞–¥–∞—á–∞", callback_data="PLAN_ADD_EMPTY")],
        [InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="PLAN_OPEN")]
    ])

# ---------------
# –ü–∞—Ä—Å–µ—Ä—ã/—Ö–µ–ª–ø–µ—Ä—ã
# ---------------
_TIME_RE_COLON = re.compile(r"^([01]?\d|2[0-3]):([0-5]\d)$")

@_trace_sync
def _parse_time(s: str) -> Optional[str]:
    s0 = s
    s = (s or "").strip().replace(" ", "")
    m = _TIME_RE_COLON.match(s)
    if m:
        hh, mm = m.groups()
        return f"{int(hh):02d}:{int(mm):02d}"
    if s.isdigit() and len(s) in (3, 4):
        hh, mm = (s[0], s[1:]) if len(s) == 3 else (s[:2], s[2:])
        try:
            hh_i, mm_i = int(hh), int(mm)
            if 0 <= hh_i <= 23 and 0 <= mm_i <= 59:
                return f"{hh_i:02d}:{mm_i:02d}"
        except ValueError:
            pass
    log.debug("Time parse failed: %r", s0)
    return None

# ---------------
# –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è TG
# ---------------
@_trace_async
async def _safe_q_answer(q) -> bool:
    try:
        await q.answer()
        return True
    except BadRequest as e:
        if "query is too old" in str(e).lower():
            return False
        return False
    except RetryAfter as e:
        await asyncio.sleep(getattr(e, "retry_after", 2) + 1)
        try:
            await q.answer()
            return True
        except Exception:
            return False
    except Exception:
        return False

@_trace_async
async def _send_new_message_fallback(q, text: str, reply_markup: InlineKeyboardMarkup):
    try:
        chat_id = q.message.chat_id if q and q.message else None
        if chat_id is None:
            return
        await q.message.bot.send_message(chat_id=chat_id, text=text, reply_markup=reply_markup)
    except RetryAfter as e:
        await asyncio.sleep(getattr(e, "retry_after", 2) + 1)
        try:
            await q.message.bot.send_message(chat_id=q.message.chat_id, text=text, reply_markup=reply_markup)
        except Exception:
            pass
    except Exception:
        pass

@_trace_async
async def edit_or_pass(q, text: str, reply_markup: InlineKeyboardMarkup):
    try:
        msg = getattr(q, "message", None)
        if msg:
            key = (msg.chat_id, msg.message_id)
            markup_json = json.dumps(reply_markup.to_dict() if reply_markup else {}, ensure_ascii=False, sort_keys=True)
            new_sig = (text or "", markup_json)
            if LAST_SIG.get(key) == new_sig:
                return
        await q.edit_message_text(text=text, reply_markup=reply_markup)
        if msg:
            LAST_SIG[(msg.chat_id, msg.message_id)] = (text or "", markup_json)
        return
    except RetryAfter as e:
        await asyncio.sleep(getattr(e, "retry_after", 2) + 1)
        try:
            await q.edit_message_text(text=text, reply_markup=reply_markup)
            msg = getattr(q, "message", None)
            if msg:
                markup_json = json.dumps(reply_markup.to_dict() if reply_markup else {}, ensure_ascii=False, sort_keys=True)
                LAST_SIG[(msg.chat_id, msg.message_id)] = (text or "", markup_json)
            return
        except Exception:
            await _send_new_message_fallback(q, text, reply_markup)
            return
    except BadRequest as e:
        s = str(e)
        if "Message is not modified" in s:
            try:
                await q.edit_message_reply_markup(reply_markup=reply_markup)
                msg = getattr(q, "message", None)
                if msg:
                    markup_json = json.dumps(reply_markup.to_dict() if reply_markup else {}, ensure_ascii=False, sort_keys=True)
                    LAST_SIG[(msg.chat_id, msg.message_id)] = ((msg.text or ""), markup_json)
                return
            except Exception:
                await _send_new_message_fallback(q, text, reply_markup)
                return
        await _send_new_message_fallback(q, text, reply_markup)
        return
    except Exception:
        await _send_new_message_fallback(q, text, reply_markup)
        return

# -----------------------------
# –ü—É–±–ª–∏—á–Ω—ã–π entry-point –¥–ª—è –±–æ—Ç–∞
# -----------------------------
@_trace_async
async def open_planner(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–∫—Ä—ã—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å —ç–∫—Ä–∞–Ω –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ (–¢–û–õ–¨–ö–û –ø–æ —è–≤–Ω–æ–π –∫–Ω–æ–ø–∫–µ)."""
    uid = update.effective_user.id
    kb = await _kb_main(uid)
    text = "üóì –ü–õ–ê–ù –ù–ê –î–ï–ù–¨\n–í—ã–±–∏—Ä–∞–π –∑–∞–¥–∞—á—É –∏–ª–∏ –¥–æ–±–∞–≤—å –Ω–æ–≤—É—é."
    if update.callback_query:
        await edit_or_pass(update.callback_query, text, kb)
    else:
        await update.effective_message.reply_text(text=text, reply_markup=kb)

# --------------------------------------
# –†–æ—É—Ç–µ—Ä callback-–∫–Ω–æ–ø–æ–∫ (group=0)
# --------------------------------------
@_trace_async
async def _cb_plan_router(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    uid = update.effective_user.id
    data = (q.data or "").strip()
    await _safe_q_answer(q)

    if data in ("PLAN_OPEN", "PLAN_LIST", "show_day_plan"):
        await edit_or_pass(q, "üóì –ü–õ–ê–ù –ù–ê –î–ï–ù–¨", await _kb_main(uid))
        return

    if data == "PLAN_ADD_EMPTY":
        it = await _insert_item(uid, "")
        set_state_for_update(update, {"mode": "edit_text", "item_id": it.item_id, "uid": uid})
        await edit_or_pass(q, f"‚úèÔ∏è –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–¥–∞—á–∏ #{it.item_id}", _kb_cancel_to_list())
        return

    if data.startswith("ITEM_MENU:"):
        try:
            iid = int(data.split(":", 1)[1])
        except (ValueError, IndexError):
            await q.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID"); return
        it = await _get_item(uid, iid)
        if not it:
            await q.answer("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"); return
        await edit_or_pass(q, f"üìù –ó–∞–¥–∞—á–∞ #{it.item_id}\n{_fmt_item(it)}", _kb_item(it))
        return

    if data.startswith("DEL_ITEM:"):
        try:
            iid = int(data.split(":", 1)[1])
        except (ValueError, IndexError):
            await q.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID"); return
        await _delete_item(uid, iid)
        await q.answer("–£–¥–∞–ª–µ–Ω–æ.")
        await edit_or_pass(q, "üóì –ü–õ–ê–ù –ù–ê –î–ï–ù–¨", await _kb_main(uid))
        return

    if data.startswith("TOGGLE_DONE:"):
        try:
            iid = int(data.split(":", 1)[1])
        except (ValueError, IndexError):
            await q.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID"); return
        it = await _get_item(uid, iid)
        if not it:
            await q.answer("–ù–µ—Ç —Ç–∞–∫–æ–π –∑–∞–¥–∞—á–∏"); return
        await _update_done(uid, iid, not it.done)
        it = await _get_item(uid, iid)
        await edit_or_pass(q, f"üìù –ó–∞–¥–∞—á–∞ #{iid}\n{_fmt_item(it)}", _kb_item(it))
        return

    if data.startswith("EDIT_ITEM:"):
        try:
            iid = int(data.split(":", 1)[1])
        except (ValueError, IndexError):
            await q.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID"); return
        set_state_for_update(update, {"mode": "edit_text", "item_id": iid, "uid": uid})
        await edit_or_pass(q, f"‚úèÔ∏è –í–≤–µ–¥–∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–¥–∞—á–∏ #{iid}", _kb_cancel_to_list())
        return

    if data.startswith("EDIT_TIME:"):
        try:
            iid = int(data.split(":", 1)[1])
        except (ValueError, IndexError):
            await q.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID"); return
        set_state_for_update(update, {"mode": "edit_time", "item_id": iid, "uid": uid})
        await edit_or_pass(q, f"‚è∞ –í–≤–µ–¥–∏ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–¥–∞—á–∏ #{iid} –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (–ø–æ –ö–∏–µ–≤—É)", _kb_cancel_to_list())
        return

    if data.startswith("SHOW_ITEM:"):
        try:
            iid = int(data.split(":", 1)[1])
        except Exception:
            await q.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID"); return
        it = await _get_item(uid, iid)
        if not it or not it.media_file_id:
            await q.answer("–ú–µ–¥–∏–∞ –Ω–µ—Ç"); return
        caption = f"üìù #{it.item_id} {_fmt_item(it)}"
        if it.media_type == "photo":
            await q.message.bot.send_photo(chat_id=q.message.chat_id, photo=it.media_file_id, caption=caption)
        else:
            await q.message.bot.send_document(chat_id=q.message.chat_id, document=it.media_file_id, caption=caption)
        # –æ—Å—Ç–∞—ë–º—Å—è –≤ –∫–∞—Ä—Ç–æ—á–∫–µ
        await edit_or_pass(q, f"üìù –ó–∞–¥–∞—á–∞ #{it.item_id}\n{_fmt_item(it)}", _kb_item(it))
        return

# --------------------------------------
# –¢–µ–∫—Å—Ç–æ–≤—ã–µ/–º–µ–¥–∏–π–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–≤–≤–æ–¥ –¥–ª—è —Ä–µ–∂–∏–º–æ–≤)
# --------------------------------------
@_trace_async
async def _msg_router(update: Update, context: ContextTypes.DEFAULT_TYPE):
    incoming_uid = update.effective_user.id  # –¥–ª—è –ª–æ–≥–æ–≤
    txt = (getattr(update.message, "text", None) or "").strip()
    st = get_state_for_update(update)
    log.debug("MSG router: incoming_uid=%s has_state=%s text=%r", incoming_uid, bool(st), _short(txt))

    if not st:
        return

    mode = st.get("mode")
    iid = int(st.get("item_id", 0))
    owner_uid = int(st.get("uid", incoming_uid))

    if iid == 0:
        clear_state_for_update(update)
        await update.message.reply_text("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return

    if mode == "edit_text":
        # —Å–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –∏, –µ—Å–ª–∏ –µ—Å—Ç—å, –º–µ–¥–∏–∞
        final_text = txt
        file_id = None
        mtype = None

        if update.message.photo:
            file_id = update.message.photo[-1].file_id
            mtype = "photo"
            if not final_text:
                final_text = (update.message.caption or "").strip() or "–§–æ—Ç–æ"
        elif update.message.document:
            mime = (update.message.document.mime_type or "")
            if mime.startswith("image/"):
                file_id = update.message.document.file_id
                mtype = "document"
                if not final_text:
                    final_text = (update.message.caption or "").strip() or "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"

        await _update_text(owner_uid, iid, final_text or "")
        if file_id:
            await _update_media(owner_uid, iid, file_id, mtype)

        # –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—Ä–µ–º–µ–Ω–∏ (–±–µ–∑ –∞–≤—Ç–æ–ø–æ–∫–∞–∑–∞ –≥–ª–∞–≤–Ω–æ–≥–æ)
        set_state_for_update(update, {"mode": "edit_time", "item_id": iid, "uid": owner_uid})
        await update.message.reply_text(
            "‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n‚è∞ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (–ø–æ –ö–∏–µ–≤—É)",
            reply_markup=_kb_cancel_to_list()
        )
        return

    if mode == "edit_time":
        t = _parse_time(txt)
        if not t:
            await update.message.reply_text("‚è∞ –§–æ—Ä–º–∞—Ç HH:MM. –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ 930 –∏–ª–∏ 0930. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
            return
        await _update_time(owner_uid, iid, t)
        clear_state_for_update(update)
        await update.message.reply_text(
            f"‚úÖ –í—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {t}\n\n–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–Ω—É –∑–∞–¥–∞—á—É –∏–ª–∏ –∑–∞–∫–æ–Ω—á–∏—Ç—å?",
            reply_markup=_kb_add_more()
        )
        return

    # –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º
    clear_state_for_update(update)

# ==== –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è twitter_bot.py ====
@_trace_async
async def planner_add_from_text(uid: int, text: str, chat_id: int = None, bot = None) -> int:
    """–°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç item_id. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω chat_id –∏ bot, —Å—Ä–∞–∑—É –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è."""
    it = await _insert_item(uid, text or "")
    if chat_id is not None and bot is not None:
        set_state_for_ids(chat_id, uid, {"mode": "edit_time", "item_id": it.item_id, "uid": uid})
        await bot.send_message(
            chat_id=chat_id,
            text="‚úÖ –¢–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω!\n‚è∞ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –≤—Ä–µ–º—è –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (–ø–æ –ö–∏–µ–≤—É)",
            reply_markup=_kb_cancel_to_list()
        )
    return it.item_id

@_trace_async
async def planner_prompt_time(uid: int, chat_id: int, bot) -> None:
    """–°–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—Ä–µ–º—è –¥–ª—è –∑–∞–¥–∞—á–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π/—Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏."""
    items = await _get_items(uid)
    if not items:
        return
    iid = items[-1].item_id
    set_state_for_ids(chat_id, uid, {"mode": "edit_time", "item_id": iid, "uid": uid})
    await bot.send_message(
        chat_id=chat_id,
        text=f"‚è∞ –í–≤–µ–¥–∏ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–¥–∞—á–∏ #{iid} –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (–ø–æ –ö–∏–µ–≤—É)",
        reply_markup=_kb_cancel_to_list()
    )

# --------------------------------------
# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ –≤ PTB (group=0)
# --------------------------------------
@_trace_sync
def register_planner_handlers(app: Application) -> None:
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –†–ê–ù–¨–®–ï –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞ (group=0), —á—Ç–æ–±—ã –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    –∑–∞–±–∏—Ä–∞–ª —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –∫–æ–ª–±—ç–∫–∏. BACK_MAIN_MENU –Ω–µ –ª–æ–≤–∏–º ‚Äî —ç—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç.
    –¢–µ–∫—Å—Ç/–º–µ–¥–∏–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¢–û–õ–¨–ö–û –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ STATE.
    """
    print("üìù Registering planner handlers (group=0)")
    log.info("Planner: registering handlers (group=0)")

    app.add_handler(
        CallbackQueryHandler(
            _cb_plan_router,
            # —Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ—á–∏—Å–ª—è–µ–º –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∫–æ–ª–±—ç–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
            pattern=r"^(?:show_day_plan$|PLAN_OPEN$|PLAN_ADD_EMPTY$|ITEM_MENU:\d+$|DEL_ITEM:\d+$|EDIT_TIME:\d+$|EDIT_ITEM:\d+$|TOGGLE_DONE:\d+$|SHOW_ITEM:\d+$)"
        ),
        group=0
    )
    # –¢–µ–∫—Å—Ç
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, _msg_router), group=0)
    # –§–æ—Ç–æ
    app.add_handler(MessageHandler(filters.PHOTO, _msg_router), group=0)
    # –î–æ–∫—É–º–µ–Ω—Ç-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (image/*)
    try:
        app.add_handler(MessageHandler(filters.Document.IMAGE, _msg_router), group=0)
    except Exception:
        # –Ω–∞ —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏—è—Ö PTB –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å mime —á–µ—Ä–µ–∑ –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä, –Ω–æ –æ—Å—Ç–∞–≤–∏–º –∫–∞–∫ –µ—Å—Ç—å
        pass

    print("‚úÖ Planner handlers registered successfully")
    log.info("Planner: handlers registered")