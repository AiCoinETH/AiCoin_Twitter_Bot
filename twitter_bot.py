import os
import openai
import asyncio
import json
from datetime import datetime, timedelta
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, Bot
from telegram.ext import Application, CallbackQueryHandler, ContextTypes, MessageHandler, filters, CommandHandler

TELEGRAM_BOT_TOKEN_APPROVAL = os.getenv("TELEGRAM_BOT_TOKEN_APPROVAL")
TELEGRAM_APPROVAL_CHAT_ID = os.getenv("TELEGRAM_APPROVAL_CHAT_ID")
TELEGRAM_APPROVAL_USER_ID = int(os.getenv("TELEGRAM_APPROVAL_USER_ID", "0"))
TELEGRAM_PUBLIC_CHANNEL_ID = os.getenv("TELEGRAM_PUBLIC_CHANNEL_ID")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
POST_HISTORY_FILE = "post_history.json"
openai.api_key = OPENAI_API_KEY

approval_bot = Bot(token=TELEGRAM_BOT_TOKEN_APPROVAL)
post_data = {
    "text_ru": "–ú–∞–π–Ω–∏–Ω–≥–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã —Å–Ω–æ–≤–∞ –≤ —Ñ–æ–∫—É—Å–µ: –∏–Ω—Ç–µ—Ä–µ—Å –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤ —Ä–∞—Å—Ç–µ—Ç –Ω–∞ —Ñ–æ–Ω–µ –ø–æ—è–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö AI-–∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–æ–±—ã—á–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç. –≠—Ç–æ –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –Ω–∞ —Ä—ã–Ω–∫–µ.",
    "text_en": "Mining tokens are gaining attention again as investors react to emerging AI algorithms optimizing crypto extraction. This could reshape the market.",
    "image_url": "https://upload.wikimedia.org/wikipedia/commons/4/47/PNG_transparency_demonstration_1.png",
    "timestamp": None
}

pending_post = {"active": False, "timer": None}
in_dialog = {"active": False}
do_not_disturb = {"active": False}

keyboard = InlineKeyboardMarkup([
    [InlineKeyboardButton("‚úÖ –ü–æ—Å—Ç", callback_data="approve")],
    [InlineKeyboardButton("üïí –ü–æ–¥—É–º–∞—Ç—å", callback_data="think")],
    [InlineKeyboardButton("‚ôªÔ∏è –ï—â–µ –æ–¥–∏–Ω", callback_data="regenerate")],
    [InlineKeyboardButton("üñºÔ∏è –ö–∞—Ä—Ç–∏–Ω–∫—É", callback_data="new_image")],
    [InlineKeyboardButton("üí¨ –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å", callback_data="chat"), InlineKeyboardButton("üåô –ù–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å", callback_data="do_not_disturb")],
    [InlineKeyboardButton("üõë –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel"), InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥", callback_data="end_dialog")]
])

ru_variants = [
    "–ú–∞–π–Ω–∏–Ω–≥–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã —Å–Ω–æ–≤–∞ –≤ —Ñ–æ–∫—É—Å–µ...",
    "–ò–Ω–≤–µ—Å—Ç–æ—Ä—ã –ø—Ä–æ—è–≤–ª—è—é—Ç –ø–æ–≤—ã—à–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å –∫ –º–∞–π–Ω–∏–Ω–≥–æ–≤—ã–º —Ç–æ–∫–µ–Ω–∞–º...",
    "–ù–æ–≤—ã–µ AI-–∞–ª–≥–æ—Ä–∏—Ç–º—ã –º–µ–Ω—è—é—Ç –ø–æ–¥—Ö–æ–¥ –∫ –¥–æ–±—ã—á–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç..."
]
variant_index = 0

import hashlib

import aiosqlite

DB_FILE = "post_history.db"

async def init_db():
    async with aiosqlite.connect(DB_FILE) as db:
        await db.execute("""
            CREATE TABLE IF NOT EXISTS posts (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                text TEXT NOT NULL,
                timestamp TEXT NOT NULL,
                image_hash TEXT
            )
        """)
        await db.commit()

async def save_post_to_history(text, image_url=None):
    image_hash = get_image_hash(image_url) if image_url else None
    async with aiosqlite.connect(DB_FILE) as db:
        await db.execute(
            "INSERT INTO posts (text, timestamp, image_hash) VALUES (?, ?, ?)",
            (text, datetime.now().isoformat(), image_hash)
        )
        await db.commit()

def get_image_hash(image_url):
    try:
        import requests, hashlib
        response = requests.get(image_url)
        return hashlib.sha256(response.content).hexdigest()
    except Exception:
        return None

async def is_duplicate(text, image_url=None):
    image_hash = get_image_hash(image_url) if image_url else None
    async with aiosqlite.connect(DB_FILE) as db:
        async with db.execute(
            "SELECT text, image_hash FROM posts WHERE timestamp > ?",
            ((datetime.now() - timedelta(days=30)).isoformat(),)
        ) as cursor:
            async for row in cursor:
                if row[0] == text or (image_hash and row[1] == image_hash):
                    return True
    return False

async def send_post_for_approval(update: Update = None, context: ContextTypes.DEFAULT_TYPE = None):
    if do_not_disturb["active"]:
        return
    post_data["timestamp"] = datetime.now()
    pending_post["active"] = True
    pending_post["timer"] = datetime.now()

    msg = await approval_bot.send_photo(
        chat_id=TELEGRAM_APPROVAL_CHAT_ID,
        photo=post_data["image_url"],
        caption=post_data["text_ru"],
        reply_markup=keyboard
    )

    countdown_msg = await approval_bot.send_message(chat_id=TELEGRAM_APPROVAL_CHAT_ID, text="‚è≥ –¢–∞–π–º–µ—Ä: 60 —Å–µ–∫—É–Ω–¥")

    async def update_countdown(message_id):
        for i in range(59, -1, -1):
            await asyncio.sleep(1)
            try:
                await approval_bot.edit_message_text(chat_id=TELEGRAM_APPROVAL_CHAT_ID, message_id=message_id, text=f"‚è≥ –¢–∞–π–º–µ—Ä: {i} —Å–µ–∫—É–Ω–¥")
            except:
                pass

    asyncio.create_task(update_countdown(countdown_msg.message_id))

async def publish_post():
    # –£–∫–æ—Ä–æ—á–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è Twitter (–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏)
    full_text = post_data["text_en"]
    footer = "... –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –Ω–∞ —Å–∞–π—Ç–µ https://getaicoin.com/ –∏–ª–∏ —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª–µ t.me/AiCoin_ETH #AiCoin $Ai"
    max_length = 280 - len(footer)
    short_text = full_text[:max_length].rstrip() + " " + footer

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ—Ä–æ—Ç–∫–æ–π –≤–µ—Ä—Å–∏–∏ –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ
    await approval_bot.send_message(
        chat_id=TELEGRAM_APPROVAL_CHAT_ID,
        text="üá¨üáß –ê–Ω–≥–ª–∏–π—Å–∫–∞—è –≤–µ—Ä—Å–∏—è:\n" + short_text
    )

    # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –≤ Telegram-–∫–∞–Ω–∞–ª–µ (–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º)
    if TELEGRAM_PUBLIC_CHANNEL_ID:
        await approval_bot.send_photo(
            chat_id=TELEGRAM_PUBLIC_CHANNEL_ID,
            photo=post_data["image_url"],
            caption=post_data["text_en"] + "\n\nüìé –ß–∏—Ç–∞–π—Ç–µ –Ω–∞—Å —Ç–∞–∫–∂–µ –Ω–∞ —Å–∞–π—Ç–µ: https://getaicoin.com/"
        )

    await save_post_to_history(post_data["text_ru"], post_data["image_url"])
    await approval_bot.send_photo(
        chat_id=TELEGRAM_APPROVAL_CHAT_ID,
        photo=post_data["image_url"],
        caption=post_data["text_ru"] + "\n\n–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç: " + post_data["text_en"]
    )
    twitter_text = post_data["text_en"][:220] + "... –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –≤ Telegram: t.me/AiCoin_ETH –∏–ª–∏ –Ω–∞ https://getaicoin.com/ #AiCoin $Ai"
    print("Twitter –ø–æ—Å—Ç:", twitter_text)

    if TELEGRAM_PUBLIC_CHANNEL_ID:
        await approval_bot.send_photo(
            chat_id=TELEGRAM_PUBLIC_CHANNEL_ID,
            photo=post_data["image_url"],
            caption=post_data["text_ru"] + "\n\nüëâ –ü–æ–¥—Ä–æ–±–Ω–µ–µ: t.me/AiCoin_ETH –∏–ª–∏ https://getaicoin.com/\n\n#AiCoin $Ai"
        )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global variant_index
    query = update.callback_query
    await query.answer()
    action = query.data

    if action == "end_dialog":
        in_dialog["active"] = False
        await send_post_for_approval()
    elif action == "approve":
        await approval_bot.send_message(chat_id=TELEGRAM_APPROVAL_CHAT_ID, text="‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω.")
        pending_post["active"] = False
        await publish_post()
    elif action == "regenerate":
        variant_index = (variant_index + 1) % len(ru_variants)
        post_data["text_ru"] = ru_variants[variant_index]
        await approval_bot.send_photo(
            chat_id=TELEGRAM_APPROVAL_CHAT_ID,
            photo=post_data["image_url"],
            caption="‚ôªÔ∏è –ù–æ–≤—ã–π –ø–æ—Å—Ç: " + post_data["text_ru"],
            reply_markup=keyboard
        )
    elif action == "new_image":
        post_data["image_url"] = "https://upload.wikimedia.org/wikipedia/commons/4/47/PNG_transparency_demonstration_1.png"
        await approval_bot.send_photo(
            chat_id=TELEGRAM_APPROVAL_CHAT_ID,
            photo=post_data["image_url"],
            caption="üñºÔ∏è –ù–æ–≤—ã–π –ø–æ—Å—Ç: –ó–∞–≥–ª—É—à–∫–∞",
            reply_markup=keyboard
        )
    elif action == "chat":
        in_dialog["active"] = True
        await approval_bot.send_message(chat_id=TELEGRAM_APPROVAL_CHAT_ID, text="üí¨ –ó–∞–≥–ª—É—à–∫–∞. –í–≤–µ–¥–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.", reply_markup=keyboard)
    elif action == "do_not_disturb":
        do_not_disturb["active"] = True
        await approval_bot.send_message(chat_id=TELEGRAM_APPROVAL_CHAT_ID, text="üåô –†–µ–∂–∏–º '–ù–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å' –≤–∫–ª—é—á–µ–Ω.", reply_markup=keyboard)
    elif action == "cancel":
        await approval_bot.send_message(chat_id=TELEGRAM_APPROVAL_CHAT_ID, text="üõë –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=keyboard)
        pending_post["active"] = False
    elif action == "think":
        await approval_bot.send_message(chat_id=TELEGRAM_APPROVAL_CHAT_ID, text="üïí –ü–æ–¥—É–º–∞–π—Ç–µ. –Ø –∂–¥—É —Ä–µ—à–µ–Ω–∏—è. ‚è≥ –¢–∞–π–º–µ—Ä: 60 —Å–µ–∫—É–Ω–¥", reply_markup=keyboard)
        pending_post["timer"] = datetime.now()
        pending_post["active"] = True

async def check_timer():
    while True:
        await asyncio.sleep(5)
        if pending_post["active"] and pending_post["timer"] and not do_not_disturb["active"]:
            elapsed = datetime.now() - pending_post["timer"]
            if elapsed > timedelta(seconds=60):
                await approval_bot.send_message(chat_id=TELEGRAM_APPROVAL_CHAT_ID, text="‚åõ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ü—É–±–ª–∏–∫—É—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")
                await publish_post()
                pending_post["active"] = False

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text.lower() == "/end":
        in_dialog["active"] = False
        await send_post_for_approval()
        return
    if not in_dialog["active"] or update.effective_user.id != TELEGRAM_APPROVAL_USER_ID:
        return
    await update.message.reply_text("üîÅ –ó–∞–≥–ª—É—à–∫–∞. –í–≤–µ–¥–∏—Ç–µ /end –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.", reply_markup=keyboard)

async def delayed_start(app: Application):
    await asyncio.sleep(2)
    await init_db()
    await send_post_for_approval()
    asyncio.create_task(check_timer())

def main():
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    loop.run_until_complete(init_db())
    app = Application.builder().token(TELEGRAM_BOT_TOKEN_APPROVAL).post_init(delayed_start).build()
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(CommandHandler("end", handle_message))
    app.run_polling()

if __name__ == "__main__":
    main()


from telegram.ext import ApplicationBuilder

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    action = query.data

    global variant_index

    if action == "approve":
        await publish_short_and_full()

    elif action == "post_en":
        await publish_to_channel()
        pending_post["active"] = False

    elif action == "regenerate":
        variant_index = (variant_index + 1) % len(ru_variants)
        post_data["text_ru"] = ru_variants[variant_index]
        await send_post_for_approval()

    elif action == "new_image":
        post_data["image_url"] = "https://upload.wikimedia.org/wikipedia/commons/4/47/PNG_transparency_demonstration_1.png"
        await send_post_for_approval()

    elif action == "chat":
        in_dialog["active"] = True
        await approval_bot.send_photo(
            chat_id=TELEGRAM_APPROVAL_CHAT_ID,
            photo=post_data["image_url"],
            caption="üí¨ –û–±—Å—É–∂–¥–∞–µ–º –ø–æ—Å—Ç:\n" + post_data["text_ru"],
            reply_markup=keyboard
        )

    elif action == "do_not_disturb":
        do_not_disturb["active"] = True
        await approval_bot.send_message(chat_id=TELEGRAM_APPROVAL_CHAT_ID, text="üåô –†–µ–∂–∏–º '–ù–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å' –≤–∫–ª—é—á–µ–Ω.")

    elif action == "cancel":
        pending_post["active"] = False
        await approval_bot.send_message(chat_id=TELEGRAM_APPROVAL_CHAT_ID, text="üîö –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")

    elif action == "custom_post":
        custom_input["step"] = "await_text"
        await approval_bot.send_message(chat_id=TELEGRAM_APPROVAL_CHAT_ID, text="‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–æ—Å—Ç.")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != TELEGRAM_APPROVAL_USER_ID:
        return

    if in_dialog["active"]:
        await update.message.reply_text("üîÅ –û–±—Å—É–∂–¥–∞–µ–º... (–∑–∞–≥–ª—É—à–∫–∞). –í–≤–µ–¥–∏—Ç–µ /end –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
        return

    if custom_input["step"] == "await_text":
        post_data["text_ru"] = update.message.text
        custom_input["step"] = "await_image"
        await update.message.reply_text("üìé –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É.")

    elif custom_input["step"] == "await_image":
        post_data["image_url"] = update.message.text
        custom_input["step"] = None
        await send_post_for_approval()

async def end_dialog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    in_dialog["active"] = False
    post_data["text_ru"] = ru_variants[variant_index]
    post_data["image_url"] = "https://upload.wikimedia.org/wikipedia/commons/4/47/PNG_transparency_demonstration_1.png"
    await send_post_for_approval()

def main():
    app = Application.builder().token(TELEGRAM_BOT_TOKEN_APPROVAL).build()
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(CommandHandler("end", end_dialog))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.run_polling()

if __name__ == "__main__":
    asyncio.run(init_db())
    main()
