# -*- coding: utf-8 -*-
"""
planner.py ‚Äî –µ–¥–∏–Ω—ã–π —Ñ–∞–π–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞:
- –ö–Ω–æ–ø–∫–∏: "ü§ñ –ü–ª–∞–Ω –ò–ò" (PLAN_OPEN), –≤–Ω—É—Ç—Ä–∏ —Ä–µ–∂–∏–º—ã: –ü–õ–ê–ù –∏ –ì–ï–ù–ï–†–ê–¶–ò–Ø
- FSM –¥–ª—è –¥–≤—É—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
- –®–∞–≥ –Ω–∞–∑–∞–¥ —Å —É–¥–∞–ª–µ–Ω–∏–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
- –•—Ä–∞–Ω–µ–Ω–∏–µ –≤ SQLite (posts_plan) + –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: import register_planner_handlers(app) –≤ –ø–µ—Ä–≤–æ–º —Ñ–∞–π–ª–µ
- –ú–æ–∂–Ω–æ –∏ –∑–∞–ø—É—Å–∫–∞—Ç—å –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞ (if __name__ == "__main__")
"""

import os
import json
import re
import asyncio
import hashlib
from datetime import datetime, timedelta
from zoneinfo import ZoneInfo

import aiosqlite
from telegram import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Update,
)
from telegram.ext import (
    Application,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters,
)

# -----------------------------------------------------------------------------
# ENV
# -----------------------------------------------------------------------------
TELEGRAM_BOT_TOKEN_APPROVAL = os.getenv("TELEGRAM_BOT_TOKEN_APPROVAL")
TELEGRAM_APPROVAL_CHAT_ID = os.getenv("TELEGRAM_APPROVAL_CHAT_ID")  # —Å—Ç—Ä–æ–∫–∞/—á–∏—Å–ª–æ
ADMIN_ID = int(TELEGRAM_APPROVAL_CHAT_ID) if TELEGRAM_APPROVAL_CHAT_ID and TELEGRAM_APPROVAL_CHAT_ID.isdigit() else None

# -----------------------------------------------------------------------------
# CONST
# -----------------------------------------------------------------------------
DB_FILE = "schedule.db"
KYIV = ZoneInfo("Europe/Kyiv")

# callback data
CB_PLAN_OPEN       = "PLAN_OPEN"
CB_OPEN_PLAN_MODE  = "OPEN_PLAN_MODE"
CB_OPEN_GEN_MODE   = "OPEN_GEN_MODE"
CB_PLAN_DONE       = "PLAN_DONE"
CB_GEN_DONE        = "GEN_DONE"
CB_PLAN_ADD_MORE   = "PLAN_ADD_MORE"
CB_GEN_ADD_MORE    = "GEN_ADD_MORE"
CB_STEP_BACK       = "STEP_BACK"

# -----------------------------------------------------------------------------
# IN-MEMORY FSM
# -----------------------------------------------------------------------------
# USER_STATE: uid -> dict
# {
#   "mode": "plan"|"gen",
#   "step": "...",
#   "buffer": [ { "time_iso":"...", "theme":"...", "images":[...] }, ... ],
#   "current": { "theme":"", "time_iso":"", "images":[...] },
#   "last_bot_msg_ids": [int, ...]
# }
USER_STATE = {}

def _state(uid) -> dict:
    return USER_STATE.setdefault(uid, {
        "mode": None,
        "step": None,
        "buffer": [],
        "current": {},
        "last_bot_msg_ids": []
    })

def _push_bot_msg(update_or_ctx, msg):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º id –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏ STEP_BACK."""
    try:
        uid = update_or_ctx.effective_user.id
    except Exception:
        return
    st = _state(uid)
    if msg and getattr(msg, "message_id", None):
        st["last_bot_msg_ids"].append(msg.message_id)

async def _delete_last_bot_msg(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    st = _state(uid)
    if not st["last_bot_msg_ids"]:
        return
    mid = st["last_bot_msg_ids"].pop()
    try:
        await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=mid)
    except Exception:
        pass

# -----------------------------------------------------------------------------
# DB
# -----------------------------------------------------------------------------
INIT_SQL = """
CREATE TABLE IF NOT EXISTS posts_plan (
  id         INTEGER PRIMARY KEY AUTOINCREMENT,
  time       TEXT NOT NULL,       -- ISO (Europe/Kyiv –∏–ª–∏ UTC, –¥–æ–≥–æ–≤–æ—Ä–∏–º—Å—è)
  type       TEXT NOT NULL,       -- 'theme' | 'content'
  theme      TEXT,
  text       TEXT,
  images     TEXT,                -- JSON array
  status     TEXT NOT NULL DEFAULT 'pending',
  dedupe_key TEXT,
  created_at TEXT NOT NULL,
  created_by TEXT
);
CREATE UNIQUE INDEX IF NOT EXISTS ux_posts_plan_dedupe ON posts_plan(dedupe_key);
"""

async def init_db():
    async with aiosqlite.connect(DB_FILE) as db:
        for stmt in INIT_SQL.strip().split(";"):
            s = stmt.strip()
            if s:
                await db.execute(s)
        await db.commit()

def normalize_text(s: str) -> str:
    s = s or ""
    s = s.strip().lower()
    # —É–±–µ—Ä—ë–º –¥–≤–æ–π–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
    s = re.sub(r"\s+", " ", s)
    return s

def compute_dedupe_key(item: dict) -> str:
    """
    - type='theme': sha256( normalize(theme) + '|' + yyyy-mm-dd )
    - type='content': sha256( normalize(text) [+ '|' + img_hash] )
    """
    itype = item.get("type")
    if itype == "theme":
        theme = normalize_text(item.get("theme", ""))
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –¥–Ω—é, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—É—é —Ç–µ–º—É –≤ –æ–¥–∏–Ω –¥–µ–Ω—å
        try:
            dt = datetime.fromisoformat(item["time_iso"])
        except Exception:
            dt = datetime.now(KYIV)
        day = dt.astimezone(KYIV).date().isoformat()
        base = f"{theme}|{day}"
        return hashlib.sha256(base.encode("utf-8")).hexdigest()
    else:
        text = normalize_text(item.get("text", ""))
        base = text
        # –ï—Å–ª–∏ —Ö–æ—Ç–∏–º –µ—â—ë —Å–∏–ª—å–Ω–µ–µ –æ—Ç—Å–µ–∫–∞—Ç—å –¥—É–±–ª—å –ø–æ –ø–µ—Ä–≤–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–µ ‚Äî –¥–æ–±–∞–≤–∏–º:
        imgs = item.get("images") or []
        if imgs:
            base = f"{base}|{imgs[0]}"
        return hashlib.sha256(base.encode("utf-8")).hexdigest()

async def save_items_to_db(items: list[dict], created_by: str | None):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã (theme/content) —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω–æ, —Å –¥–µ–¥—É–ø–æ–º."""
    now_iso = datetime.now(KYIV).isoformat()
    async with aiosqlite.connect(DB_FILE) as db:
        try:
            await db.execute("BEGIN")
            for it in items:
                dedupe_key = compute_dedupe_key(it)
                images_json = json.dumps(it.get("images") or [])
                await db.execute(
                    """
                    INSERT INTO posts_plan(time, type, theme, text, images, status, dedupe_key, created_at, created_by)
                    VALUES (?, ?, ?, ?, ?, 'pending', ?, ?, ?)
                    """,
                    (
                        it["time_iso"],
                        it["type"],
                        it.get("theme"),
                        it.get("text"),
                        images_json,
                        dedupe_key,
                        now_iso,
                        str(created_by) if created_by else None
                    )
                )
            await db.commit()
            return True, None
        except aiosqlite.IntegrityError as e:
            await db.rollback()
            return False, "–î—É–±–ª–∏–∫–∞—Ç: –ø–æ—Ö–æ–∂–∞—è –∑–∞–ø–∏—Å—å —É–∂–µ –µ—Å—Ç—å –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å."
        except Exception as e:
            await db.rollback()
            return False, f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}"

# -----------------------------------------------------------------------------
# UI helpers
# -----------------------------------------------------------------------------
def main_planner_menu():
    kb = [
        [InlineKeyboardButton("üóì –ü–ª–∞–Ω –ò–ò", callback_data=CB_OPEN_PLAN_MODE)],
        [InlineKeyboardButton("‚ú® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è", callback_data=CB_OPEN_GEN_MODE)],
    ]
    return InlineKeyboardMarkup(kb)

def decide_menu(mode: str):
    # mode = 'plan' or 'gen' ‚Äî —Ä–∞–∑–Ω—ã–µ callback –Ω–∞ DONE/ADD
    if mode == "plan":
        done = CB_PLAN_DONE
        addm = CB_PLAN_ADD_MORE
    else:
        done = CB_GEN_DONE
        addm = CB_GEN_ADD_MORE
    kb = [
        [InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data=done)],
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data=addm)],
        [InlineKeyboardButton("‚Ü©Ô∏è –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=CB_STEP_BACK)],
    ]
    return InlineKeyboardMarkup(kb)

# -----------------------------------------------------------------------------
# Guards
# -----------------------------------------------------------------------------
def _is_admin(update: Update) -> bool:
    if not ADMIN_ID:
        return True
    return update.effective_user and update.effective_user.id == ADMIN_ID

async def _guard_non_admin(update: Update):
    await update.effective_message.reply_text("–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.")

# -----------------------------------------------------------------------------
# Handlers: OPEN
# -----------------------------------------------------------------------------
async def open_planner(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–æ –∫–Ω–æ–ø–∫–µ PLAN_OPEN."""
    if not _is_admin(update):
        return await _guard_non_admin(update)
    await init_db()
    q = update.callback_query
    if q:
        await q.answer()
        msg = await q.edit_message_text("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: –≤—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º.", reply_markup=main_planner_menu())
        _push_bot_msg(update, msg)
    else:
        msg = await update.message.reply_text("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: –≤—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º.", reply_markup=main_planner_menu())
        _push_bot_msg(update, msg)

# -----------------------------------------------------------------------------
# PLAN mode
# -----------------------------------------------------------------------------
async def open_plan_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not _is_admin(update):
        return await _guard_non_admin(update)
    uid = update.effective_user.id
    st = _state(uid)
    st["mode"] = "plan"
    st["step"] = "plan_theme_wait"
    st["buffer"].clear()
    st["current"] = {}
    if update.callback_query:
        await update.callback_query.answer()
        msg = await update.callback_query.edit_message_text("–†–µ–∂–∏–º –ü–õ–ê–ù–ê. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –û—Ç–º–µ–Ω–∏—Ç—å.")
    else:
        msg = await update.message.reply_text("–†–µ–∂–∏–º –ü–õ–ê–ù–ê. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –û—Ç–º–µ–Ω–∏—Ç—å.")
    _push_bot_msg(update, msg)

async def plan_on_text_or_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not _is_admin(update):
        return
    uid = update.effective_user.id
    st = _state(uid)
    if st["mode"] != "plan":
        return

    # –û—Ç–º–µ–Ω–∞ —Å–ª–æ–≤–æ–º
    if update.message.text and update.message.text.strip().lower() in ("–æ—Ç–º–µ–Ω–∏—Ç—å", "–æ—Ç–º–µ–Ω–∞", "cancel"):
        # —à–∞–≥ –Ω–∞–∑–∞–¥
        await step_back(update, context)
        return

    if st["step"] == "plan_theme_wait":
        if not update.message.text:
            return
        st["current"] = {"theme": update.message.text.strip()}
        st["step"] = "plan_time_wait"
        msg = await update.message.reply_text("–û–∫. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è (HH:MM, –ö–∏–µ–≤) –∏–ª–∏ –û—Ç–º–µ–Ω–∏—Ç—å.")
        _push_bot_msg(update, msg)
        return

    if st["step"] == "plan_time_wait":
        if not update.message.text:
            return
        m = re.fullmatch(r"([01]\d|2[0-3]):([0-5]\d)", update.message.text.strip())
        if not m:
            msg = await update.message.reply_text("–§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ HH:MM. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –û—Ç–º–µ–Ω–∏—Ç—å.")
            _push_bot_msg(update, msg)
            return
        hh, mm = map(int, m.groups())
        now = datetime.now(KYIV)
        dt = now.replace(hour=hh, minute=mm, second=0, microsecond=0)
        if dt < now:
            dt += timedelta(days=1)
        st["current"]["time_iso"] = dt.isoformat()
        st["current"]["type"] = "theme"
        st["current"]["images"] = []
        st["step"] = "plan_decide"

        summary = f"–¢–µ–º–∞: {st['current']['theme']}\n–í—Ä–µ–º—è: {dt.strftime('%Y-%m-%d %H:%M')}"
        msg = await update.message.reply_text(summary, reply_markup=decide_menu("plan"))
        _push_bot_msg(update, msg)
        return

# -----------------------------------------------------------------------------
# GEN mode
# -----------------------------------------------------------------------------
async def open_gen_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not _is_admin(update):
        return await _guard_non_admin(update)
    uid = update.effective_user.id
    st = _state(uid)
    st["mode"] = "gen"
    st["step"] = "gen_theme_images_wait"
    st["buffer"].clear()
    st["current"] = {"images": []}
    if update.callback_query:
        await update.callback_query.answer()
        msg = await update.callback_query.edit_message_text("–†–µ–∂–∏–º –ì–ï–ù–ï–†–ê–¶–ò–ò. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –∏ (–æ–ø—Ü.) –ø—Ä–∏—à–ª–∏—Ç–µ 1‚Äì4 —Ñ–æ—Ç–æ. –ù–∞–ø–∏—à–∏—Ç–µ '–ì–û–¢–û–í–û' –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –∏–ª–∏ '–û—Ç–º–µ–Ω–∏—Ç—å'.")
    else:
        msg = await update.message.reply_text("–†–µ–∂–∏–º –ì–ï–ù–ï–†–ê–¶–ò–ò. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –∏ (–æ–ø—Ü.) –ø—Ä–∏—à–ª–∏—Ç–µ 1‚Äì4 —Ñ–æ—Ç–æ. –ù–∞–ø–∏—à–∏—Ç–µ '–ì–û–¢–û–í–û', –∏–ª–∏ '–û—Ç–º–µ–Ω–∏—Ç—å'.")
    _push_bot_msg(update, msg)

async def gen_on_text_or_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not _is_admin(update):
        return
    uid = update.effective_user.id
    st = _state(uid)
    if st["mode"] != "gen":
        return

    # –û—Ç–º–µ–Ω–∞ —Å–ª–æ–≤–æ–º
    if update.message.text and update.message.text.strip().lower() in ("–æ—Ç–º–µ–Ω–∏—Ç—å", "–æ—Ç–º–µ–Ω–∞", "cancel"):
        await step_back(update, context)
        return

    if st["step"] == "gen_theme_images_wait":
        # –§–æ—Ç–æ?
        if update.message.photo:
            file_id = update.message.photo[-1].file_id
            imgs = st["current"].setdefault("images", [])
            if len(imgs) < 4:
                imgs.append(file_id)
                msg = await update.message.reply_text(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ ({len(imgs)}/4). –î–æ–±–∞–≤—å—Ç–µ –µ—â—ë –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ì–û–¢–û–í–û'.")
                _push_bot_msg(update, msg)
            else:
                msg = await update.message.reply_text("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç 4 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ù–∞–ø–∏—à–∏—Ç–µ '–ì–û–¢–û–í–û' –∏–ª–∏ '–û—Ç–º–µ–Ω–∏—Ç—å'.")
                _push_bot_msg(update, msg)
            return

        # –¢–µ–∫—Å—Ç?
        if update.message.text:
            text = update.message.text.strip()
            if text.upper() == "–ì–û–¢–û–í–û":
                # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —Ç–µ–º–∞ –µ—Å—Ç—å
                if not st["current"].get("theme"):
                    msg = await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É (—Ç–µ–∫—Å—Ç), –∑–∞—Ç–µ–º '–ì–û–¢–û–í–û'.")
                    _push_bot_msg(update, msg)
                    return
                st["step"] = "gen_time_wait"
                msg = await update.message.reply_text("–û–∫. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è (HH:MM, –ö–∏–µ–≤) –∏–ª–∏ –û—Ç–º–µ–Ω–∏—Ç—å.")
                _push_bot_msg(update, msg)
                return
            else:
                st["current"]["theme"] = text
                msg = await update.message.reply_text("–¢–µ–º–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞. –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) –∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ì–û–¢–û–í–û', –ª–∏–±–æ '–û—Ç–º–µ–Ω–∏—Ç—å'.")
                _push_bot_msg(update, msg)
                return

    if st["step"] == "gen_time_wait":
        if not update.message.text:
            return
        m = re.fullmatch(r"([01]\d|2[0-3]):([0-5]\d)", update.message.text.strip())
        if not m:
            msg = await update.message.reply_text("–§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ HH:MM. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –û—Ç–º–µ–Ω–∏—Ç—å.")
            _push_bot_msg(update, msg)
            return
        hh, mm = map(int, m.groups())
        now = datetime.now(KYIV)
        dt = now.replace(hour=hh, minute=mm, second=0, microsecond=0)
        if dt < now:
            dt += timedelta(days=1)
        st["current"]["time_iso"] = dt.isoformat()
        st["current"]["type"] = "theme"   # –≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∂–µ —Ç–∏–ø 'theme' (—Ç–µ–∫—Å—Ç –≥–µ–Ω–µ—Ä–Ω—ë–º –ø–æ–∑–∂–µ)
        st["step"] = "gen_decide"

        imgs_cnt = len(st["current"].get("images") or [])
        summary = f"–¢–µ–º–∞: {st['current']['theme']}\n–í—Ä–µ–º—è: {dt.strftime('%Y-%m-%d %H:%M')}\n–ö–∞—Ä—Ç–∏–Ω–æ–∫: {imgs_cnt}"
        msg = await update.message.reply_text(summary, reply_markup=decide_menu("gen"))
        _push_bot_msg(update, msg)
        return

# -----------------------------------------------------------------------------
# Callback buttons: DONE / ADD MORE / STEP BACK
# -----------------------------------------------------------------------------
async def plan_done(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not _is_admin(update):
        return await _guard_non_admin(update)
    await update.callback_query.answer()
    uid = update.effective_user.id
    st = _state(uid)
    if st["mode"] != "plan":
        return
    items = list(st["buffer"])
    cur = st.get("current") or {}
    if cur.get("time_iso") and cur.get("theme"):
        items.append(cur)
    if not items:
        msg = await update.callback_query.edit_message_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")
        _push_bot_msg(update, msg)
        return
    ok, err = await save_items_to_db(items, created_by=str(uid))
    if ok:
        # reset
        USER_STATE.pop(uid, None)
        msg = await update.callback_query.edit_message_text("–ü–ª–∞–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω ‚úÖ")
        _push_bot_msg(update, msg)
    else:
        msg = await update.callback_query.edit_message_text(err or "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")
        _push_bot_msg(update, msg)

async def gen_done(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not _is_admin(update):
        return await _guard_non_admin(update)
    await update.callback_query.answer()
    uid = update.effective_user.id
    st = _state(uid)
    if st["mode"] != "gen":
        return
    items = list(st["buffer"])
    cur = st.get("current") or {}
    if cur.get("time_iso") and cur.get("theme"):
        items.append(cur)
    if not items:
        msg = await update.callback_query.edit_message_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")
        _push_bot_msg(update, msg)
        return
    ok, err = await save_items_to_db(items, created_by=str(uid))
    if ok:
        USER_STATE.pop(uid, None)
        msg = await update.callback_query.edit_message_text("–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ ‚úÖ")
        _push_bot_msg(update, msg)
    else:
        msg = await update.callback_query.edit_message_text(err or "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")
        _push_bot_msg(update, msg)

async def plan_add_more(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not _is_admin(update):
        return await _guard_non_admin(update)
    await update.callback_query.answer()
    uid = update.effective_user.id
    st = _state(uid)
    if st["mode"] != "plan":
        return
    cur = st.get("current") or {}
    if cur.get("time_iso") and cur.get("theme"):
        st["buffer"].append(cur)
    st["current"] = {}
    st["step"] = "plan_theme_wait"
    msg = await update.callback_query.edit_message_text("–î–æ–±–∞–≤–ª—è–µ–º –µ—â—ë. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –∏–ª–∏ –û—Ç–º–µ–Ω–∏—Ç—å.")
    _push_bot_msg(update, msg)

async def gen_add_more(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not _is_admin(update):
        return await _guard_non_admin(update)
    await update.callback_query.answer()
    uid = update.effective_user.id
    st = _state(uid)
    if st["mode"] != "gen":
        return
    cur = st.get("current") or {}
    if cur.get("time_iso") and cur.get("theme"):
        # –∑–∞—Ñ–∏–∫—Å–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π
        st["buffer"].append(cur)
    st["current"] = {"images": []}
    st["step"] = "gen_theme_images_wait"
    msg = await update.callback_query.edit_message_text("–î–æ–±–∞–≤–ª—è–µ–º –µ—â—ë. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –∏ (–æ–ø—Ü.) —Ñ–æ—Ç–æ. –ù–∞–ø–∏—à–∏—Ç–µ '–ì–û–¢–û–í–û' –∏–ª–∏ –û—Ç–º–µ–Ω–∏—Ç—å.")
    _push_bot_msg(update, msg)

async def step_back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–Ω–æ–ø–∫–∞ STEP_BACK –∏ —Å–ª–æ–≤–µ—Å–Ω–∞—è '–û—Ç–º–µ–Ω–∏—Ç—å': —à–∞–≥ –Ω–∞–∑–∞–¥ + —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞."""
    if update.callback_query:
        await update.callback_query.answer()
    uid = update.effective_user.id
    st = _state(uid)
    mode = st.get("mode")
    step = st.get("step")

    # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    await _delete_last_bot_msg(update, context)

    if mode == "plan":
        if step == "plan_decide":
            st["step"] = "plan_time_wait"
            msg = await update.effective_message.reply_text("–®–∞–≥ –Ω–∞–∑–∞–¥. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è (HH:MM) –∏–ª–∏ –û—Ç–º–µ–Ω–∏—Ç—å.")
            _push_bot_msg(update, msg)
        elif step == "plan_time_wait":
            st["step"] = "plan_theme_wait"
            st["current"].pop("time_iso", None)
            msg = await update.effective_message.reply_text("–®–∞–≥ –Ω–∞–∑–∞–¥. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –∏–ª–∏ –û—Ç–º–µ–Ω–∏—Ç—å.")
            _push_bot_msg(update, msg)
        else:
            # –≤—ã—Ö–æ–¥–∏–º –≤ –º–µ–Ω—é
            st["mode"] = None
            st["step"] = None
            st["buffer"].clear()
            st["current"] = {}
            msg = await update.effective_message.reply_text("–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞.", reply_markup=main_planner_menu())
            _push_bot_msg(update, msg)
        return

    if mode == "gen":
        if step == "gen_decide":
            st["step"] = "gen_time_wait"
            msg = await update.effective_message.reply_text("–®–∞–≥ –Ω–∞–∑–∞–¥. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è (HH:MM) –∏–ª–∏ –û—Ç–º–µ–Ω–∏—Ç—å.")
            _push_bot_msg(update, msg)
        elif step == "gen_time_wait":
            st["step"] = "gen_theme_images_wait"
            st["current"].pop("time_iso", None)
            msg = await update.effective_message.reply_text("–®–∞–≥ –Ω–∞–∑–∞–¥. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É, –¥–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ì–û–¢–û–í–û', –∏–ª–∏ –û—Ç–º–µ–Ω–∏—Ç—å.")
            _push_bot_msg(update, msg)
        else:
            st["mode"] = None
            st["step"] = None
            st["buffer"].clear()
            st["current"] = {}
            msg = await update.effective_message.reply_text("–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞.", reply_markup=main_planner_menu())
            _push_bot_msg(update, msg)
        return

    # –ï—Å–ª–∏ –≤–Ω–µ —Ä–µ–∂–∏–º–∞
    msg = await update.effective_message.reply_text("–û–∫.", reply_markup=main_planner_menu())
    _push_bot_msg(update, msg)

# -----------------------------------------------------------------------------
# LIST TODAY (–ø–æ –∂–µ–ª–∞–Ω–∏—é; –ø—Ä–æ—Å—Ç–∞—è —Å–ø—Ä–∞–≤–∫–∞)
# -----------------------------------------------------------------------------
async def list_today(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not _is_admin(update):
        return await _guard_non_admin(update)
    await init_db()
    today = datetime.now(KYIV).date()
    start = datetime(today.year, today.month, today.day, 0, 0, tzinfo=KYIV).isoformat()
    end   = datetime(today.year, today.month, today.day, 23, 59, tzinfo=KYIV).isoformat()

    rows = []
    async with aiosqlite.connect(DB_FILE) as db:
        async with db.execute(
            "SELECT id, time, type, theme, text, images, status FROM posts_plan WHERE time BETWEEN ? AND ? ORDER BY time ASC",
            (start, end)
        ) as cur:
            async for r in cur:
                rows.append(r)

    if not rows:
        msg = await update.effective_message.reply_text("–ù–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç.")
        _push_bot_msg(update, msg)
        return

    lines = []
    for rid, t, typ, theme, text, images, status in rows:
        label = theme or (text[:40] + "..." if text else "")
        lines.append(f"#{rid} ‚Ä¢ {t[-8:-3]} ‚Ä¢ {typ} ‚Ä¢ {status} ‚Ä¢ {label}")

    msg = await update.effective_message.reply_text("–ü–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n" + "\n".join(lines))
    _push_bot_msg(update, msg)

# -----------------------------------------------------------------------------
# REGISTRATION
# -----------------------------------------------------------------------------
def register_planner_handlers(app: Application):
    # –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    app.add_handler(CallbackQueryHandler(open_planner,      pattern=f"^{CB_PLAN_OPEN}$"))
    # –ú–µ–Ω—é —Ä–µ–∂–∏–º–æ–≤
    app.add_handler(CallbackQueryHandler(open_plan_mode,    pattern=f"^{CB_OPEN_PLAN_MODE}$"))
    app.add_handler(CallbackQueryHandler(open_gen_mode,     pattern=f"^{CB_OPEN_GEN_MODE}$"))
    # –ü–ª–∞–Ω: —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    app.add_handler(MessageHandler(filters.TEXT | filters.PHOTO, plan_on_text_or_photo))
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è: —Ç–µ–∫—Å—Ç/—Ñ–æ—Ç–æ
    app.add_handler(MessageHandler(filters.TEXT | filters.PHOTO, gen_on_text_or_photo))
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    app.add_handler(CallbackQueryHandler(plan_done,         pattern=f"^{CB_PLAN_DONE}$"))
    app.add_handler(CallbackQueryHandler(gen_done,          pattern=f"^{CB_GEN_DONE}$"))
    app.add_handler(CallbackQueryHandler(plan_add_more,     pattern=f"^{CB_PLAN_ADD_MORE}$"))
    app.add_handler(CallbackQueryHandler(gen_add_more,      pattern=f"^{CB_GEN_ADD_MORE}$"))
    app.add_handler(CallbackQueryHandler(step_back,         pattern=f"^{CB_STEP_BACK}$"))
    # –î–æ–ø.: —Å–ø–∏—Å–æ–∫ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (–º–æ–∂–Ω–æ –ø–æ–≤–µ—Å–∏—Ç—å –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É –≤ —Ç–≤–æ—ë–º –º–µ–Ω—é)
    # –ü—Ä–∏–º–µ—Ä: app.add_handler(CommandHandler("today", list_today))

# -----------------------------------------------------------------------------
# STANDALONE RUN (optional)
# -----------------------------------------------------------------------------
async def _startup(app: Application):
    await init_db()

def run_standalone():
    if not TELEGRAM_BOT_TOKEN_APPROVAL:
        raise RuntimeError("TELEGRAM_BOT_TOKEN_APPROVAL is not set.")
    app = Application.builder().token(TELEGRAM_BOT_TOKEN_APPROVAL).build()
    register_planner_handlers(app)
    app.post_init = _startup
    app.run_polling()

if __name__ == "__main__":
    run_standalone()