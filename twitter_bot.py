# -*- coding: utf-8 -*-
"""
twitter_bot.py ‚Äî production-ready –±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ / —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è / –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤
–≤ Telegram –∏ X (Twitter) —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∏ Gemini API.

–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:
- ‚úÖ –°—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é (8 –∫–Ω–æ–ø–æ–∫).
- ‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Gemini API (—Ç–µ–∫—Å—Ç, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –≤–∏–¥–µ–æ).
- ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –Ω–∞ GitHub (auto-clean 7d).
- ‚úÖ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤.
- ‚úÖ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ Telegram + Twitter.
- ‚úÖ SQLite –∏—Å—Ç–æ—Ä–∏—è –ø–æ—Å—Ç–æ–≤ (–∞–Ω—Ç–∏-–¥—É–±–ª–∏–∫–∞—Ç—ã).
- ‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ (–µ—Å–ª–∏ –µ—Å—Ç—å planner.py).
- ‚úÖ –ê–≤—Ç–æ-shutdown —á–µ—Ä–µ–∑ 10 –º–∏–Ω –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è.
- ‚úÖ –ü–û–î–†–û–ë–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –í–°–ï–• –®–ê–ì–û–í –ò–ò.
"""

import os
import re
import sys
import io
import uuid
import base64
import asyncio
import logging
import tempfile
import hashlib
import time
from functools import wraps
from html import escape as html_escape
from typing import Optional, List, Dict, Any, Tuple
from datetime import datetime, timedelta, time as dt_time
from unicodedata import normalize
from zoneinfo import ZoneInfo

import requests
import tweepy
from telegram import (
    InlineKeyboardButton, InlineKeyboardMarkup,
    Update, Bot, InputFile
)
from telegram.ext import (
    Application, CallbackQueryHandler,
    ContextTypes, MessageHandler, filters
)
from telegram.error import RetryAfter, BadRequest, TimedOut, NetworkError
import aiosqlite
from github import Github
import google.generativeai as genai   # Gemini API

# ------------------------------------------------------------------
# –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
# ------------------------------------------------------------------
LOG_LEVEL = os.getenv("LOG_LEVEL", "INFO").upper()
logging.basicConfig(
    level=LOG_LEVEL,
    format="%(asctime)s | %(levelname)s | %(name)s | %(funcName)s | %(message)s"
)
log = logging.getLogger("twitter_bot")

def _short(s: str, n: int = 120) -> str:
    if not s:
        return ""
    s = s.replace("\n", " ").strip()
    return s if len(s) <= n else (s[:n] + "‚Ä¶")

def ai_log(event: str, uid: Optional[int] = None, **kw):
    parts = [f"AI|{event}"]
    if uid is not None:
        parts.append(f"uid={uid}")
    for k, v in kw.items():
        if isinstance(v, str):
            v = _short(v, 160)
        parts.append(f"{k}={v}")
    log.info(" | ".join(parts))

def ai_step(event_name: str):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä: –ª–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ä—Ç, —É—Å–ø–µ—Ö/–æ—à–∏–±–∫—É –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —à–∞–≥–∞ –ò–ò."""
    def deco(fn):
        @wraps(fn)
        async def wrap(*args, **kwargs):
            uid = kwargs.get("uid")
            t0 = time.perf_counter()
            ai_log(f"{event_name}.start", uid=uid)
            try:
                res = await fn(*args, **kwargs)
                dt = time.perf_counter() - t0
                ai_log(f"{event_name}.ok", uid=uid, took=f"{dt:.3f}s")
                return res
            except Exception as e:
                dt = time.perf_counter() - t0
                ai_log(f"{event_name}.err", uid=uid, took=f"{dt:.3f}s", err=str(e))
                raise
        return wrap
    return deco

# ------------------------------------------------------------------
# ENV
# ------------------------------------------------------------------
TELEGRAM_BOT_TOKEN_APPROVAL = os.getenv("TELEGRAM_BOT_TOKEN_APPROVAL")
TELEGRAM_APPROVAL_CHAT_ID_STR = os.getenv("TELEGRAM_APPROVAL_CHAT_ID")
TELEGRAM_BOT_TOKEN_CHANNEL = os.getenv("TELEGRAM_BOT_TOKEN_CHANNEL")
TELEGRAM_CHANNEL_USERNAME_ID = os.getenv("TELEGRAM_CHANNEL_USERNAME_ID")

TWITTER_API_KEY = os.getenv("TWITTER_API_KEY")
TWITTER_API_SECRET = os.getenv("TWITTER_API_SECRET")
TWITTER_ACCESS_TOKEN = os.getenv("TWITTER_ACCESS_TOKEN")
TWITTER_ACCESS_TOKEN_SECRET = os.getenv("TWITTER_ACCESS_TOKEN_SECRET")

GITHUB_TOKEN = os.getenv("ACTION_PAT_GITHUB")
GITHUB_REPO = os.getenv("ACTION_REPO_GITHUB")
GITHUB_IMAGE_PATH = "images_for_posts"

# Gemini API
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
genai.configure(api_key=GEMINI_API_KEY)

# ------------------------------------------------------------------
# –ì–õ–û–ë–ê–õ–´
# ------------------------------------------------------------------
TZ = ZoneInfo("Europe/Kyiv")
approval_bot = Bot(token=TELEGRAM_BOT_TOKEN_APPROVAL)
channel_bot = Bot(token=TELEGRAM_BOT_TOKEN_CHANNEL)

TELEGRAM_APPROVAL_CHAT_ID = int(TELEGRAM_APPROVAL_CHAT_ID_STR)

AUTO_SHUTDOWN_AFTER_SECONDS = 600
TIMER_PUBLISH_DEFAULT = 180
TIMER_PUBLISH_EXTEND = 600

VERBATIM_MODE = False

# Twitter API
def get_twitter_clients():
    client_v2 = tweepy.Client(
        consumer_key=TWITTER_API_KEY,
        consumer_secret=TWITTER_API_SECRET,
        access_token=TWITTER_ACCESS_TOKEN,
        access_token_secret=TWITTER_ACCESS_TOKEN_SECRET
    )
    api_v1 = tweepy.API(
        tweepy.OAuth1UserHandler(
            TWITTER_API_KEY, TWITTER_API_SECRET,
            TWITTER_ACCESS_TOKEN, TWITTER_ACCESS_TOKEN_SECRET
        )
    )
    return client_v2, api_v1

twitter_client_v2, twitter_api_v1 = get_twitter_clients()

# GitHub
github_client = Github(GITHUB_TOKEN)
github_repo = github_client.get_repo(GITHUB_REPO)

# ------------------------------------------------------------------
# –°–¢–ï–ô–¢
# ------------------------------------------------------------------
post_data: Dict[str, Any] = {
    "text_en": "",
    "ai_hashtags": [],
    "media_kind": "none",      # none | image | video
    "media_src": "tg",         # tg | url | github
    "media_ref": None,
    "media_filename": None,
    "timestamp": None,
    "post_id": 0,
    "is_manual": False,
    "user_tags_override": False
}

# –•—Ä–∞–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
pending_post = {
    "active": False,
    "timer": None,
    "timeout": TIMER_PUBLISH_DEFAULT,
    "mode": "normal"
}
last_action_time: Dict[int, datetime] = {}
last_button_pressed_at: Optional[datetime] = None
manual_expected_until: Optional[datetime] = None
awaiting_hashtags_until: Optional[datetime] = None

# ------------------------------------------------------------------
# –ú–ï–ù–Æ
# ------------------------------------------------------------------
def get_start_menu():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data="approve")],
        [InlineKeyboardButton("ü§ñ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç (–ò–ò)", callback_data="ai_generate")],
        [InlineKeyboardButton("‚úçÔ∏è –°–¥–µ–ª–∞–π —Å–∞–º", callback_data="self_post")],
        [InlineKeyboardButton("üóì –ü–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å", callback_data="show_day_plan")],
        [InlineKeyboardButton("üîñ –•—ç—à—Ç–µ–≥–∏", callback_data="edit_hashtags")],
        [InlineKeyboardButton("üîï –ù–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å", callback_data="do_not_disturb")],
        [InlineKeyboardButton("‚è≥ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–µ–Ω—å", callback_data="end_day")],
        [InlineKeyboardButton("üî¥ –í—ã–∫–ª—é—á–∏—Ç—å", callback_data="shutdown_bot")]
    ])

# ------------------------------------------------------------------
# SAFE wrappers –¥–ª—è Telegram (–∞–Ω—Ç–∏-—Ñ–ª—É–¥)
# ------------------------------------------------------------------
async def safe_q_answer(q) -> bool:
    try:
        await q.answer()
        return True
    except BadRequest as e:
        if "Query is too old" in str(e):
            log.warning("Callback too old; ignored.")
            return False
        raise
    except RetryAfter as e:
        await asyncio.sleep(e.retry_after + 1)
        try:
            await q.answer()
            return True
        except Exception:
            return False

async def safe_send_message(bot: Bot, **kwargs):
    for _ in range(3):
        try:
            return await bot.send_message(**kwargs)
        except RetryAfter as e:
            await asyncio.sleep(e.retry_after + 1)
        except (TimedOut, NetworkError):
            await asyncio.sleep(1)
        except BadRequest as e:
            if "message is not modified" in str(e).lower():
                return None
            raise
    return None

# ------------------------------------------------------------------
# Gemini API ‚Äî –≥–µ–Ω–µ—Ä–∞—Ü–∏—è (—Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
# ------------------------------------------------------------------
@ai_step("gemini.text")
async def gemini_generate_text(prompt: str, uid: Optional[int] = None) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ Gemini"""
    ai_log("gemini.text.prompt", uid=uid, prompt=prompt)
    try:
        model = genai.GenerativeModel("gemini-1.5-pro")
        resp = await asyncio.to_thread(model.generate_content, prompt)
        text = (resp.text or "").strip() if resp else ""
        ai_log("gemini.text.result", uid=uid, text=text)
        return text or "‚ö†Ô∏è Gemini –Ω–µ –≤–µ—Ä–Ω—É–ª —Ç–µ–∫—Å—Ç."
    except Exception as e:
        ai_log("gemini.text.exception", uid=uid, err=str(e))
        return f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞: {e}"

@ai_step("gemini.image")
async def gemini_generate_image(prompt: str, uid: Optional[int] = None) -> Optional[str]:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Gemini Images API ‚Üí GitHub URL"""
    ai_log("gemini.image.prompt", uid=uid, prompt=prompt)
    try:
        img = await asyncio.to_thread(
            genai.images.generate,
            prompt=prompt,
            size="1024x1024"
        )
        b64_png = None
        if img and getattr(img, "generated_images", None):
            g = img.generated_images[0]
            b64_png = getattr(g, "image", None)
            if hasattr(b64_png, "data"):
                b64_png = b64_png.data
        if not b64_png:
            raise RuntimeError("Images API –Ω–µ –≤–µ—Ä–Ω—É–ª base64.")
        image_bytes = base64.b64decode(b64_png)
        tmp = tempfile.NamedTemporaryFile(delete=False, suffix=".png")
        tmp.write(image_bytes); tmp.close()

        filename = f"{uuid.uuid4().hex}.png"
        with open(tmp.name, "rb") as f:
            content_b64 = base64.b64encode(f.read()).decode("utf-8")
        github_repo.create_file(
            f"{GITHUB_IMAGE_PATH}/{filename}",
            "upload ai image",
            content_b64,
            branch="main"
        )
        os.remove(tmp.name)
        url = f"https://raw.githubusercontent.com/{GITHUB_REPO}/main/{GITHUB_IMAGE_PATH}/{filename}"
        ai_log("gemini.image.github_saved", uid=uid, filename=filename, url=url)
        return url
    except Exception as e:
        ai_log("gemini.image.exception", uid=uid, err=str(e))
        return None

@ai_step("gemini.video")
async def gemini_generate_video(prompt: str, uid: Optional[int] = None) -> Optional[str]:
    """
    –í–∏–¥–µ–æ (–∑–∞–≥–ª—É—à–∫–∞): –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ—ë URL.
    """
    ai_log("gemini.video.prompt", uid=uid, prompt=prompt)
    try:
        img_url = await gemini_generate_image(prompt, uid=uid)
        if not img_url:
            ai_log("gemini.video.noimage", uid=uid)
            return None
        ai_log("gemini.video.stub_return", uid=uid, url=img_url)
        return img_url
    except Exception as e:
        ai_log("gemini.video.exception", uid=uid, err=str(e))
        return None

# ------------------------------------------------------------------
# GitHub helpers (upload / delete / cleanup)
# ------------------------------------------------------------------
def upload_file_to_github(path: str, filename: str, message="upload file") -> Optional[str]:
    try:
        with open(path, "rb") as f:
            content_b64 = base64.b64encode(f.read()).decode("utf-8")
        github_repo.create_file(
            f"{GITHUB_IMAGE_PATH}/{filename}",
            message,
            content_b64,
            branch="main"
        )
        url = f"https://raw.githubusercontent.com/{GITHUB_REPO}/main/{GITHUB_IMAGE_PATH}/{filename}"
        log.info(f"GITHUB.upload | name={filename} | url={url}")
        return url
    except Exception as e:
        log.error(f"GITHUB.upload.err | name={filename} | err={e}")
        return None

def delete_file_from_github(filename: str):
    try:
        contents = github_repo.get_contents(f"{GITHUB_IMAGE_PATH}/{filename}", ref="main")
        github_repo.delete_file(contents.path, "delete old file", contents.sha, branch="main")
        log.info(f"GITHUB.delete | name={filename}")
    except Exception as e:
        log.error(f"GITHUB.delete.err | name={filename} | err={e}")

async def cleanup_github_files_older_than(days: int = 7):
    """–£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª—ã –∏–∑ —Ä–µ–ø–æ —Å—Ç–∞—Ä—à–µ N –¥–Ω–µ–π"""
    try:
        contents = github_repo.get_contents(GITHUB_IMAGE_PATH, ref="main")
        cutoff = datetime.utcnow() - timedelta(days=days)
        for file in contents:
            if not file.type == "file":
                continue
            created_at = getattr(file, "last_modified", None)
            if created_at and created_at < cutoff:
                delete_file_from_github(file.name)
                log.info(f"GITHUB.cleanup.deleted | name={file.name}")
    except Exception as e:
        log.warning(f"GITHUB.cleanup.warn | err={e}")

# ------------------------------------------------------------------
# –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞
# ------------------------------------------------------------------
async def send_single_preview(text_en: str, media_url: Optional[str] = None, header: str = "–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä"):
    caption = html_escape(text_en.strip()) if text_en else "<i>(–ø—É—Å—Ç–æ)</i>"
    hdr = f"<b>{header}</b>\n\n"
    log.info(f"PREVIEW.send | kind={post_data.get('media_kind')} | has_media={bool(media_url)} | text={_short(text_en)}")
    try:
        if post_data.get("media_kind") == "image" and media_url:
            await approval_bot.send_photo(
                TELEGRAM_APPROVAL_CHAT_ID,
                media_url,
                caption=caption,
                parse_mode="HTML",
                reply_markup=get_start_menu()
            )
        elif post_data.get("media_kind") == "video" and media_url:
            await approval_bot.send_video(
                TELEGRAM_APPROVAL_CHAT_ID,
                media_url,
                caption=caption,
                parse_mode="HTML",
                reply_markup=get_start_menu()
            )
        else:
            await approval_bot.send_message(
                TELEGRAM_APPROVAL_CHAT_ID,
                f"{hdr}{caption}",
                parse_mode="HTML",
                disable_web_page_preview=True,
                reply_markup=get_start_menu()
            )
    except Exception as e:
        log.error(f"PREVIEW.err | {e}")

# ------------------------------------------------------------------
# –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ Telegram –∏ Twitter (X)
# ------------------------------------------------------------------
async def publish_post_to_telegram(text: str | None, media_url: Optional[str] = None, media_kind: str = "none") -> bool:
    try:
        html_text = html_escape((text or "").strip()) or "<i>(–ø—É—Å—Ç–æ)</i>"
        log.info(f"PUB.TG | kind={media_kind} | has_media={bool(media_url)} | text={_short(text or '')}")
        if media_kind == "image" and media_url:
            await channel_bot.send_photo(
                TELEGRAM_CHANNEL_USERNAME_ID,
                media_url,
                caption=html_text,
                parse_mode="HTML"
            )
        elif media_kind == "video" and media_url:
            await channel_bot.send_video(
                TELEGRAM_CHANNEL_USERNAME_ID,
                media_url,
                caption=html_text,
                parse_mode="HTML",
                supports_streaming=True
            )
        else:
            await channel_bot.send_message(
                TELEGRAM_CHANNEL_USERNAME_ID,
                html_text,
                parse_mode="HTML",
                disable_web_page_preview=True
            )
        return True
    except Exception as e:
        log.error(f"PUB.TG.err | {e}")
        try:
            await approval_bot.send_message(TELEGRAM_APPROVAL_CHAT_ID, f"‚ùå Telegram: {e}")
        except Exception:
            pass
        return False

def _download_to_temp(url: str, suffix: str) -> Optional[str]:
    try:
        log.info(f"MEDIA.download | url={url} | suffix={suffix}")
        r = requests.get(url, headers={'User-Agent':'Mozilla/5.0'}, timeout=60)
        r.raise_for_status()
        tmp = tempfile.NamedTemporaryFile(delete=False, suffix=suffix)
        tmp.write(r.content); tmp.close()
        return tmp.name
    except Exception as e:
        log.warning(f"MEDIA.download.err | url={url} | err={e}")
        return None

async def publish_post_to_twitter(text: str | None, media_url: Optional[str] = None, media_kind: str = "none") -> bool:
    try:
        body = (text or "").strip()
        media_ids = None
        local_path = None
        log.info(f"PUB.X | kind={media_kind} | has_media={bool(media_url)} | text={_short(body)}")

        if media_url and media_kind in ("image", "video"):
            if media_kind == "image":
                local_path = _download_to_temp(media_url, suffix=".png")
                if not local_path:
                    raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è X")
                media = twitter_api_v1.media_upload(filename=local_path)
                media_ids = [media.media_id_string]
            else:
                local_path = _download_to_temp(media_url, suffix=".mp4")
                if not local_path:
                    raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ –¥–ª—è X")
                media = twitter_api_v1.media_upload(
                    filename=local_path,
                    media_category="tweet_video",
                    chunked=True
                )
                media_ids = [media.media_id_string]

        if media_ids and body:
            try:
                twitter_client_v2.create_tweet(text=body, media={"media_ids": media_ids})
            except TypeError:
                twitter_client_v2.create_tweet(text=body, media_ids=media_ids)
        elif media_ids and not body:
            try:
                twitter_client_v2.create_tweet(media={"media_ids": media_ids})
            except TypeError:
                twitter_client_v2.create_tweet(media_ids=media_ids)
        else:
            twitter_client_v2.create_tweet(text=body)

        if local_path:
            try:
                os.remove(local_path)
            except Exception:
                pass
        return True
    except Exception as e:
        log.error(f"PUB.X.err | {e}")
        try:
            await approval_bot.send_message(TELEGRAM_APPROVAL_CHAT_ID, f"‚ùå Twitter: {e}")
        except Exception:
            pass
        return False

async def publish_both(text: str | None, media_url: Optional[str], media_kind: str) -> None:
    tg_ok = await publish_post_to_telegram(text, media_url, media_kind)
    tw_ok = await publish_post_to_twitter(text, media_url, media_kind)
    status = f"Telegram: {'‚úÖ' if tg_ok else '‚ùå'} | Twitter: {'‚úÖ' if tw_ok else '‚ùå'}"
    log.info(f"PUB.status | {status}")
    await approval_bot.send_message(TELEGRAM_APPROVAL_CHAT_ID, f"–ì–æ—Ç–æ–≤–æ. {status}")

# ------------------------------------------------------------------
# TG –º–µ–¥–∏–∞ ‚Üí GitHub
# ------------------------------------------------------------------
async def _tg_file_to_github_url(file_id: str, prefer_image: bool = True) -> Tuple[str, str]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (github_raw_url, kind) –≥–¥–µ kind ‚àà {'image','video'}.
    """
    tg_file = await approval_bot.get_file(file_id)
    fp = tg_file.file_path or ""
    is_video = (".mp4" in fp.lower()) or (".webm" in fp.lower()) or (".mov" in fp.lower())
    suffix = ".mp4" if is_video else (".png" if prefer_image else ".bin")

    tmp = tempfile.NamedTemporaryFile(delete=False, suffix=suffix)
    await tg_file.download_to_drive(tmp.name)

    try:
        filename = f"{uuid.uuid4().hex}{suffix}"
        url = upload_file_to_github(tmp.name, filename, message="upload media from TG")
        log.info(f"TG.media.saved | kind={'video' if is_video else 'image'} | name={filename} | url={url}")
        if not url:
            raise RuntimeError("upload_file_to_github returned None")
        return url, ("video" if is_video else "image")
    finally:
        try:
            os.remove(tmp.name)
        except Exception:
            pass

# ------------------------------------------------------------------
# –ò–ò-—Å–æ—Å—Ç–æ—è–Ω–∏–µ per-user
# ------------------------------------------------------------------
AI_FLOWS: Dict[int, Dict[str, Any]] = {}

def _ai_reset(uid: int):
    AI_FLOWS[uid] = {
        "mode": "idle",
        "topic": "",
        "text": "",
        "hashtags": [],
        "media_kind": "none",
        "media_url": None,
    }
    ai_log("state.reset", uid=uid, mode="idle")

def _ai_get(uid: int) -> Dict[str, Any]:
    if uid not in AI_FLOWS:
        _ai_reset(uid)
    return AI_FLOWS[uid]

def _hashtags_from_gemini_text(raw: str) -> List[str]:
    cand = re.findall(r'[#$][\w\d_]+', raw, flags=re.UNICODE)
    out, seen = [], set()
    for t in cand:
        key = t.lower()
        if key in seen: 
            continue
        seen.add(key); out.append(t)
        if len(out) >= 10:
            break
    return out

# ------------------------------------------------------------------
# –ö–Ω–æ–ø–æ—á–Ω—ã–µ UI-–±–ª–æ–∫–∏ –ò–ò
# ------------------------------------------------------------------
def kb_ai_text_actions():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –¢–µ–∫—Å—Ç –ø–æ–¥—Ö–æ–¥–∏—Ç", callback_data="ai_text_ok"),
         InlineKeyboardButton("‚ôªÔ∏è –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data="ai_text_regen")],
        [InlineKeyboardButton("‚úèÔ∏è –ü—Ä–∞–≤–∏—Ç—å", callback_data="ai_text_edit")],
        [InlineKeyboardButton("üîñ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ö—ç—à—Ç–µ–≥–∏", callback_data="ai_hash_gen")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])

def kb_ai_media_choice():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üñº –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É", callback_data="ai_img")],
        [InlineKeyboardButton("üé¨ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ", callback_data="ai_video")],
        [InlineKeyboardButton("‚è≠ –ë–µ–∑ –º–µ–¥–∏–∞", callback_data="ai_media_skip")]
    ])

def kb_ai_media_after_gen():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ö–æ–¥–∏—Ç", callback_data="ai_media_ok"),
         InlineKeyboardButton("‚ôªÔ∏è –ï—â—ë –≤–∞—Ä–∏–∞–Ω—Ç", callback_data="ai_media_regen")],
        [InlineKeyboardButton("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –º–µ–¥–∏–∞", callback_data="ai_media_skip")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])

def kb_save_to_plan_or_post_now():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ø–ª–∞–Ω (–∏ –∑–∞–¥–∞—Ç—å –≤—Ä–µ–º—è)", callback_data="ai_save_to_plan")],
        [InlineKeyboardButton("üì§ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å", callback_data="ai_post_now")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])

# ------------------------------------------------------------------
# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
# ------------------------------------------------------------------
try:
    from planner import register_planner_handlers as _planner_register
    from planner import open_planner as _planner_open
    from planner import planner_add_from_text as _planner_add_item
    from planner import planner_prompt_time as _planner_prompt_time
    from planner import _update_media as _planner_update_media
    PLANNER_OK = True
except Exception as _e:
    log.warning(f"Planner import warn: {_e}")
    _planner_register = lambda app: None
    _planner_open = None
    _planner_add_item = None
    _planner_prompt_time = None
    _planner_update_media = None
    PLANNER_OK = False

@ai_step("plan.save")
async def _save_ai_to_plan(uid: int, text: str, media_url: Optional[str], media_kind: str):
    if not PLANNER_OK or _planner_add_item is None:
        await approval_bot.send_message(
            TELEGRAM_APPROVAL_CHAT_ID,
            "‚ö†Ô∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ú–æ–≥—É —Ç–æ–ª—å–∫–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å."
        )
        ai_log("plan.unavailable", uid=uid)
        return
    try:
        new_item_id = await _planner_add_item(uid, text, chat_id=TELEGRAM_APPROVAL_CHAT_ID, bot=approval_bot)
        ai_log("plan.item_created", uid=uid, item_id=new_item_id, text=text)
        if media_url and _planner_update_media:
            mtype = "photo" if media_kind == "image" else "document"
            await _planner_update_media(uid, new_item_id, media_url, mtype)
            ai_log("plan.media_attached", uid=uid, item_id=new_item_id, media_kind=media_kind, url=media_url)
        if _planner_prompt_time:
            await _planner_prompt_time(uid, TELEGRAM_APPROVAL_CHAT_ID, approval_bot)
            ai_log("plan.prompt_time", uid=uid, item_id=new_item_id)
    except Exception as e:
        ai_log("plan.save.err", uid=uid, err=str(e))
        await approval_bot.send_message(TELEGRAM_APPROVAL_CHAT_ID, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ø–ª–∞–Ω: {e}")

# ------------------------------------------------------------------
# CALLBACKS ‚Äî –ü–û–î–†–û–ë–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
# ------------------------------------------------------------------
async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    data = q.data
    uid = update.effective_user.id
    await safe_q_answer(q)

    ai = _ai_get(uid)
    ai_log("cb", uid=uid, data=data, mode=ai.get("mode"))

    if data == "approve":
        await send_single_preview(post_data.get("text_en") or "", post_data.get("media_ref"), header="–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä")
        return

    if data == "ai_generate":
        _ai_reset(uid)
        AI_FLOWS[uid]["mode"] = "await_topic"
        ai_log("state.set", uid=uid, mode="await_topic")
        await approval_bot.send_message(
            TELEGRAM_APPROVAL_CHAT_ID,
            "ü§ñ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É/–±—Ä–∏—Ñ (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) –¥–ª—è –ø–æ—Å—Ç–∞:",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
        )
        return

    if data == "self_post":
        global manual_expected_until
        manual_expected_until = datetime.now(TZ) + timedelta(minutes=5)
        ai_log("self_post.open", uid=uid, until=manual_expected_until.isoformat())
        await approval_bot.send_message(
            TELEGRAM_APPROVAL_CHAT_ID,
            "‚úçÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Ç–µ–∫—Å—Ç (EN/UA/RU) –∏ –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ.\n"
            "–ú–µ–¥–∏–∞ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã –Ω–∞ GitHub. –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è ‚Äî 5 –º–∏–Ω.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
        )
        return

    if data == "edit_hashtags":
        AI_FLOWS[uid]["mode"] = "await_hashtags_input"
        ai_log("state.set", uid=uid, mode="await_hashtags_input")
        await approval_bot.send_message(
            TELEGRAM_APPROVAL_CHAT_ID,
            "üîñ –í–≤–µ–¥–∏—Ç–µ —Ö—ç—à—Ç–µ–≥–∏ (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª/–∑–∞–ø—è—Ç—É—é). –ù–µ –±–æ–ª–µ–µ 10:",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
        )
        return

    if data == "do_not_disturb":
        ai_log("dnd.toggle", uid=uid)
        await approval_bot.send_message(TELEGRAM_APPROVAL_CHAT_ID, "üåô –†–µ–∂–∏–º ¬´–ù–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å¬ª –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω (–∑–∞–≥–ª—É—à–∫–∞).")
        return

    if data == "end_day":
        ai_log("day.end", uid=uid)
        await approval_bot.send_message(TELEGRAM_APPROVAL_CHAT_ID, "‚è≥ –î–µ–Ω—å –∑–∞–≤–µ—Ä—à—ë–Ω (–∑–∞–≥–ª—É—à–∫–∞).")
        return

    if data == "shutdown_bot":
        ai_log("shutdown", uid=uid)
        await approval_bot.send_message(TELEGRAM_APPROVAL_CHAT_ID, "üî¥ –ë–æ—Ç –≤—ã–∫–ª—é—á–∞–µ—Ç—Å—è‚Ä¶")
        import time as _t; _t.sleep(1)
        os._exit(0)
        return

    if data == "back_to_main":
        ai_log("back_to_main", uid=uid, mode=ai.get("mode"))
        await send_single_preview(post_data.get("text_en") or "", post_data.get("media_ref"), header="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é / –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä")
        return

    # ---- –ò–ò: TEXT ----
    if data == "ai_text_regen":
        topic = ai.get("topic") or "Short crypto post"
        sys_prompt = (
            "You are a social media copywriter. Create a short, engaging post for X/Twitter: "
            "limit ~230 chars, 1‚Äì2 sentences, 1 emoji max, include a subtle hook, no hashtags."
        )
        text = await gemini_generate_text(f"{sys_prompt}\n\nTopic: {topic}", uid=uid)
        ai["text"] = text
        ai["mode"] = "ready_text"
        ai_log("text.ready", uid=uid, text=text)
        await approval_bot.send_message(
            TELEGRAM_APPROVAL_CHAT_ID,
            f"‚úçÔ∏è –í–∞—Ä–∏–∞–Ω—Ç —Ç–µ–∫—Å—Ç–∞:\n\n{text}",
            reply_markup=kb_ai_text_actions()
        )
        return

    if data == "ai_text_ok":
        ai["mode"] = "ready_text"
        ai_log("text.accept", uid=uid, text=ai.get("text"))
        await approval_bot.send_message(
            TELEGRAM_APPROVAL_CHAT_ID,
            "–¢–µ–∫—Å—Ç –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω. –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ö—ç—à—Ç–µ–≥–∏ –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ –º–µ–¥–∏–∞?",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîñ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ö—ç—à—Ç–µ–≥–∏", callback_data="ai_hash_gen")],
                [InlineKeyboardButton("‚û°Ô∏è –ü–µ—Ä–µ–π—Ç–∏ –∫ –º–µ–¥–∏–∞", callback_data="ai_media_choose")]
            ])
        )
        return

    if data == "ai_text_edit":
        ai["mode"] = "await_text_edit"
        ai_log("text.edit.await", uid=uid)
        await approval_bot.send_message(
            TELEGRAM_APPROVAL_CHAT_ID,
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
        )
        return

    # ---- –ò–ò: HASHTAGS ----
    if data == "ai_hash_gen":
        try:
            prompt = (
                "Generate 6-10 concise, platform-friendly hashtags for X/Twitter. "
                "Return them separated by spaces, include $Ai, #AI, #crypto where relevant."
                f"\n\nPost text:\n{ai.get('text','')}"
            )
            ai_log("hashtags.gen.start", uid=uid)
            raw = await gemini_generate_text(prompt, uid=uid)
            tags = _hashtags_from_gemini_text(raw)
            ai["hashtags"] = tags
            ai_log("hashtags.gen.done", uid=uid, tags=" ".join(tags))
            await approval_bot.send_message(
                TELEGRAM_APPROVAL_CHAT_ID,
                f"üîñ –•—ç—à—Ç–µ–≥–∏:\n{' '.join(tags) if tags else '‚Äî'}",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚úèÔ∏è –ü—Ä–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é", callback_data="edit_hashtags")],
                    [InlineKeyboardButton("‚û°Ô∏è –ö –º–µ–¥–∏–∞", callback_data="ai_media_choose")]
                ])
            )
        except Exception as e:
            ai_log("hashtags.gen.err", uid=uid, err=str(e))
            await approval_bot.send_message(TELEGRAM_APPROVAL_CHAT_ID, f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ö—ç—à—Ç–µ–≥–æ–≤: {e}")
        return

    if data == "ai_media_choose":
        ai_log("media.choose", uid=uid)
        await approval_bot.send_message(TELEGRAM_APPROVAL_CHAT_ID, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–µ–¥–∏–∞:", reply_markup=kb_ai_media_choice())
        return

    # ---- –ò–ò: MEDIA ----
    if data == "ai_img":
        ai_log("media.image.start", uid=uid, topic=ai.get("topic"))
        await approval_bot.send_message(TELEGRAM_APPROVAL_CHAT_ID, "üñº –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ‚Ä¶")
        img_prompt = (
            "Generate a clean, square social-media illustration without any text overlay. "
            "Style: modern, high-contrast, eye-catching, safe for work.\n"
            f"Theme: {ai.get('topic')}\n"
            f"Post text: {ai.get('text')}"
        )
        url = await gemini_generate_image(img_prompt, uid=uid)
        if not url:
            ai_log("media.image.fail", uid=uid)
            await approval_bot.send_message(TELEGRAM_APPROVAL_CHAT_ID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
            return
        ai["media_url"] = url
        ai["media_kind"] = "image"
        ai_log("media.image.ok", uid=uid, url=url)
        await send_single_preview(ai.get("text",""), url, header="–ò–ò –ø–æ—Å—Ç: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
        await approval_bot.send_message(TELEGRAM_APPROVAL_CHAT_ID, "–ü–æ–¥—Ö–æ–¥–∏—Ç –∫–∞—Ä—Ç–∏–Ω–∫–∞?", reply_markup=kb_ai_media_after_gen())
        return

    if data == "ai_video":
        ai_log("media.video.start", uid=uid, topic=ai.get("topic"))
        await approval_bot.send_message(TELEGRAM_APPROVAL_CHAT_ID, "üé¨ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∏–¥–µ–æ (–∑–∞–≥–ª—É—à–∫–∞)‚Ä¶")
        vid_prompt = (
            "Create a short looping social clip (5-8s) concept matching the post. "
            "Modern, high-contrast, engaging. No subtitles.\n"
            f"Theme: {ai.get('topic')}\n"
            f"Post text: {ai.get('text')}"
        )
        url = await gemini_generate_video(vid_prompt, uid=uid)
        if not url:
            ai_log("media.video.fail", uid=uid)
            await approval_bot.send_message(TELEGRAM_APPROVAL_CHAT_ID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ.")
            return
        ai["media_url"] = url
        ai["media_kind"] = "video"
        ai_log("media.video.ok", uid=uid, url=url)
        await send_single_preview(ai.get("text",""), url, header="–ò–ò –ø–æ—Å—Ç: –≤–∏–¥–µ–æ")
        await approval_bot.send_message(TELEGRAM_APPROVAL_CHAT_ID, "–ü–æ–¥—Ö–æ–¥–∏—Ç –≤–∏–¥–µ–æ?", reply_markup=kb_ai_media_after_gen())
        return

    if data == "ai_media_regen":
        ai_log("media.regen", uid=uid, kind=ai.get("media_kind"))
        # –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–≥–æ –∂–µ —Ç–∏–ø–∞
        if ai.get("media_kind") == "image":
            update.callback_query.data = "ai_img"
        elif ai.get("media_kind") == "video":
            update.callback_query.data = "ai_video"
        else:
            await approval_bot.send_message(TELEGRAM_APPROVAL_CHAT_ID, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–µ–¥–∏–∞.")
            return await callback_handler(update, context)
        return await callback_handler(update, context)

    if data == "ai_media_ok":
        ai_log("media.accept", uid=uid, kind=ai.get("media_kind"), url=ai.get("media_url"))
        await approval_bot.send_message(
            TELEGRAM_APPROVAL_CHAT_ID,
            "–ú–µ–¥–∏–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ. –ß—Ç–æ –¥–∞–ª—å—à–µ?",
            reply_markup=kb_save_to_plan_or_post_now()
        )
        return

    if data == "ai_media_skip":
        ai_log("media.skip", uid=uid, prev_kind=ai.get("media_kind"))
        ai["media_url"] = None
        ai["media_kind"] = "none"
        await approval_bot.send_message(
            TELEGRAM_APPROVAL_CHAT_ID,
            "–û–∫, –±–µ–∑ –º–µ–¥–∏–∞. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ø–ª–∞–Ω –∏–ª–∏ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å?",
            reply_markup=kb_save_to_plan_or_post_now()
        )
        return

    # ---- SAVE/POST ----
    if data == "ai_save_to_plan":
        text = ai.get("text","").strip()
        tags = ai.get("hashtags") or []
        if tags:
            text = (text + "\n\n" + " ".join(tags)).strip()
        ai_log("plan.save.request", uid=uid, media_kind=ai.get("media_kind"), text=text)
        await _save_ai_to_plan(uid, text, ai.get("media_url"), ai.get("media_kind") or "none")
        post_data["text_en"] = text
        post_data["media_kind"] = ai.get("media_kind") or "none"
        post_data["media_ref"] = ai.get("media_url")
        await send_single_preview(post_data["text_en"], post_data["media_ref"], header="–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ø–ª–∞–Ω. –û–∂–∏–¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–∏.")
        _ai_reset(uid)
        return

    if data == "ai_post_now":
        text = ai.get("text","").strip()
        tags = ai.get("hashtags") or []
        if tags:
            text = (text + "\n\n" + " ".join(tags)).strip()
        ai_log("post.now", uid=uid, media_kind=ai.get("media_kind"), text=text)
        await publish_both(text, ai.get("media_url"), ai.get("media_kind") or "none")
        post_data["text_en"] = text
        post_data["media_kind"] = ai.get("media_kind") or "none"
        post_data["media_ref"] = ai.get("media_url")
        await send_single_preview(post_data["text_en"], post_data["media_ref"], header="–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä (–ø–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏)")
        _ai_reset(uid)
        return

# ------------------------------------------------------------------
# Message router ‚Äî –ü–û–î–†–û–ë–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –ò–ò-–®–ê–ì–û–í
# ------------------------------------------------------------------
async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    ai = _ai_get(uid)
    text = (getattr(update.message, "text", None) or getattr(update.message, "caption", None) or "").strip()
    ai_log("msg", uid=uid, mode=ai.get("mode"), has_photo=bool(getattr(update.message, "photo", None)),
           has_video=bool(getattr(update.message, "video", None)), has_doc=bool(getattr(update.message, "document", None)),
           text=text)

    # 1) –¢–µ–º–∞ –¥–ª—è –ò–ò
    if ai.get("mode") == "await_topic" and text:
        ai["topic"] = text
        ai_log("topic.set", uid=uid, topic=text)
        sys_prompt = (
            "You are a social media copywriter. Create a short, engaging post for X/Twitter: "
            "limit ~230 chars, 1‚Äì2 sentences, 1 emoji max, include a subtle hook, no hashtags."
        )
        gen = await gemini_generate_text(f"{sys_prompt}\n\nTopic: {text}", uid=uid)
        ai["text"] = gen
        ai["mode"] = "ready_text"
        ai_log("text.ready", uid=uid, text=gen)
        await approval_bot.send_message(
            TELEGRAM_APPROVAL_CHAT_ID,
            f"‚úçÔ∏è –í–∞—Ä–∏–∞–Ω—Ç —Ç–µ–∫—Å—Ç–∞:\n\n{gen}",
            reply_markup=kb_ai_text_actions()
        )
        return

    # 2) –†—É—á–Ω–∞—è –ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞
    if ai.get("mode") == "await_text_edit" and text:
        ai["text"] = text
        ai["mode"] = "ready_text"
        ai_log("text.edited", uid=uid, text=text)
        await approval_bot.send_message(
            TELEGRAM_APPROVAL_CHAT_ID,
            f"‚úÖ –¢–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª—ë–Ω.\n\n{text}",
            reply_markup=kb_ai_text_actions()
        )
        return

    # 3) –†—É—á–Ω—ã–µ —Ö—ç—à—Ç–µ–≥–∏
    if ai.get("mode") == "await_hashtags_input" and text:
        raw = re.sub(r"[,\u00A0;]+", " ", text)
        tags = [t for t in raw.split() if t]
        norm, seen = [], set()
        for t in tags:
            if not t.startswith("#") and not t.startswith("$"):
                t = "#" + t
            key = t.lower()
            if key in seen:
                continue
            seen.add(key); norm.append(t)
            if len(norm) >= 10:
                break
        ai["hashtags"] = norm
        ai["mode"] = "ready_text"
        ai_log("hashtags.manual", uid=uid, tags=" ".join(norm))
        await approval_bot.send_message(
            TELEGRAM_APPROVAL_CHAT_ID,
            f"üîñ –•—ç—à—Ç–µ–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:\n{' '.join(norm) if norm else '‚Äî'}",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚û°Ô∏è –ö –º–µ–¥–∏–∞", callback_data="ai_media_choose")]])
        )
        return

    # 4) ¬´–°–¥–µ–ª–∞–π —Å–∞–º¬ª ‚Äî –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    global manual_expected_until
    if manual_expected_until and datetime.now(TZ) <= manual_expected_until:
        media_url = None
        media_kind = "none"

        if getattr(update.message, "photo", None):
            fid = update.message.photo[-1].file_id
            media_url, media_kind = await _tg_file_to_github_url(fid, prefer_image=True)
        elif getattr(update.message, "video", None):
            fid = update.message.video.file_id
            media_url, media_kind = await _tg_file_to_github_url(fid, prefer_image=False)
        elif getattr(update.message, "document", None):
            doc = update.message.document
            fid = doc.file_id
            m = (doc.mime_type or "").lower()
            if m.startswith("image/"):
                media_url, media_kind = await _tg_file_to_github_url(fid, prefer_image=True)
            elif m.startswith("video/"):
                media_url, media_kind = await _tg_file_to_github_url(fid, prefer_image=False)

        post_data["text_en"] = text
        post_data["media_kind"] = media_kind
        post_data["media_ref"] = media_url

        ai_log("self_post.captured", uid=uid, media_kind=media_kind, url=media_url, text=text)
        await send_single_preview(post_data["text_en"], post_data["media_ref"], header="–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä (–°–¥–µ–ª–∞–π —Å–∞–º)")
        manual_expected_until = None
        return

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Å—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º
    if text:
        post_data["text_en"] = text
        ai_log("preview.update_text", uid=uid, text=text)
        await send_single_preview(post_data["text_en"], post_data.get("media_ref"), header="–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä (–æ–±–Ω–æ–≤–ª–µ–Ω–æ)")

# ------------------------------------------------------------------
# STARTUP / MAIN
# ------------------------------------------------------------------
async def on_start(app: Application):
    log.info("BOT.start")
    await approval_bot.send_message(
        TELEGRAM_APPROVAL_CHAT_ID,
        "ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!",
        reply_markup=get_start_menu()
    )

def main():
    app = (
        Application.builder()
        .token(TELEGRAM_BOT_TOKEN_APPROVAL)
        .post_init(on_start)
        .concurrent_updates(False)
        .build()
    )
    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è, –µ—Å–ª–∏ –µ—Å—Ç—å
    try:
        _planner_register(app)
    except Exception as e:
        log.warning(f"Planner register warn: {e}")

    app.add_handler(CallbackQueryHandler(callback_handler))
    app.add_handler(MessageHandler(filters.TEXT | filters.PHOTO | filters.VIDEO | filters.Document.IMAGE | filters.Document.VIDEO, message_handler))
    app.run_polling(poll_interval=0.8, timeout=10)

if __name__ == "__main__":
    main()