import os
import asyncio
import hashlib
import logging
import random
from datetime import datetime, timedelta

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, Bot
from telegram.ext import Application, CallbackQueryHandler, ContextTypes
import aiosqlite
import telegram.error

# –ü–æ–¥—Ä–æ–±–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –∏ AI-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: https://gptonline.ai/

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s %(levelname)s %(message)s')

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN_APPROVAL = os.getenv("TELEGRAM_BOT_TOKEN_APPROVAL")
TELEGRAM_APPROVAL_CHAT_ID  = os.getenv("TELEGRAM_APPROVAL_CHAT_ID")
TELEGRAM_CHANNEL_ID        = os.getenv("TELEGRAM_CHANNEL_ID")

if not all([TELEGRAM_BOT_TOKEN_APPROVAL, TELEGRAM_APPROVAL_CHAT_ID, TELEGRAM_CHANNEL_ID]):
    logging.error("–ù–µ –∑–∞–¥–∞–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN_APPROVAL, APPROVAL_CHAT_ID –∏–ª–∏ CHANNEL_ID")
    exit(1)

approval_bot = Bot(token=TELEGRAM_BOT_TOKEN_APPROVAL)

# –¢–µ—Å—Ç–æ–≤—ã–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏ –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Å—Ç–∞
test_images = [
    "https://upload.wikimedia.org/wikipedia/commons/4/47/PNG_transparency_demonstration_1.png",
    "https://upload.wikimedia.org/wikipedia/commons/3/3f/Fronalpstock_big.jpg",
    "https://upload.wikimedia.org/wikipedia/commons/1/17/Google-flutter-logo.png",
    "https://upload.wikimedia.org/wikipedia/commons/d/d6/Wp-w4-big.jpg"
]

post_data = {
    "text_ru":   "–ú–∞–π–Ω–∏–Ω–≥–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã —Å–Ω–æ–≤–∞ –≤ —Ñ–æ–∫—É—Å–µ...",
    "image_url": test_images[0],
    "timestamp": None,
    "post_id":   0
}
prev_data = post_data.copy()

# –°–µ—Ä–≤–∏—Å—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
do_not_disturb       = {"active": False}
pending_post         = {"active": False, "timer": None}
countdown_task: any  = None
last_action_time     = {}
approval_message_ids = {"photo": None, "timer": None}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
keyboard = InlineKeyboardMarkup([
    [InlineKeyboardButton("‚úÖ –ü–æ—Å—Ç", callback_data="approve")],
    [InlineKeyboardButton("üïí –ü–æ–¥—É–º–∞—Ç—å", callback_data="think")],
    [InlineKeyboardButton("üìù –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç", callback_data="regenerate")],
    [InlineKeyboardButton("üñºÔ∏è –ù–æ–≤–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞", callback_data="new_image")],
    [InlineKeyboardButton("üÜï –ü–æ—Å—Ç —Ü–µ–ª–∏–∫–æ–º", callback_data="new_post")],
    [InlineKeyboardButton("üí¨ –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å", callback_data="chat"),
     InlineKeyboardButton("üåô –ù–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å", callback_data="do_not_disturb")],
    [InlineKeyboardButton("‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–æ—Å—Ç", callback_data="restore_previous"),
     InlineKeyboardButton("üîö –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="end_day")]
])

DB_FILE = "post_history.db"


async def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SQLite –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ—Å—Ç–æ–≤."""
    async with aiosqlite.connect(DB_FILE) as db:
        await db.execute("""
            CREATE TABLE IF NOT EXISTS posts (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                text TEXT NOT NULL,
                timestamp TEXT NOT NULL,
                image_hash TEXT
            )
        """)
        await db.commit()
    logging.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")


def get_image_hash(url: str) -> str | None:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç SHA256-—Ö—ç—à —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ URL."""
    try:
        import requests
        r = requests.get(url, timeout=5)
        r.raise_for_status()
        return hashlib.sha256(r.content).hexdigest()
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ö–µ—à –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return None


async def save_post_to_history(text: str, image_url: str | None = None):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤."""
    image_hash = get_image_hash(image_url) if image_url else None
    async with aiosqlite.connect(DB_FILE) as db:
        await db.execute(
            "INSERT INTO posts (text, timestamp, image_hash) VALUES (?, ?, ?)",
            (text, datetime.now().isoformat(), image_hash)
        )
        await db.commit()
    logging.info("–ü–æ—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –∏—Å—Ç–æ—Ä–∏—é.")


async def is_duplicate(text: str, image_url: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—É–±–ª–∏–∫–æ–≤–∞–ª—Å—è –ª–∏ —É–∂–µ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."""
    img_hash = get_image_hash(image_url)
    async with aiosqlite.connect(DB_FILE) as db:
        cursor = await db.execute(
            "SELECT COUNT(*) FROM posts WHERE text = ? OR image_hash = ?",
            (text, img_hash)
        )
        row = await cursor.fetchone()
    return row[0] > 0


async def send_post_for_approval():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Å—Ç –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É."""
    if do_not_disturb["active"]:
        logging.info("–†–µ–∂–∏–º '–ù–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å' –∞–∫—Ç–∏–≤–µ–Ω ‚Äî –ø—Ä–æ–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏.")
        return

    if pending_post["active"]:
        logging.info("–£–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ—Å—Ç ‚Äî –æ–∂–∏–¥–∞–µ–º —Ä–µ—à–µ–Ω–∏—è.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç
    if await is_duplicate(post_data["text_ru"], post_data["image_url"]):
        await approval_bot.send_message(
            chat_id=TELEGRAM_APPROVAL_CHAT_ID,
            text="‚ö†Ô∏è –≠—Ç–æ—Ç –ø–æ—Å—Ç —É–∂–µ –ø—É–±–ª–∏–∫–æ–≤–∞–ª—Å—è —Ä–∞–Ω–µ–µ ‚Äî –æ—Ç–º–µ–Ω–µ–Ω–æ."
        )
        return

    # –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞
    post_data["timestamp"] = datetime.now()
    pending_post.update({"active": True, "timer": datetime.now()})
    try:
        photo_msg = await approval_bot.send_photo(
            chat_id=TELEGRAM_APPROVAL_CHAT_ID,
            photo=post_data["image_url"],
            caption=post_data["text_ru"],
            reply_markup=keyboard
        )
        approval_message_ids["photo"] = photo_msg.message_id

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á—ë—Ç 60 —Å–µ–∫—É–Ω–¥
        for sec in range(59, -1, -1):
            await asyncio.sleep(1)
            try:
                await approval_bot.edit_message_text(
                    chat_id=TELEGRAM_APPROVAL_CHAT_ID,
                    message_id=approval_message_ids["photo"],
                    text=f"‚è≥ –¢–∞–π–º–µ—Ä: {sec} —Å–µ–∫.",
                    reply_markup=keyboard
                )
            except Exception:
                pass

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ: {e}")
    finally:
        pending_post["active"] = False


async def publish_post():
    """–ü—É–±–ª–∏–∫—É–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–π –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ –∏—Å—Ç–æ—Ä–∏—é."""
    if not TELEGRAM_CHANNEL_ID:
        logging.error("TELEGRAM_CHANNEL_ID –Ω–µ –∑–∞–¥–∞–Ω.")
        return

    try:
        await approval_bot.send_photo(
            chat_id=TELEGRAM_CHANNEL_ID,
            photo=post_data["image_url"],
            caption=post_data["text_ru"]
        )
        logging.info("–ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª.")
    except telegram.error.RetryAfter as e:
        logging.warning(f"Rate limit –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏, –∂–¥—ë–º {e.retry_after} —Å–µ–∫.")
        await asyncio.sleep(e.retry_after)
        await approval_bot.send_photo(
            chat_id=TELEGRAM_CHANNEL_ID,
            photo=post_data["image_url"],
            caption=post_data["text_ru"]
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
        return

    await save_post_to_history(post_data["text_ru"], post_data["image_url"])
    pending_post["active"] = False


async def check_timer():
    """–ï—Å–ª–∏ –º–æ–¥–µ—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –∑–∞ 60 —Å–µ–∫ ‚Äî –ø—É–±–ª–∏–∫—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."""
    while True:
        await asyncio.sleep(5)
        if pending_post["active"] and pending_post["timer"]:
            if datetime.now() - pending_post["timer"] > timedelta(seconds=60):
                await approval_bot.send_message(
                    chat_id=TELEGRAM_APPROVAL_CHAT_ID,
                    text="‚åõ –í—Ä–µ–º—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∏—Å—Ç–µ–∫–ª–æ, –ø—É–±–ª–∏–∫—É—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
                )
                await publish_post()


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ –º–æ–¥–µ—Ä–∞—Ü–∏–∏."""
    global countdown_task, prev_data

    query = update.callback_query
    await query.answer()

    user_id = update.effective_user.id
    now = datetime.now()
    # –ê–Ω—Ç–∏—Å–ø–∞–º
    if user_id in last_action_time and (now - last_action_time[user_id]).total_seconds() < 15:
        await approval_bot.send_message(
            chat_id=TELEGRAM_APPROVAL_CHAT_ID,
            text="‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –¥–µ–π—Å—Ç–≤–∏–µ–º."
        )
        return
    last_action_time[user_id] = now

    action = query.data
    prev_data = post_data.copy()

    try:
        if action == "approve":
            await approval_bot.send_message(chat_id=TELEGRAM_APPROVAL_CHAT_ID, text="‚è≥ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞‚Ä¶")
            await publish_post()

        elif action == "think":
            if countdown_task and not countdown_task.done():
                countdown_task.cancel()
            pending_post["timer"] = datetime.now()
            await approval_bot.send_message(chat_id=TELEGRAM_APPROVAL_CHAT_ID, text="üßê –î—É–º–∞–µ–º –¥–∞–ª—å—à–µ‚Ä¶")

        elif action == "regenerate":
            await approval_bot.send_message(chat_id=TELEGRAM_APPROVAL_CHAT_ID, text="üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞‚Ä¶")
            post_data["text_ru"] = f"–ù–æ–≤—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç #{post_data['post_id'] + 1}"
            post_data["post_id"] += 1
            await send_post_for_approval()

        elif action == "new_image":
            await approval_bot.send_message(chat_id=TELEGRAM_APPROVAL_CHAT_ID, text="üîÑ –ü–æ–¥–±–∏—Ä–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É‚Ä¶")
            new_img = random.choice([img for img in test_images if img != post_data["image_url"]])
            post_data["image_url"] = new_img
            post_data["post_id"] += 1
            await send_post_for_approval()

        elif action == "new_post":
            await approval_bot.send_message(chat_id=TELEGRAM_APPROVAL_CHAT_ID, text="üÜï –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞‚Ä¶")
            post_data["text_ru"] = f"–ù–æ–≤—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç #{post_data['post_id'] + 1}"
            post_data["image_url"] = random.choice(test_images)
            post_data["post_id"] += 1
            await send_post_for_approval()

        elif action == "chat":
            await approval_bot.send_message(
                chat_id=TELEGRAM_APPROVAL_CHAT_ID,
                text="üí¨ –ù–∞—á–∏–Ω–∞–µ–º —á–∞—Ç:\n" + post_data["text_ru"]
            )

        elif action == "do_not_disturb":
            do_not_disturb["active"] = not do_not_disturb["active"]
            status = "–≤–∫–ª—é—á—ë–Ω" if do_not_disturb["active"] else "–≤—ã–∫–ª—é—á–µ–Ω"
            await approval_bot.send_message(
                chat_id=TELEGRAM_APPROVAL_CHAT_ID,
                text=f"üåô –†–µ–∂–∏–º ¬´–ù–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å¬ª {status}."
            )

        elif action == "restore_previous":
            post_data.update(prev_data)
            await approval_bot.send_message(chat_id=TELEGRAM_APPROVAL_CHAT_ID, text="‚Ü©Ô∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç.")
            await send_post_for_approval()

        elif action == "end_day":
            pending_post["active"] = False
            do_not_disturb["active"] = True
            await approval_bot.send_message(chat_id=TELEGRAM_APPROVAL_CHAT_ID, text="üîö –ó–∞–≤–µ—Ä—à–∏–ª–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ button_handler: {e}")
        await approval_bot.send_message(chat_id=TELEGRAM_APPROVAL_CHAT_ID, text=f"‚ùå –û—à–∏–±–∫–∞: {e}")


async def delayed_start(app: Application):
    await init_db()
    await send_post_for_approval()
    asyncio.create_task(check_timer())
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")


def main():
    app = Application.builder() \
        .token(TELEGRAM_BOT_TOKEN_APPROVAL) \
        .post_init(delayed_start) \
        .build()

    app.add_handler(CallbackQueryHandler(button_handler))
    app.run_polling()


if __name__ == "__main__":
    main()
