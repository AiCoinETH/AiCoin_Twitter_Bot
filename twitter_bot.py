# -*- coding: utf-8 -*-
import os
import asyncio
import hashlib
import logging
import random
import sys
import tempfile
import uuid
from datetime import datetime, timedelta, time as dt_time

import tweepy
import requests
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, Bot
from telegram.ext import Application, CallbackQueryHandler, ContextTypes, MessageHandler, filters
import aiosqlite
from github import Github

# -----------------------------------------------------------------------------
# –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
# -----------------------------------------------------------------------------
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s %(levelname)s %(funcName)s %(message)s'
)

# -----------------------------------------------------------------------------
# ENV
# -----------------------------------------------------------------------------
TELEGRAM_BOT_TOKEN_APPROVAL = os.getenv("TELEGRAM_BOT_TOKEN_APPROVAL")
TELEGRAM_APPROVAL_CHAT_ID_STR = os.getenv("TELEGRAM_APPROVAL_CHAT_ID")
TELEGRAM_BOT_TOKEN_CHANNEL = os.getenv("TELEGRAM_BOT_TOKEN_CHANNEL")
TELEGRAM_CHANNEL_USERNAME_ID = os.getenv("TELEGRAM_CHANNEL_USERNAME_ID")

TWITTER_API_KEY = os.getenv("TWITTER_API_KEY")
TWITTER_API_SECRET = os.getenv("TWITTER_API_SECRET")
TWITTER_ACCESS_TOKEN = os.getenv("TWITTER_ACCESS_TOKEN")
TWITTER_ACCESS_TOKEN_SECRET = os.getenv("TWITTER_ACCESS_TOKEN_SECRET")

GITHUB_TOKEN = os.getenv("ACTION_PAT_GITHUB")
GITHUB_REPO = os.getenv("ACTION_REPO_GITHUB")
GITHUB_IMAGE_PATH = "images_for_posts"

if not all([TELEGRAM_BOT_TOKEN_APPROVAL, TELEGRAM_APPROVAL_CHAT_ID_STR, TELEGRAM_BOT_TOKEN_CHANNEL, TELEGRAM_CHANNEL_USERNAME_ID]):
    logging.error("–ù–µ –∑–∞–¥–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Telegram!")
    sys.exit(1)
TELEGRAM_APPROVAL_CHAT_ID = int(TELEGRAM_APPROVAL_CHAT_ID_STR)
if not all([TWITTER_API_KEY, TWITTER_API_SECRET, TWITTER_ACCESS_TOKEN, TWITTER_ACCESS_TOKEN_SECRET]):
    logging.error("–ù–µ –∑–∞–¥–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Twitter!")
    sys.exit(1)
if not all([GITHUB_TOKEN, GITHUB_REPO]):
    logging.error("–ù–µ –∑–∞–¥–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è GitHub!")
    sys.exit(1)

# -----------------------------------------------------------------------------
# –ì–õ–û–ë–ê–õ–´–ï –û–ë–™–ï–ö–¢–´
# -----------------------------------------------------------------------------
approval_bot = Bot(token=TELEGRAM_BOT_TOKEN_APPROVAL)
channel_bot = Bot(token=TELEGRAM_BOT_TOKEN_CHANNEL)
approval_lock = asyncio.Lock()

DB_FILE = "post_history.db"

# —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ/—Ç–∞–π–º–µ—Ä—ã
scheduled_posts_per_day = 6
manual_posts_today = 0
TIMER_PUBLISH_DEFAULT = 900   # 15 –º–∏–Ω—É—Ç ‚Äî –∞–≤—Ç–æ —Ä–µ–∂–∏–º
TIMER_PUBLISH_EXTEND  = 900   # –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø—Ä–∏ –¥–µ–π—Å—Ç–≤–∏—è—Ö
AUTO_SHUTDOWN_AFTER_SECONDS = 600  # 10 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–Ω–æ–ø–∫–∏

# –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Å—ã–ª–æ–∫ –≤ Telegram ‚Äî –æ—Ç–∫–ª—é—á–∞–µ–º
DISABLE_WEB_PREVIEW = True

# -----------------------------------------------------------------------------
# –ó–ê–ì–õ–£–®–ö–ê –ù–ê –°–¢–ê–†–¢–ï (‚âà200 —Å–∏–º–≤–æ–ª–æ–≤) + –∫–∞—Ä—Ç–∏–Ω–∫–∞
# -----------------------------------------------------------------------------
PLACEHOLDER_TEXT = (
    "AiCoin ‚Äî –º–æ—Å—Ç –º–µ–∂–¥—É AI –∏ –∫—Ä–∏–ø—Ç–æ–π. –ú—ã –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã —Ä—ã–Ω–∫–∞ –≤ –ø–æ–Ω—è—Ç–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è: "
    "–∞–ª–µ—Ä—Ç—ã, –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, –∞–Ω–∞–ª–∏—Ç–∏–∫–∞. –ü–æ–¥–∫–ª—é—á–∞–π—Å—è –∫ –∫–æ–º—å—é–Ω–∏—Ç–∏, —Å–ª–µ–¥–∏ –∑–∞ –∞–ø–¥–µ–π—Ç–∞–º–∏ –∏ "
    "–±—É–¥—å –Ω–∞ —à–∞–≥ –≤–ø–µ—Ä–µ–¥–∏. Learn more: https://getaicoin.com/ Join Telegram: https://t.me/AiCoin_ETH"
)
PLACEHOLDER_IMAGE = "https://upload.wikimedia.org/wikipedia/commons/3/3f/Fronalpstock_big.jpg"

WELCOME_HASHTAGS = "#AiCoin #AI #crypto #—Ç—Ä–µ–Ω–¥—ã #–±–æ—Ç #–Ω–æ–≤–æ—Å—Ç–∏"
test_images = [
    "https://upload.wikimedia.org/wikipedia/commons/4/47/PNG_transparency_demonstration_1.png",
    "https://upload.wikimedia.org/wikipedia/commons/3/3f/Fronalpstock_big.jpg",
    "https://upload.wikimedia.org/wikipedia/commons/1/17/Google-flutter-logo.png",
    "https://upload.wikimedia.org/wikipedia/commons/d/d6/Wp-w4-big.jpg"
]
WELCOME_POST_RU = (
    "üöÄ –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–π.\n\n"
    "–ò–ò-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è, –Ω–æ–≤–æ—Å—Ç–∏, –∏–¥–µ–∏, –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç–∏–Ω–æ–∫ –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ."
)

post_data = {
    "text_ru": WELCOME_POST_RU,
    "text_en": WELCOME_POST_RU,
    "image_url": random.choice(test_images),
    "timestamp": None,
    "post_id": 0,
    "is_manual": False
}
prev_data = post_data.copy()

user_self_post = {}
pending_post = {
    "active": False,
    "timer": None,
    "timeout": TIMER_PUBLISH_DEFAULT
}
do_not_disturb = {"active": False}
last_action_time = {}
last_button_pressed_at = None  # –¥–ª—è –∞–≤—Ç–æ-–≤—ã–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç

# -----------------------------------------------------------------------------
# –ö–õ–ê–í–ò–ê–¢–£–†–´
# -----------------------------------------------------------------------------
def main_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –ü–æ—Å—Ç", callback_data="approve")],
        [InlineKeyboardButton("‚úçÔ∏è –°–¥–µ–ª–∞–π —Å–∞–º", callback_data="self_post")],
        [InlineKeyboardButton("üïí –ü–æ–¥—É–º–∞—Ç—å", callback_data="think")],
        [InlineKeyboardButton("üÜï –ù–æ–≤—ã–π –ø–æ—Å—Ç", callback_data="new_post")],
        [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit_post")],
        [InlineKeyboardButton("üí¨ –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å", callback_data="chat"),
         InlineKeyboardButton("üåô –ù–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å", callback_data="do_not_disturb")],
        [InlineKeyboardButton("‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–æ—Å—Ç", callback_data="restore_previous"),
         InlineKeyboardButton("üîö –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="end_day")],
        [InlineKeyboardButton("üî¥ –í—ã–∫–ª—é—á–∏—Ç—å", callback_data="shutdown_bot")],
    ])

def twitter_preview_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–ü–æ—Å—Ç –≤ Twitter", callback_data="post_twitter")],
        [InlineKeyboardButton("‚úçÔ∏è –°–¥–µ–ª–∞–π —Å–∞–º", callback_data="self_post")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_to_main")],
        [InlineKeyboardButton("üî¥ –í—ã–∫–ª—é—á–∏—Ç—å", callback_data="shutdown_bot")]
    ])

def telegram_preview_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–ü–æ—Å—Ç –≤ Telegram", callback_data="post_telegram")],
        [InlineKeyboardButton("‚úçÔ∏è –°–¥–µ–ª–∞–π —Å–∞–º", callback_data="self_post")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_to_main")],
        [InlineKeyboardButton("üî¥ –í—ã–∫–ª—é—á–∏—Ç—å", callback_data="shutdown_bot")]
    ])

def post_choice_keyboard():
    # —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è ‚Äî –µ—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –æ–¥–Ω–∏–º –Ω–∞–∂–∞—Ç–∏–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ –æ–±–∞
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–ü–æ—Å—Ç –≤ Twitter", callback_data="post_twitter")],
        [InlineKeyboardButton("–ü–æ—Å—Ç –≤ Telegram", callback_data="post_telegram")],
        [InlineKeyboardButton("–ü–û–°–¢!", callback_data="post_both")],
        [InlineKeyboardButton("‚úçÔ∏è –°–¥–µ–ª–∞–π —Å–∞–º", callback_data="self_post")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_to_main")],
        [InlineKeyboardButton("üî¥ –í—ã–∫–ª—é—á–∏—Ç—å", callback_data="shutdown_bot")]
    ])

def post_end_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üÜï –ù–æ–≤—ã–π –ø–æ—Å—Ç", callback_data="new_post_manual")],
        [InlineKeyboardButton("‚úçÔ∏è –°–¥–µ–ª–∞–π —Å–∞–º", callback_data="self_post")],
        [InlineKeyboardButton("üåô –ù–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å", callback_data="do_not_disturb")],
        [InlineKeyboardButton("üîö –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="end_day")],
        [InlineKeyboardButton("üí¨ –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å", callback_data="chat")],
        [InlineKeyboardButton("üî¥ –í—ã–∫–ª—é—á–∏—Ç—å", callback_data="shutdown_bot")]
    ])

# -----------------------------------------------------------------------------
# TWITTER/ GITHUB –ö–õ–ò–ï–ù–¢–´
# -----------------------------------------------------------------------------
def get_twitter_clients():
    client_v2 = tweepy.Client(
        consumer_key=TWITTER_API_KEY,
        consumer_secret=TWITTER_API_SECRET,
        access_token=TWITTER_ACCESS_TOKEN,
        access_token_secret=TWITTER_ACCESS_TOKEN_SECRET
    )
    api_v1 = tweepy.API(
        tweepy.OAuth1UserHandler(
            TWITTER_API_KEY,
            TWITTER_API_SECRET,
            TWITTER_ACCESS_TOKEN,
            TWITTER_ACCESS_TOKEN_SECRET
        )
    )
    return client_v2, api_v1

twitter_client_v2, twitter_api_v1 = get_twitter_clients()
github_client = Github(GITHUB_TOKEN)
github_repo = github_client.get_repo(GITHUB_REPO)

# -----------------------------------------------------------------------------
# –ü–û–°–¢–û–°–¢–†–û–ò–¢–ï–õ–ò (—Ç–≤–æ–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è)
# -----------------------------------------------------------------------------
TWITTER_SIGNATURE = " Learn more: https://getaicoin.com/ | Join Telegram: https://t.me/AiCoin_ETH #AiCoin #AI $Ai #crypto #blockchain #DeFi"
TELEGRAM_SIGNATURE_HTML = '\n\n<a href="https://getaicoin.com/">Website</a> | <a href="https://t.me/AiCoin_ETH">Join Telegram</a>'

def build_twitter_post(user_text_ru: str) -> str:
    """
    –û–±—Ä–µ–∑–∞–µ–º —Ç–∞–∫, —á—Ç–æ–±—ã –í–°–Å –≤–º–µ—Å—Ç–µ —Å –ø–æ–¥–ø–∏—Å—å—é —É–º–µ—â–∞–ª–æ—Å—å –≤ 280.
    (–û–±—Ä–µ–∑–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞ —ç—Ç–∞–ø–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞/–ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π.)
    """
    base = (user_text_ru or "").strip()
    max_len = 280
    spare = max_len - len(TWITTER_SIGNATURE)
    if spare < 0:
        # –µ—Å–ª–∏ –≤–Ω–µ–∑–∞–ø–Ω–æ –ø–æ–¥–ø–∏—Å—å –¥–ª–∏–Ω–Ω–µ–µ 280 ‚Äî –∂–µ—Å—Ç–∫–æ —Ç—Ä–æ–Ω–∫–∞–µ–º –ø–æ–¥–ø–∏—Å—å
        return TWITTER_SIGNATURE[:max_len]
    if len(base) > spare:
        base = base[:max(0, spare - 1)].rstrip() + "‚Ä¶"
    return base + TWITTER_SIGNATURE

def build_twitter_preview(user_text_ru: str) -> str:
    return build_twitter_post(user_text_ru)

def build_telegram_post(user_text_ru: str) -> str:
    """
    –¢–µ–ª–µ–≥—Ä–∞–º: –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ç–µ–ª–æ 750 —Å–∏–º–≤–æ–ª–∞–º–∏ (–±–µ–∑ –ø–æ–¥–ø–∏—Å–∏),
    –¥–æ–±–∞–≤–ª—è–µ–º HTML-–ø–æ–¥–ø–∏—Å—å. –ü—Ä–µ–≤—å—é —Å–∞–π—Ç–æ–≤ –æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ.
    """
    base = (user_text_ru or "").strip()
    if len(base) > 750:
        base = base[:749].rstrip() + "‚Ä¶"
    return base + TELEGRAM_SIGNATURE_HTML

def build_telegram_preview(user_text_ru: str) -> str:
    return build_telegram_post(user_text_ru)

# -----------------------------------------------------------------------------
# GITHUB HELPERS
# -----------------------------------------------------------------------------
def upload_image_to_github(image_path, filename):
    logging.info(f"upload_image_to_github: image_path={image_path}, filename={filename}")
    with open(image_path, "rb") as img_file:
        content = img_file.read()
    try:
        github_repo.create_file(f"{GITHUB_IMAGE_PATH}/{filename}", "upload image for post", content, branch="main")
        url = f"https://raw.githubusercontent.com/{GITHUB_REPO}/main/{GITHUB_IMAGE_PATH}/{filename}"
        logging.info(f"upload_image_to_github: –ó–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∞ GitHub: {url}")
        return url
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –Ω–∞ GitHub: {e}")
        return None

def delete_image_from_github(filename):
    try:
        file_path = f"{GITHUB_IMAGE_PATH}/{filename}"
        contents = github_repo.get_contents(file_path, ref="main")
        github_repo.delete_file(contents.path, "delete image after posting", contents.sha, branch="main")
        logging.info(f"delete_image_from_github: –£–¥–∞–ª—ë–Ω —Ñ–∞–π–ª —Å GitHub: {filename}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Å GitHub: {e}")
# -----------------------------------------------------------------------------
# –°–ö–ê–ß–ò–í–ê–ù–ò–ï –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô
# -----------------------------------------------------------------------------
async def download_image_async(url_or_file_id, is_telegram_file=False, bot=None, retries=3):
    if is_telegram_file:
        for attempt in range(retries):
            try:
                file = await bot.get_file(url_or_file_id)
                tmp_file = tempfile.NamedTemporaryFile(delete=False, suffix=".jpg")
                await file.download_to_drive(tmp_file.name)
                return tmp_file.name
            except Exception as e:
                logging.warning(f"download_image_async TG attempt {attempt+1} failed: {e}")
                await asyncio.sleep(1)
        raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –∏–∑ Telegram –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫")
    else:
        headers = {'User-Agent': 'Mozilla/5.0'}
        r = requests.get(url_or_file_id, headers=headers, timeout=15)
        r.raise_for_status()
        tmp_file = tempfile.NamedTemporaryFile(delete=False, suffix=".jpg")
        tmp_file.write(r.content)
        tmp_file.close()
        return tmp_file.name

async def save_image_and_get_github_url(image_path):
    filename = f"{uuid.uuid4().hex}.jpg"
    url = upload_image_to_github(image_path, filename)
    return url, filename

async def process_telegram_photo(file_id: str, bot: Bot) -> str:
    file_path = await download_image_async(file_id, is_telegram_file=True, bot=bot)
    url, filename = await save_image_and_get_github_url(file_path)
    try:
        os.remove(file_path)
    except Exception:
        pass
    if not url:
        raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –Ω–∞ GitHub")
    return url

# -----------------------------------------------------------------------------
# –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –û–¢–ü–†–ê–í–ö–ê –° –û–¢–ö–õ–Æ–ß–Å–ù–ù–´–ú WEB-PREVIEW
# -----------------------------------------------------------------------------
DISABLE_WEB_PREVIEW = True

async def safe_preview_post(bot, chat_id, text, image_url=None, reply_markup=None):
    try:
        if image_url:
            try:
                await send_photo_with_download(bot, chat_id, image_url, caption=text, reply_markup=reply_markup)
            except Exception as e:
                logging.warning(f"safe_preview_post: image send failed, fallback to text: {e}")
                await bot.send_message(chat_id=chat_id, text=text, reply_markup=reply_markup,
                                       disable_web_page_preview=DISABLE_WEB_PREVIEW, parse_mode="HTML")
        else:
            await bot.send_message(chat_id=chat_id, text=text, reply_markup=reply_markup,
                                   disable_web_page_preview=DISABLE_WEB_PREVIEW, parse_mode="HTML")
    except Exception as e:
        await bot.send_message(
            chat_id=chat_id,
            text="–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞. –í–æ—Ç —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:\n\n" + text,
            reply_markup=reply_markup,
            disable_web_page_preview=DISABLE_WEB_PREVIEW,
            parse_mode="HTML"
        )

# -----------------------------------------------------------------------------
# –û–¢–ü–†–ê–í–ö–ê –§–û–¢–û –° –ü–û–î–ö–ê–ß–ö–û–ô (–∏ fallback)
# -----------------------------------------------------------------------------
async def send_photo_with_download(bot, chat_id, url_or_file_id, caption=None, reply_markup=None):
    github_filename = None

    def is_valid_image_url(url):
        try:
            resp = requests.head(url, timeout=5)
            return resp.headers.get('Content-Type', '').startswith('image/')
        except Exception:
            return False

    try:
        if isinstance(url_or_file_id, str) and url_or_file_id.startswith("images_for_posts/") and os.path.exists(url_or_file_id):
            with open(url_or_file_id, "rb") as img:
                msg = await bot.send_photo(chat_id=chat_id, photo=img, caption=caption, parse_mode="HTML", reply_markup=reply_markup)
            return msg, None
        elif not str(url_or_file_id).startswith("http"):
            url = await process_telegram_photo(url_or_file_id, bot)
            github_filename = url.split('/')[-1]
            msg = await bot.send_photo(chat_id=chat_id, photo=url, caption=caption, parse_mode="HTML", reply_markup=reply_markup)
            return msg, github_filename
        else:
            if not is_valid_image_url(url_or_file_id):
                await bot.send_message(chat_id=chat_id, text=caption, parse_mode="HTML", reply_markup=reply_markup, disable_web_page_preview=DISABLE_WEB_PREVIEW)
                return None, None
            try:
                response = requests.get(url_or_file_id, timeout=10)
                response.raise_for_status()
                tmp_file = tempfile.NamedTemporaryFile(delete=False, suffix=".jpg")
                tmp_file.write(response.content)
                tmp_file.close()
                with open(tmp_file.name, "rb") as img:
                    msg = await bot.send_photo(chat_id=chat_id, photo=img, caption=caption, parse_mode="HTML", reply_markup=reply_markup)
                os.remove(tmp_file.name)
                return msg, None
            except Exception:
                await bot.send_message(chat_id=chat_id, text=caption, parse_mode="HTML", reply_markup=reply_markup, disable_web_page_preview=DISABLE_WEB_PREVIEW)
                return None, None
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ send_photo_with_download: {e}")
        await bot.send_message(chat_id=chat_id, text=caption, parse_mode="HTML", reply_markup=reply_markup, disable_web_page_preview=DISABLE_WEB_PREVIEW)
        return None, None

# -----------------------------------------------------------------------------
# –ë–ê–ó–ê –î–ê–ù–ù–´–•: init + –∑–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
# -----------------------------------------------------------------------------
async def init_db():
    async with aiosqlite.connect(DB_FILE) as db:
        # –•—Ä–∞–Ω–∏–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ö–µ—à —Ç–µ–∫—Å—Ç–∞ + —Ö–µ—à –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è,
        # –∏ –Ω–∞–∫—Ä—ã–≤–∞–µ–º –∏—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–Ω–¥–µ–∫—Å–æ–º.
        await db.execute("""
            CREATE TABLE IF NOT EXISTS posts (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                text TEXT NOT NULL,
                text_hash TEXT,
                timestamp TEXT NOT NULL,
                image_hash TEXT
            )
        """)
        await db.execute("""
            CREATE UNIQUE INDEX IF NOT EXISTS idx_posts_unique
            ON posts (COALESCE(text_hash, ''), COALESCE(image_hash, ''));
        """)
        await db.commit()

def normalize_text_for_hashing(text: str) -> str:
    if not text:
        return ""
    return " ".join(text.strip().lower().split())

def sha256_hex(data: bytes) -> str:
    return hashlib.sha256(data).hexdigest()

async def compute_image_hash_from_url(url: str) -> str | None:
    try:
        r = requests.get(url, timeout=10)
        r.raise_for_status()
        return sha256_hex(r.content)
    except Exception as e:
        logging.warning(f"compute_image_hash_from_url failed: {e}")
        return None

async def is_duplicate_post(text: str, image_url: str | None) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª—å –ø–æ (text_hash, image_hash). –¢–µ–∫—Å—Ç –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º.
    """
    text_norm = normalize_text_for_hashing(text)
    text_hash = sha256_hex(text_norm.encode("utf-8")) if text_norm else None
    image_hash = None
    if image_url:
        try:
            r = requests.get(image_url, timeout=10)
            r.raise_for_status()
            image_hash = sha256_hex(r.content)
        except Exception:
            image_hash = None

    async with aiosqlite.connect(DB_FILE) as db:
        q = "SELECT 1 FROM posts WHERE COALESCE(text_hash,'') = COALESCE(?, '') AND COALESCE(image_hash,'') = COALESCE(?, '') LIMIT 1"
        async with db.execute(q, (text_hash, image_hash)) as cur:
            row = await cur.fetchone()
            return row is not None

async def save_post_to_history(text, image_url=None):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ–º (–µ—Å–ª–∏ –µ—â—ë –Ω–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω) –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ (text_hash, image_hash).
    """
    text_norm = normalize_text_for_hashing(text)
    text_hash = sha256_hex(text_norm.encode("utf-8")) if text_norm else None

    image_hash = None
    if image_url:
        try:
            r = requests.get(image_url, timeout=10)
            r.raise_for_status()
            image_hash = sha256_hex(r.content)
        except Exception:
            image_hash = None

    async with aiosqlite.connect(DB_FILE) as db:
        try:
            await db.execute(
                "INSERT INTO posts (text, text_hash, timestamp, image_hash) VALUES (?, ?, ?, ?)",
                (text, text_hash, datetime.now().isoformat(), image_hash)
            )
            await db.commit()
        except Exception as e:
            # –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –¥—É–±–ª–∏–∫–∞—Ç ‚Äî –≥–∞—Å–∏–º –≤ –ª–æ–≥
            logging.warning(f"save_post_to_history: –≤–æ–∑–º–æ–∂–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏: {e}")

# -----------------------------------------------------------------------------
# –ü–†–ï–î–ü–†–û–°–ú–û–¢–†: –†–ê–ó–î–ï–õ–Å–ù–ù–´–ô (Twitter/Telegram ‚Äî –¥–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏—è)
# -----------------------------------------------------------------------------
async def preview_split(bot, chat_id, text, image_url=None):
    """
    1) –û—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥ Twitter (‚â§280 —Å –ø–æ–¥–ø–∏—Å—å—é)
    2) –û—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥ Telegram (‚â§750 + HTML –ø–æ–¥–ø–∏—Å—å)
    –£ —Å—Å—ã–ª–æ–∫ web-preview –≤—ã–∫–ª—é—á–µ–Ω (—á–µ—Ä–µ–∑ send_message fallback'–æ–º).
    """
    twitter_txt = build_twitter_preview(text)
    telegram_txt = build_telegram_preview(text)

    # Twitter –∫–∞—Ä—Ç–æ—á–∫–∞
    tw_markup = InlineKeyboardMarkup([
        [InlineKeyboardButton("–ü–æ—Å—Ç –≤ Twitter", callback_data="post_twitter")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_to_main"),
         InlineKeyboardButton("üî¥ –í—ã–∫–ª—é—á–∏—Ç—å", callback_data="shutdown_bot")],
        [InlineKeyboardButton("‚úçÔ∏è –°–¥–µ–ª–∞–π —Å–∞–º", callback_data="self_post")]
    ])
    try:
        if image_url:
            await send_photo_with_download(bot, chat_id, image_url, caption=f"<b>Twitter:</b>\n{twitter_txt}", reply_markup=tw_markup)
        else:
            await bot.send_message(chat_id=chat_id, text=f"<b>Twitter:</b>\n{twitter_txt}", parse_mode="HTML",
                                   reply_markup=tw_markup, disable_web_page_preview=True)
    except Exception:
        await bot.send_message(chat_id=chat_id, text=f"<b>Twitter:</b>\n{twitter_txt}", parse_mode="HTML",
                               reply_markup=tw_markup, disable_web_page_preview=True)

    # Telegram –∫–∞—Ä—Ç–æ—á–∫–∞
    tg_markup = InlineKeyboardMarkup([
        [InlineKeyboardButton("–ü–æ—Å—Ç –≤ Telegram", callback_data="post_telegram")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_to_main"),
         InlineKeyboardButton("üî¥ –í—ã–∫–ª—é—á–∏—Ç—å", callback_data="shutdown_bot")],
        [InlineKeyboardButton("‚úçÔ∏è –°–¥–µ–ª–∞–π —Å–∞–º", callback_data="self_post")]
    ])
    try:
        if image_url:
            await send_photo_with_download(bot, chat_id, image_url, caption=f"<b>Telegram:</b>\n{telegram_txt}", reply_markup=tg_markup)
        else:
            await bot.send_message(chat_id=chat_id, text=f"<b>Telegram:</b>\n{telegram_txt}", parse_mode="HTML",
                                   reply_markup=tg_markup, disable_web_page_preview=True)
    except Exception:
        await bot.send_message(chat_id=chat_id, text=f"<b>Telegram:</b>\n{telegram_txt}", parse_mode="HTML",
                               reply_markup=tg_markup, disable_web_page_preview=True)
# -----------------------------------------------------------------------------
# –ü–û–°–¢–†–û–ò–¢–ï–õ–ò –ü–†–ï–î–ü–†–û–°–ú–û–¢–†–û–í
# -----------------------------------------------------------------------------
def build_twitter_preview(text: str) -> str:
    """
    –û–±—Ä–µ–∑–∞–µ–º –ø–æ–¥ Twitter ‚â§280 —Å–∏–º–≤–æ–ª–æ–≤, –≤–∫–ª—é—á–∞—è —Å—Å—ã–ª–∫—É –∏ —Ö–µ—à—Ç–µ–≥–∏.
    """
    hashtags = "#AiCoin #AI $Ai #crypto #blockchain #DeFi"
    footer = f" Join Telegram: https://t.me/AiCoin_ETH {hashtags}"
    max_text_len = 280 - len(footer) - 1  # 1 —Å–∏–º–≤–æ–ª ‚Äî –ø—Ä–æ–±–µ–ª –ø–µ—Ä–µ–¥ —Ñ—É—Ç–µ—Ä–æ–º
    main_text = text.strip()
    if len(main_text) > max_text_len:
        main_text = main_text[:max_text_len - 1] + "‚Ä¶"
    return f"{main_text}{footer}"

def build_telegram_preview(text: str) -> str:
    """
    –û–±—Ä–µ–∑–∞–µ–º –ø–æ–¥ Telegram ‚â§750 —Å–∏–º–≤–æ–ª–æ–≤ + HTML-—Å—Å—ã–ª–∫–∞.
    """
    footer = ' <a href="https://t.me/AiCoin_ETH">Join Telegram</a>'
    max_text_len = 750 - len(footer) - 1
    main_text = text.strip()
    if len(main_text) > max_text_len:
        main_text = main_text[:max_text_len - 1] + "‚Ä¶"
    return f"{main_text}{footer}"

# -----------------------------------------------------------------------------
# –ü–£–ë–õ–ò–ö–ê–¶–ò–Ø –í TWITTER
# -----------------------------------------------------------------------------
def publish_post_to_twitter(text, image_url=None):
    github_filename = None
    try:
        media_ids = None
        file_path = None
        if image_url:
            if not str(image_url).startswith("http"):
                logging.error("Telegram file_id –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è Twitter –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.")
                return False
            r = requests.get(image_url, headers={'User-Agent': 'Mozilla/5.0'})
            r.raise_for_status()
            tmp = tempfile.NamedTemporaryFile(delete=False, suffix=".jpg")
            tmp.write(r.content)
            tmp.close()
            file_path = tmp.name

        if file_path:
            media = twitter_api_v1.media_upload(file_path)
            media_ids = [media.media_id_string]
            os.remove(file_path)

        twitter_client_v2.create_tweet(text=text, media_ids=media_ids)
        if image_url and image_url.startswith(f"https://raw.githubusercontent.com/{GITHUB_REPO}/main/{GITHUB_IMAGE_PATH}/"):
            github_filename = image_url.split('/')[-1]
            delete_image_from_github(github_filename)
        return True
    except Exception as e:
        pending_post["active"] = False
        logging.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Twitter: {e}")
        asyncio.create_task(approval_bot.send_message(
            chat_id=TELEGRAM_APPROVAL_CHAT_ID,
            text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Twitter: {e}"
        ))
        if github_filename:
            delete_image_from_github(github_filename)
        return False

# -----------------------------------------------------------------------------
# –ü–£–ë–õ–ò–ö–ê–¶–ò–Ø –í TELEGRAM –ö–ê–ù–ê–õ
# -----------------------------------------------------------------------------
async def publish_post_to_telegram(text, image_url=None):
    try:
        if image_url:
            await send_photo_with_download(channel_bot, TELEGRAM_CHANNEL_USERNAME_ID, image_url, caption=text)
        else:
            await channel_bot.send_message(chat_id=TELEGRAM_CHANNEL_USERNAME_ID, text=text,
                                           parse_mode="HTML", disable_web_page_preview=True)
        return True
    except Exception as e:
        pending_post["active"] = False
        logging.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Telegram: {e}")
        await approval_bot.send_message(
            chat_id=TELEGRAM_APPROVAL_CHAT_ID,
            text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Telegram: {e}"
        )
        return False

# -----------------------------------------------------------------------------
# –°–¢–ê–†–¢–û–í–û–ï –ú–ï–ù–Æ
# -----------------------------------------------------------------------------
def get_start_menu():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üì¢ –ü–æ—Å—Ç", callback_data="post_menu")],
        [InlineKeyboardButton("‚úçÔ∏è –°–¥–µ–ª–∞–π —Å–∞–º", callback_data="self_post")],
        [InlineKeyboardButton("üÜï –ù–æ–≤—ã–π –ø–æ—Å—Ç (–ò–ò)", callback_data="new_post_ai")],
        [InlineKeyboardButton("üîï –ù–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å", callback_data="do_not_disturb")],
        [InlineKeyboardButton("‚è≥ –ó–∞–≤–µ—Ä—à–∏—Ç—å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="end_day")],
        [InlineKeyboardButton("üî¥ –í—ã–∫–ª—é—á–∏—Ç—å", callback_data="shutdown_bot")]
    ])

# -----------------------------------------------------------------------------
# –ó–ê–ì–õ–£–®–ö–ê –ü–†–ò –°–¢–ê–†–¢–ï
# -----------------------------------------------------------------------------
async def send_start_placeholder():
    placeholders = [
        ("üöÄ AiCoin ‚Äî —ç—Ç–æ —Ä–µ–≤–æ–ª—é—Ü–∏—è –≤ –º–∏—Ä–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∏ AI! –ü–æ–¥–∫–ª—é—á–∞–π—Ç–µ—Å—å –∫ –Ω–∞–º —Å–µ–≥–æ–¥–Ω—è –∏ –±—É–¥—å—Ç–µ –≤ —Ç—Ä–µ–Ω–¥–µ –±—É–¥—É—â–µ–≥–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤.", "images_for_posts/placeholder1.jpg"),
        ("üí° AiCoin –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –±–ª–æ–∫—á–µ–π–Ω –∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∫—Ä–∏–ø—Ç–æ–º–∏—Ä —É–º–Ω–µ–µ –∏ –±—ã—Å—Ç—Ä–µ–µ.", "images_for_posts/placeholder2.jpg"),
        ("üåê –° AiCoin –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º, –∫–æ—Ç–æ—Ä—ã–µ –º–µ–Ω—è—é—Ç –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã.", "images_for_posts/placeholder3.jpg"),
        ("üî• –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ AiCoin ‚Äî —Å—Ç–∞–Ω—å—Ç–µ —á–∞—Å—Ç—å—é –Ω–æ–≤–æ–π —ç—Ä—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç!", "images_for_posts/placeholder4.jpg")
    ]
    text, img_path = random.choice(placeholders)
    try:
        if os.path.exists(img_path):
            with open(img_path, "rb") as img:
                await approval_bot.send_photo(chat_id=TELEGRAM_APPROVAL_CHAT_ID, photo=img, caption=text)
        else:
            await approval_bot.send_message(chat_id=TELEGRAM_APPROVAL_CHAT_ID, text=text)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–≥–ª—É—à–∫–∏: {e}")

# -----------------------------------------------------------------------------
# CALLBACK HANDLERS
# -----------------------------------------------------------------------------
async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data
    await query.answer()

    if data == "shutdown_bot":
        await approval_bot.send_message(chat_id=TELEGRAM_APPROVAL_CHAT_ID, text="üî¥ –ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω.")
        asyncio.get_event_loop().stop()
        return

    elif data == "post_menu":
        await approval_bot.send_message(chat_id=TELEGRAM_APPROVAL_CHAT_ID,
                                        text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:",
                                        reply_markup=InlineKeyboardMarkup([
                                            [InlineKeyboardButton("üê¶ Twitter + Telegram", callback_data="post_both")],
                                            [InlineKeyboardButton("üê¶ –¢–æ–ª—å–∫–æ Twitter", callback_data="post_twitter")],
                                            [InlineKeyboardButton("üí¨ –¢–æ–ª—å–∫–æ Telegram", callback_data="post_telegram")],
                                            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="cancel_to_main")]
                                        ]))

    elif data == "self_post":
        pending_post["active"] = True
        await approval_bot.send_message(chat_id=TELEGRAM_APPROVAL_CHAT_ID,
                                        text="‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –¥–ª—è —Ä—É—á–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:",
                                        reply_markup=InlineKeyboardMarkup([
                                            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="cancel_to_main")]
                                        ]))
# -----------------------------------------------------------------------------
# –õ–û–ì–ò–ö–ê –†–£–ß–ù–û–ì–û –í–í–û–î–ê –¢–ï–ö–°–¢–ê/–§–û–¢–û (–ø–æ—Å–ª–µ "–°–¥–µ–ª–∞–π —Å–∞–º")
# -----------------------------------------------------------------------------
async def handle_manual_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª —Ç–µ–∫—Å—Ç/—Ñ–æ—Ç–æ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è '–°–¥–µ–ª–∞–π —Å–∞–º'.
    –ì–æ—Ç–æ–≤–∏–º –ø–æ—Å—Ç_data –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–¥–µ–ª—å–Ω—ã–π –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä (Twitter/Telegram).
    """
    text = update.message.text or update.message.caption or ""
    image_url = None

    # –µ—Å–ª–∏ –ø—Ä–∏—Å–ª–∞–ª–∏ —Ñ–æ—Ç–æ ‚Äî –≥—Ä—É–∑–∏–º –≤ GitHub –∏ –ø–æ–ª—É—á–∞–µ–º URL
    if update.message.photo:
        try:
            image_url = await process_telegram_photo(update.message.photo[-1].file_id, approval_bot)
        except Exception as e:
            logging.warning(f"handle_manual_input: cannot process photo: {e}")
            await approval_bot.send_message(
                chat_id=TELEGRAM_APPROVAL_CHAT_ID,
                text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ç–æ. –ü—Ä–∏—à–ª–∏—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç."
            )
            return

    # –∑–∞–ø–æ–ª–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
    post_data["text_ru"] = text if text else post_data["text_ru"]
    post_data["image_url"] = image_url if image_url else post_data.get("image_url", None)
    post_data["post_id"] += 1
    post_data["is_manual"] = True

    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º split-–ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä (Twitter/Telegram –¥–≤—É–º—è —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏)
    try:
        await preview_split(approval_bot, TELEGRAM_APPROVAL_CHAT_ID, post_data["text_ru"], image_url=post_data["image_url"])
        # –ø–∞–Ω–µ–ª—å –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–¥ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º–∏
        await approval_bot.send_message(
            chat_id=TELEGRAM_APPROVAL_CHAT_ID,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üê¶ –ü–æ—Å—Ç –≤ Twitter", callback_data="post_twitter")],
                [InlineKeyboardButton("üí¨ –ü–æ—Å—Ç –≤ Telegram", callback_data="post_telegram")],
                [InlineKeyboardButton("üê¶üí¨ –ü–û–°–¢ –≤ –æ–±–∞", callback_data="post_both")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_to_main")],
                [InlineKeyboardButton("üî¥ –í—ã–∫–ª—é—á–∏—Ç—å", callback_data="shutdown_bot")]
            ])
        )
        pending_post.update({"active": True, "timer": datetime.now(), "timeout": TIMER_PUBLISH_EXTEND})
    except Exception as e:
        logging.error(f"handle_manual_input preview failed: {e}")
        await approval_bot.send_message(
            chat_id=TELEGRAM_APPROVAL_CHAT_ID,
            text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
        )


# -----------------------------------------------------------------------------
# –ò–ò-–∑–∞–≥–ª—É—à–∫–∞ "–ù–æ–≤—ã–π –ø–æ—Å—Ç (–ò–ò)" (–º–µ—Å—Ç–æ –¥–ª—è –±—É–¥—É—â–µ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏)
# -----------------------------------------------------------------------------
async def new_post_ai():
    """
    –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–≥–ª—É—à–∫—É —Ç–µ–∫—Å—Ç–∞ ~200 —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Ä–∞–Ω–¥–æ–º–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É.
    –ó–¥–µ—Å—å –ø–æ–∑–∂–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è –ò–ò-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è.
    """
    samples = [
        "üöÄ AiCoin –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç —Å–∏–ª—É –±–ª–æ–∫—á–µ–π–Ω–∞ –∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞. "
        "–ü—Ä–æ–∑—Ä–∞—á–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã –∏ —É–º–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è ‚Äî –≤—Å—ë –≤ –æ–¥–Ω–æ–π —ç–∫–æ—Å–∏—Å—Ç–µ–º–µ. "
        "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤—É –∏ –±—É–¥—å –Ω–∞ —à–∞–≥ –≤–ø–µ—Ä–µ–¥–∏! üí°",

        "üî• AiCoin ‚Äî —ç—Ç–æ –±—É–¥—É—â–µ–µ –¥–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤ —Å –ò–ò-–Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π. "
        "–ë—ã—Å—Ç—Ä–µ–µ, —É–º–Ω–µ–µ, –±–µ–∑–æ–ø–∞—Å–Ω–µ–µ. –†–∞—Å—à–∏—Ä—è–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–≤–æ–µ–≥–æ –∫—Ä–∏–ø—Ç–æ–ø–æ—Ä—Ç—Ñ–µ–ª—è –≤–º–µ—Å—Ç–µ —Å –Ω–∞–º–∏. "
        "–°–µ–≥–æ–¥–Ω—è ‚Äî –∏–¥–µ–∞–ª—å–Ω—ã–π –¥–µ–Ω—å, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!",

        "üåê –° AiCoin –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –±–æ–ª—å—à–µ: —É–º–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã, –º–æ—â–Ω—ã–π –±–ª–æ–∫—á–µ–π–Ω, "
        "–∏–Ω—Ç—É–∏—Ç–∏–≤–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã. –î–µ–ª–∞–π —Å–¥–µ–ª–∫–∏ —É–≤–µ—Ä–µ–Ω–Ω–µ–µ –∏ –¥–≤–∏–≥–∞–π—Å—è –∫ —Ü–µ–ª—è–º –±—ã—Å—Ç—Ä–µ–µ! ‚ö°Ô∏è",

        "üíé AiCoin ‚Äî —Ç–æ–∫–µ–Ω –Ω–æ–≤–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è. –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å, –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä–æ—Å—Ç–∞. "
        "–°–ª–µ–¥–∏ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –¥–≤–∏–∂–µ–Ω–∏—é ‚Äî –≤–º–µ—Å—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –±—É–¥—É—â–µ–µ DeFi!"
    ]
    text = random.choice(samples)
    img = random.choice(test_images)
    post_data["text_ru"] = text
    post_data["image_url"] = img
    post_data["post_id"] += 1
    post_data["is_manual"] = False  # —ç—Ç–æ –∞–≤—Ç–æ—Å—Ü–µ–Ω–∞—Ä–∏–π (–ò–ò), –Ω–æ –±–µ–∑ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–∫–ª—é—á–µ–Ω–∏—è ‚Äî —Ä–µ—à–∞–µ–º –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    return text, img


# -----------------------------------------------------------------------------
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï: –ø—É–±–ª–∏–∫–∞—Ü–∏—è –∏ —Å—Ç–∞—Ç—É—Å—ã + –∞–Ω—Ç–∏–¥—É–±–ª–∏–∫–∞—Ç—ã
# -----------------------------------------------------------------------------
async def publish_flow(publish_tg: bool, publish_tw: bool):
    """
    –û–±—â–∏–π –ø–æ—Ç–æ–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å –∞–Ω—Ç–∏–¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏ –∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏.
    - –°—Ç—Ä–æ–∏–º —Ç–µ–∫—Å—Ç—ã (–æ–±—Ä–µ–∑–∫–∞ —É–∂–µ –≤–Ω—É—Ç—Ä–∏ –±–∏–ª–¥-–ø—Ä–æ—Ü–µ–¥—É—Ä)
    - –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏ –≤ –ë–î (–ø–æ –∏—Ç–æ–≥–æ–≤–æ–º—É —Ç–µ–∫—Å—Ç—É –∏ image_hash)
    - –ü—É–±–ª–∏–∫—É–µ–º
    - –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î (–µ—Å–ª–∏ —É—Å–ø–µ—Ö)
    - –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é
    - –í –ê–í–¢–û—Ä–µ–∂–∏–º–µ –≤—ã–∫–ª—é—á–∞–µ–º—Å—è —Å—Ä–∞–∑—É; –≤ —Ä—É—á–Ω–æ–º ‚Äî –∞–≤—Ç–æ–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    """
    base_text = (post_data.get("text_ru") or "").strip()
    img = post_data.get("image_url")

    twitter_text = build_twitter_preview(base_text)
    telegram_text = build_telegram_preview(base_text)

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–µ–π –¥–ª—è –∫–∞–∂–¥–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –ø–æ —Å–≤–æ–µ–º—É —Ñ–∏–Ω–∞–ª—å–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É
    tg_status = None
    tw_status = None

    if publish_tg:
        if await is_duplicate_post(telegram_text, img):
            await approval_bot.send_message(TELEGRAM_APPROVAL_CHAT_ID, "‚ö†Ô∏è –î—É–±–ª–∏–∫–∞—Ç –¥–ª—è Telegram. –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞.")
            tg_status = False
        else:
            tg_status = await publish_post_to_telegram(text=telegram_text, image_url=img)
            if tg_status:
                await save_post_to_history(telegram_text, img)

    if publish_tw:
        if await is_duplicate_post(twitter_text, img):
            await approval_bot.send_message(TELEGRAM_APPROVAL_CHAT_ID, "‚ö†Ô∏è –î—É–±–ª–∏–∫–∞—Ç –¥–ª—è Twitter. –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞.")
            tw_status = False
        else:
            tw_status = publish_post_to_twitter(twitter_text, img)
            if tw_status:
                await save_post_to_history(twitter_text, img)

    # —Å—Ç–∞—Ç—É—Å—ã
    if publish_tg:
        await approval_bot.send_message(
            TELEGRAM_APPROVAL_CHAT_ID,
            "‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram!" if tg_status else "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram."
        )
    if publish_tw:
        await approval_bot.send_message(
            TELEGRAM_APPROVAL_CHAT_ID,
            "‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Twitter!" if tw_status else "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Twitter."
        )

    # –º–µ–Ω—é –ø–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    await approval_bot.send_message(TELEGRAM_APPROVAL_CHAT_ID, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_start_menu())

    # –ª–æ–≥–∏–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏—è:
    # - –µ—Å–ª–∏ —ç—Ç–æ –∞–≤—Ç–æ—Å—Ü–µ–Ω–∞—Ä–∏–π (post_data['is_manual'] == False) –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ ‚Äî –≤—ã–∫–ª—é—á–∞–µ–º—Å—è —Å—Ä–∞–∑—É (–∞–≤—Ç–æ—Ä–µ–∂–∏–º)
    # - –µ—Å–ª–∏ —Ä—É—á–Ω–æ–π ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º –≤–∫–ª—é—á–µ–Ω–Ω—ã–º; —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    if not post_data.get("is_manual"):
        shutdown_bot_and_exit()


# -----------------------------------------------------------------------------
# CALLBACK HANDLERS (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ)
# -----------------------------------------------------------------------------
async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data
    await query.answer()

    # —Ñ–∏–∫—Å–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –∞–≤—Ç–æ–æ—Ç–∫–ª—é—á–µ–Ω–∏—è
    global last_button_pressed_at
    last_button_pressed_at = datetime.now()

    if data == "cancel_to_main":
        await approval_bot.send_message(
            chat_id=TELEGRAM_APPROVAL_CHAT_ID,
            text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=get_start_menu()
        )
        return

    if data == "new_post_ai":
        # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–≥–ª—É—à–∫—É –ò–ò
        text, img = await new_post_ai()
        # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º split-–ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏ —Å—Ä–∞–∑—É –º–µ–Ω—é
        await preview_split(approval_bot, TELEGRAM_APPROVAL_CHAT_ID, text, image_url=img)
        await approval_bot.send_message(
            chat_id=TELEGRAM_APPROVAL_CHAT_ID,
            text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=get_start_menu()
        )
        pending_post.update({"active": True, "timer": datetime.now(), "timeout": TIMER_PUBLISH_DEFAULT})
        return

    if data in ("post_twitter", "post_telegram", "post_both"):
        # –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ –≤—ã–±–æ—Ä—É
        publish_tg = data in ("post_telegram", "post_both")
        publish_tw = data in ("post_twitter", "post_both")
        pending_post["active"] = False
        await publish_flow(publish_tg=publish_tg, publish_tw=publish_tw)
        return

    # —É–∂–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –≤—ã—à–µ –≤–µ—Ç–∫–∏: post_menu, self_post, shutdown ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–¥–µ—Å—å
    # (–æ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏ callback_handler)


# -----------------------------------------------------------------------------
# MESSAGE HANDLER
# -----------------------------------------------------------------------------
async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ï—Å–ª–∏ –º—ã –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ '–°–¥–µ–ª–∞–π —Å–∞–º' ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Ä—É—á–Ω–æ–π –≤–≤–æ–¥.
    –ò–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Å–∫–∞–∑–∫–∞ –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é.
    """
    # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—à—ë–ª –ø–æ—Å–ª–µ –∫–Ω–æ–ø–∫–∏ self_post ‚Äî –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ä—É—á–Ω–æ–π –ø–æ—Ç–æ–∫
    if pending_post.get("active"):
        return await handle_manual_input(update, context)

    # –∏–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
    await approval_bot.send_message(
        chat_id=TELEGRAM_APPROVAL_CHAT_ID,
        text="–û—Ç–∫—Ä–æ–π –º–µ–Ω—é –∏ –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_start_menu()
    )


# -----------------------------------------------------------------------------
# STARTUP: –æ–¥–Ω–∞ –∑–∞–≥–ª—É—à–∫–∞ (~200 —Å–∏–º–≤–æ–ª–æ–≤ + –∫–∞—Ä—Ç–∏–Ω–∫–∞) –∏ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é
# -----------------------------------------------------------------------------
async def on_start(app: Application):
    await init_db()
    # —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏: —Ç–∞–π–º–µ—Ä –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ (–¥–ª—è –∞–≤—Ç–æ—Ä–µ–∂–∏–º–∞) –∏ –∞–≤—Ç–æ–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    asyncio.create_task(check_timer())
    asyncio.create_task(check_inactivity_shutdown())

    # –æ–¥–Ω–∞ –∑–∞–≥–ª—É—à–∫–∞
    await send_start_placeholder()

    # –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é —Å—Ä–∞–∑—É
    await approval_bot.send_message(
        chat_id=TELEGRAM_APPROVAL_CHAT_ID,
        text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_start_menu()
    )
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ó–∞–≥–ª—É—à–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–∫–∞–∑–∞–Ω–æ.")


# -----------------------------------------------------------------------------
# MAIN (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤)
# -----------------------------------------------------------------------------
def main():
    app = Application.builder()\
        .token(TELEGRAM_BOT_TOKEN_APPROVAL)\
        .post_init(on_start)\
        .build()

    # –∫–Ω–æ–ø–∫–∏
    app.add_handler(CallbackQueryHandler(callback_handler))
    # —Å–æ–æ–±—â–µ–Ω–∏—è (—Ç–µ–∫—Å—Ç/—Ñ–æ—Ç–æ)
    app.add_handler(MessageHandler(filters.TEXT | filters.PHOTO, message_handler))

    app.run_polling(poll_interval=0.12, timeout=1)


# -----------------------------------------------------------------------------
# ENTRYPOINT
# -----------------------------------------------------------------------------
if __name__ == "__main__":
    main()
