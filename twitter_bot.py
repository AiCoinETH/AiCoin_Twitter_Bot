import os
import time
import openai
import random
import requests
from io import BytesIO
from datetime import datetime
from telegram import Bot, InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, MessageHandler, Filters
import tweepy

# === –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
TELEGRAM_BOT_TOKEN_APPROVAL = os.getenv("TELEGRAM_BOT_TOKEN_APPROVAL")
TELEGRAM_APPROVAL_CHAT_ID = os.getenv("TELEGRAM_APPROVAL_CHAT_ID")
TELEGRAM_APPROVAL_USER_ID = int(os.getenv("TELEGRAM_APPROVAL_USER_ID", "0"))
TELEGRAM_CHANNEL_ID = os.getenv("TELEGRAM_CHANNEL_ID")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
PINATA_JWT = os.getenv("PINATA_JWT")
TWITTER_API_KEY = os.getenv("API_KEY")
TWITTER_API_SECRET = os.getenv("API_SECRET")
ACCESS_TOKEN = os.getenv("ACCESS_TOKEN")
ACCESS_SECRET = os.getenv("ACCESS_SECRET")

openai.api_key = OPENAI_API_KEY
approval_bot = Bot(token=TELEGRAM_BOT_TOKEN_APPROVAL)

auth = tweepy.OAuth1UserHandler(TWITTER_API_KEY, TWITTER_API_SECRET, ACCESS_TOKEN, ACCESS_SECRET)
twitter_api = tweepy.API(auth)

state = {"mode": None, "generated": {}, "custom_prompt": None}

def generate_ai_post():
    topic = "AI coin and decentralized intelligence in Web3"
    img_prompt = f"futuristic ai crypto coin, glowing neural circuits, cyberpunk style, concept of {topic}"
    text_prompt = f"–ù–∞–ø–∏—à–∏ –Ω–æ–≤–æ—Å—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ AI —Ç–æ–∫–µ–Ω–æ–≤, –≤–∫–ª—é—á–∞—è $Ai Coin, –≤ 2025 –≥–æ–¥—É. –°–¥–µ–ª–∞–π –µ—ë –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–π, –Ω–æ –∫—Ä–∞—Ç–∫–æ–π, –∫–∞–∫ –Ω–æ–≤–æ—Å—Ç—å –∏–ª–∏ –æ–±–∑–æ—Ä."

    image = openai.Image.create(prompt=img_prompt, n=1, size="1024x1024")["data"][0]["url"]
    text = openai.ChatCompletion.create(
        model="gpt-4",
        messages=[{"role": "user", "content": text_prompt}],
        max_tokens=300
    )["choices"][0]["message"]["content"].strip()
    return topic, text, image

def build_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ OK", callback_data="approve"), InlineKeyboardButton("‚ùå –û—Ç–∫–∞–∑", callback_data="reject")],
        [InlineKeyboardButton("üïê –ü–æ–¥—É–º–∞—Ç—å", callback_data="wait"), InlineKeyboardButton("üîÅ –ó–∞–Ω–æ–≤–æ", callback_data="regen")],
        [InlineKeyboardButton("üìù –ó–∞–¥–∞—Ç—å —Ç–µ–º—É", callback_data="custom"), InlineKeyboardButton("ü§ñ –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å", callback_data="chat")],
        [InlineKeyboardButton("üñº –ù–æ–≤–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞", callback_data="regen_image")]
    ])

def send_post_for_approval(context):
    topic, text, image_url = generate_ai_post()
    state["generated"] = {"topic": topic, "text": text, "image": image_url}
    approval_bot.send_photo(
        chat_id=TELEGRAM_APPROVAL_CHAT_ID,
        photo=image_url,
        caption=f"""üß† *–ù–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å (—Ä—É—Å—Å–∫–∏–π –≤–∞—Ä–∏–∞–Ω—Ç)*

{text}""",
        parse_mode="Markdown",
        reply_markup=build_keyboard()
    )
    context.job_queue.run_once(timeout_autopost, 180)

def timeout_autopost(context):
    post_final(context, auto=True)

def post_final(context, auto=False):
    data = state["generated"]
    if not data:
        return
    full_text = data["text"]
    image_url = data["image"]
    translated = openai.ChatCompletion.create(
        model="gpt-4",
        messages=[{"role": "user", "content": f"–ü–µ—Ä–µ–≤–µ–¥–∏ –Ω–æ–≤–æ—Å—Ç—å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫:

{full_text}"}],
        max_tokens=300
    )["choices"][0]["message"]["content"].strip()

    short_text = translated[:240] + "\n\nMore: t.me/AiCoin_ETH\n#AiCoin #AI"
    img_data = requests.get(image_url).content
    img_bytes = BytesIO(img_data)

    try:
        twitter_api.update_status_with_media(filename="post.png", file=img_bytes, status=short_text)
    except Exception as e:
        approval_bot.send_message(chat_id=TELEGRAM_APPROVAL_CHAT_ID, text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Twitter: {e}")
    try:
        approval_bot.send_photo(chat_id=TELEGRAM_CHANNEL_ID, photo=img_bytes, caption=translated)
    except Exception as e:
        approval_bot.send_message(chat_id=TELEGRAM_APPROVAL_CHAT_ID, text=f"‚ùå –û—à–∏–±–∫–∞ Telegram-–ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
    approval_bot.send_message(chat_id=TELEGRAM_APPROVAL_CHAT_ID, text="‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω.")

def handle_callback(update: Update, context):
    query = update.callback_query
    user_id = query.from_user.id
    if user_id != TELEGRAM_APPROVAL_USER_ID:
        query.answer("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å –ø–æ—Å—Ç—ã.", show_alert=True)
        return

    data = query.data
    if data == "approve":
        post_final(context)
    elif data == "reject":
        query.message.reply_text("‚ùå –ü–æ—Å—Ç –æ—Ç–∫–ª–æ–Ω—ë–Ω. –û–±—Å—É–∂–¥–∞–µ–º –¥–∞–ª—å—à–µ...")
    elif data == "wait":
        query.message.reply_text("üïê –û–∂–∏–¥–∞—é –¥–∞–ª—å—à–µ. –£ —Ç–µ–±—è –µ—Å—Ç—å –µ—â—ë 3 –º–∏–Ω—É—Ç—ã.")
    elif data == "regen":
        send_post_for_approval(context)
    elif data == "custom":
        state["mode"] = "custom"
        query.message.reply_text("üìù –í–≤–µ–¥–∏ —Ç–µ–º—É, –ø–æ –∫–æ—Ç–æ—Ä–æ–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å:")
    elif data == "chat":
        state["mode"] = "chat"
        query.message.reply_text("ü§ñ –ì–æ—Ç–æ–≤ –æ–±—Å—É–¥–∏—Ç—å. –ù–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å.")
    elif data == "regen_image":
        topic = state["generated"].get("topic", "AI and crypto")
        image = openai.Image.create(prompt=topic, n=1, size="1024x1024")["data"][0]["url"]
        state["generated"]["image"] = image
        approval_bot.send_photo(chat_id=TELEGRAM_APPROVAL_CHAT_ID, photo=image, caption="üñº –ù–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞")

def handle_message(update: Update, context):
    if update.effective_user.id != TELEGRAM_APPROVAL_USER_ID:
        return
    if state["mode"] == "custom":
        topic = update.message.text
        text_prompt = f"–ù–∞–ø–∏—à–∏ –Ω–æ–≤–æ—Å—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –Ω–∞ —Ç–µ–º—É: {topic}"
        img_prompt = topic
        image = openai.Image.create(prompt=img_prompt, n=1, size="1024x1024")["data"][0]["url"]
        text = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[{"role": "user", "content": text_prompt}],
            max_tokens=300
        )["choices"][0]["message"]["content"].strip()
        state["generated"] = {"topic": topic, "text": text, "image": image}
        approval_bot.send_photo(
            chat_id=TELEGRAM_APPROVAL_CHAT_ID,
            photo=image,
            caption=f"""üìù –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–æ —Ç–≤–æ–µ–π —Ç–µ–º–µ:

{text}""",
            parse_mode="Markdown",
            reply_markup=build_keyboard()
        )
        state["mode"] = None
    elif state["mode"] == "chat":
        prompt = update.message.text
        reply = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=300
        )["choices"][0]["message"]["content"].strip()
        update.message.reply_text(reply)

def main():
    updater = Updater(token=TELEGRAM_BOT_TOKEN_APPROVAL, use_context=True)
    dp = updater.dispatcher
    dp.add_handler(CommandHandler("start", send_post_for_approval))
    dp.add_handler(CallbackQueryHandler(handle_callback))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))
    updater.start_polling()
    updater.idle()
