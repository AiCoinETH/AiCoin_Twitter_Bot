# -*- coding: utf-8 -*-
from __future__ import annotations
import os
from dataclasses import dataclass
from datetime import datetime
from typing import Optional, Dict, Any, List, Callable, Awaitable, Tuple

from telegram import (
    InlineKeyboardButton, InlineKeyboardMarkup, Update, Message, CallbackQuery
)
from telegram.ext import (
    Application, CallbackQueryHandler, MessageHandler, ContextTypes, filters
)
from telegram.error import BadRequest

# -------------------------
# –ü–ê–ú–Ø–¢–¨ –°–ï–°–°–ò–ô –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê
# -------------------------
USER_STATE: Dict[int, Dict[str, Any]] = {}

@dataclass
class PlannedItem:
    topic: Optional[str] = None
    text: Optional[str] = None
    time_str: Optional[str] = None
    image_url: Optional[str] = None
    step: str = "idle"   # idle | waiting_topic | waiting_text | waiting_time | confirm | editing_*
    mode: str = "none"   # plan | gen

# -------------------------
# –†–ï–ì–ò–°–¢–†–ê–¢–û–† –ò–ò-–ì–ï–ù–ï–†–ê–¢–û–†–ê (–ß–¢–û–ë–´ –ù–ï –ò–ú–ü–û–†–¢–ò–†–û–í–ê–¢–¨ twitter_bot)
# -------------------------
_AI_GEN_FN: Optional[
    Callable[[str], Awaitable[Tuple[str, List[str], Optional[str]]]]
] = None

def set_ai_generator(fn: Callable[[str], Awaitable[Tuple[str, List[str], Optional[str]]]]):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞: set_ai_generator(ai_generate_content_en)"""
    global _AI_GEN_FN
    _AI_GEN_FN = fn

# -------------------------
# –ö–ù–û–ü–ö–ò
# -------------------------
def main_planner_menu() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üß≠ –ü–ª–∞–Ω –ò–ò (—Ç–µ–º—ã‚Üí–≤—Ä–µ–º—è)", callback_data="OPEN_PLAN_MODE")],
        [InlineKeyboardButton("‚ú® –†—É—á–Ω–æ–π –ø–ª–∞–Ω (—Ç–µ–∫—Å—Ç/—Ñ–æ—Ç–æ‚Üí–≤—Ä–µ–º—è)", callback_data="OPEN_GEN_MODE")],
        [InlineKeyboardButton("ü§ñ –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –ø–ª–∞–Ω –ò–ò —Å–µ–π—á–∞—Å", callback_data="PLAN_AI_BUILD_NOW")],
        [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="PLAN_LIST_TODAY")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –í –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="BACK_MAIN_MENU")]
    ])

def step_buttons_done_add_cancel(prefix: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data=f"{prefix}DONE"),
            InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data=f"{prefix}ADD_MORE"),
        ],
        [InlineKeyboardButton("‚¨ÖÔ∏è –í –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="BACK_MAIN_MENU")],
        [InlineKeyboardButton("‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞ (—à–∞–≥ –Ω–∞–∑–∞–¥)", callback_data="STEP_BACK")],
    ])

def cancel_only() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚¨ÖÔ∏è –í –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="BACK_MAIN_MENU")],
        [InlineKeyboardButton("‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", callback_data="STEP_BACK")]
    ])

def _item_actions_kb(pid: int, mode: str) -> InlineKeyboardMarkup:
    # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏, —É–¥–∞–ª–µ–Ω–∏–µ, –∏ ¬´–ò–ò –∑–∞–ø–æ–ª–Ω–∏—Ç —Ç–µ–∫—Å—Ç, —Å–æ—Ö—Ä–∞–Ω–∏–≤ —Ç–µ–º—É/–≤—Ä–µ–º—è¬ª (—Ç–æ–ª—å–∫–æ –¥–ª—è PLAN)
    rows = [
        [
            InlineKeyboardButton("‚úèÔ∏è –ü—Ä–∞–≤–∏—Ç—å", callback_data=f"EDIT_ITEM:{pid}"),
            InlineKeyboardButton("‚è∞ –í—Ä–µ–º—è", callback_data=f"EDIT_TIME:{pid}"),
        ],
        [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"DEL_ITEM:{pid}")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="PLAN_LIST_TODAY")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="BACK_MAIN_MENU")],
    ]
    if mode == "plan":
        rows.insert(1, [InlineKeyboardButton("ü§ñ –ò–ò: –¥–æ–ø–æ–ª–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç (—Å–æ—Ö—Ä. —Ç–µ–º—É/–≤—Ä–µ–º—è)", callback_data=f"AI_FILL_TEXT:{pid}")])
    return InlineKeyboardMarkup(rows)

def _edit_fields_kb(pid: int, mode: str) -> InlineKeyboardMarkup:
    rows = []
    if mode == "plan":
        rows.append([InlineKeyboardButton("üìù –¢–µ–º–∞", callback_data=f"EDIT_FIELD:topic:{pid}")])
        rows.append([InlineKeyboardButton("‚úçÔ∏è –¢–µ–∫—Å—Ç (—Ä—É—á–Ω.)", callback_data=f"EDIT_FIELD:text:{pid}")])
    else:
        rows.append([InlineKeyboardButton("‚úçÔ∏è –¢–µ–∫—Å—Ç", callback_data=f"EDIT_FIELD:text:{pid}")])
    rows.append([InlineKeyboardButton("üñº –ö–∞—Ä—Ç–∏–Ω–∫–∞", callback_data=f"EDIT_FIELD:image:{pid}")])
    rows.append([InlineKeyboardButton("‚è∞ –í—Ä–µ–º—è", callback_data=f"EDIT_FIELD:time:{pid}")])
    rows.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"ITEM_MENU:{pid}")])
    return InlineKeyboardMarkup(rows)

# -------------------------
# –•–ï–õ–ü–ï–†–´ –°–û–°–¢–û–Ø–ù–ò–Ø
# -------------------------
def _ensure(uid: int) -> PlannedItem:
    row = USER_STATE.get(uid) or {}
    if "current" not in row:
        row["current"] = PlannedItem()
        row.setdefault("items", [])
        row.setdefault("seq", 0)
        USER_STATE[uid] = row
    return row["current"]

def _new_pid(uid: int) -> int:
    USER_STATE[uid]["seq"] = USER_STATE[uid].get("seq", 0) + 1
    return USER_STATE[uid]["seq"]

def _find_item(uid: int, pid: int) -> Optional[Dict[str, Any]]:
    for it in USER_STATE.get(uid, {}).get("items", []):
        if it.get("id") == pid:
            return it
    return None

def _push(uid: int, item: PlannedItem):
    pid = _new_pid(uid)
    USER_STATE[uid]["items"].append({
        "id": pid,
        "mode": item.mode,
        "topic": item.topic,
        "text": item.text,
        "time": item.time_str,
        "image_url": item.image_url,
        "added_at": datetime.utcnow().isoformat() + "Z"
    })
    USER_STATE[uid]["current"] = PlannedItem()  # —Å–±—Ä–æ—Å

def _can_finalize(item: PlannedItem) -> bool:
    if not item.time_str:
        return False
    if item.mode == "plan":
        return bool(item.topic)
    if item.mode == "gen":
        return bool(item.text or item.image_url)
    return False

# -------------------------
# –ë–ï–ó–û–ü–ê–°–ù–û–ï –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï
# -------------------------
async def _safe_edit_or_send(q: CallbackQuery, text: str,
                             reply_markup: Optional[InlineKeyboardMarkup]=None,
                             parse_mode: Optional[str]="HTML"):
    m: Message = q.message
    try:
        if m and (m.text is not None):
            return await q.edit_message_text(text=text, reply_markup=reply_markup, parse_mode=parse_mode,
                                             disable_web_page_preview=True)
        if m and (m.caption is not None):
            return await q.edit_message_caption(caption=text, reply_markup=reply_markup, parse_mode=parse_mode)
        raise BadRequest("no editable text/caption")
    except BadRequest:
        return await m.chat.send_message(text=text, reply_markup=reply_markup, parse_mode=parse_mode,
                                         disable_web_page_preview=True)

# -------------------------
# OPENAI: –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ù–û–°–¢–ò/–ö–í–û–¢–´
# -------------------------
def _openai_key_present() -> bool:
    return bool(os.getenv("OPENAI_API_KEY"))

async def _openai_usable() -> bool:
    if not _openai_key_present():
        return False
    try:
        from openai import OpenAI
        client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
        client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role":"user","content":"ping"}],
            max_tokens=1,
            temperature=0.0,
        )
        return True
    except Exception as e:
        msg = str(e).lower()
        if "insufficient_quota" in msg or "too many requests" in msg or "429" in msg:
            return False
        return False

# -------------------------
# –û–¢–ö–†–´–¢–ò–ï –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê
# -------------------------
async def open_planner(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    uid = update.effective_user.id
    USER_STATE.setdefault(uid, {"mode": "none", "items": [], "current": PlannedItem(), "seq": 0})
    if q:
        await _safe_edit_or_send(q, "–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: –≤—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º.", reply_markup=main_planner_menu())
    else:
        await context.bot.send_message(update.effective_chat.id, "–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: –≤—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º.",
                                       reply_markup=main_planner_menu())

# -------------------------
# –ü–†–û–°–¨–ë–´/–®–ê–ì–ò
# -------------------------
async def _ask_topic(q: CallbackQuery, mode: str):
    uid = q.from_user.id
    st = _ensure(uid)
    st.mode = mode
    st.step = "waiting_topic"
    await _safe_edit_or_send(
        q,
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É (–∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ) –¥–ª—è –ø–æ—Å—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n"
        "–ú–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ.",
        reply_markup=cancel_only()
    )

async def _ask_text(q: CallbackQuery):
    uid = q.from_user.id
    st = _ensure(uid)
    st.mode = "gen"
    st.step = "waiting_text"
    await _safe_edit_or_send(
        q,
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ—Å—Ç–∞ (—Ç–µ–∫—Å—Ç) –∏/–∏–ª–∏ —Ñ–æ—Ç–æ (–º–æ–∂–Ω–æ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º ‚Äî —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é).",
        reply_markup=cancel_only()
    )

async def _ask_time(q: CallbackQuery):
    uid = q.from_user.id
    st = _ensure(uid)
    st.step = "waiting_time"
    await _safe_edit_or_send(
        q, "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>HH:MM</b> –ø–æ –ö–∏–µ–≤—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30).",
        reply_markup=cancel_only()
    )

async def _show_ready_add_cancel(q: CallbackQuery):
    uid = q.from_user.id
    st = _ensure(uid)
    prefix = "PLAN_" if st.mode == "plan" else "GEN_"
    lines: List[str] = []
    if st.mode == "plan":
        lines.append(f"–¢–µ–º–∞: {st.topic or '‚Äî'}")
    else:
        text = (st.text or "‚Äî").strip()
        if len(text) > 400:
            text = text[:397] + "‚Ä¶"
        lines.append(f"–¢–µ–∫—Å—Ç: {text}")
        lines.append(f"–ö–∞—Ä—Ç–∏–Ω–∫–∞: {'–µ—Å—Ç—å' if st.image_url else '–Ω–µ—Ç'}")
    lines.append(f"–í—Ä–µ–º—è: {st.time_str or '‚Äî'}")
    await _safe_edit_or_send(
        q, "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:\n" + "\n".join(lines),
        reply_markup=step_buttons_done_add_cancel(prefix)
    )

# -------------------------
# CALLBACKS (—Ä–µ–∂–∏–º—ã –∏ —Å–ø–∏—Å–æ–∫)
# -------------------------
async def cb_open_plan_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await _openai_usable():
        q = update.callback_query
        await _safe_edit_or_send(
            q,
            "‚ùó <b>OpenAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –∫–≤–æ—Ç–∞ –∏—Å—á–µ—Ä–ø–∞–Ω–∞</b>.\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤—Ä—É—á–Ω—É—é (–∫–Ω–æ–ø–∫–∞ –Ω–∏–∂–µ) ‚Äî –≤—Å—ë —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è –∏ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚ú® –†—É—á–Ω–æ–π –ø–ª–∞–Ω (—Ç–µ–∫—Å—Ç/—Ñ–æ—Ç–æ‚Üí–≤—Ä–µ–º—è)", callback_data="OPEN_GEN_MODE")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –í –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="BACK_MAIN_MENU")]
            ])
        )
        return
    await _ask_topic(update.callback_query, mode="plan")

async def cb_open_gen_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await _ask_text(update.callback_query)

def _format_item_row(i: int, it: Dict[str, Any]) -> str:
    mode = it.get("mode")
    time_s = it.get("time") or "‚Äî"
    if mode == "plan":
        return f"{i}) [PLAN] {time_s} ‚Äî {it.get('topic')}"
    txt = (it.get("text") or "").strip()
    if len(txt) > 60:
        txt = txt[:57] + "‚Ä¶"
    img = "üñº" if it.get("image_url") else "‚Äî"
    return f"{i}) [GEN] {time_s} ‚Äî {txt} {img}"

def _list_kb(uid: int) -> InlineKeyboardMarkup:
    # –ö–Ω–æ–ø–∫–∏ ¬´—É–ø—Ä–∞–≤–ª–µ–Ω–∏—è¬ª –ø–æ –∫–∞–∂–¥–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É
    items = USER_STATE.get(uid, {}).get("items", [])
    rows: List[List[InlineKeyboardButton]] = []
    for it in items:
        pid = it["id"]
        title = f"#{pid}"
        rows.append([
            InlineKeyboardButton(f"‚öôÔ∏è {title}", callback_data=f"ITEM_MENU:{pid}"),
            InlineKeyboardButton("üóë", callback_data=f"DEL_ITEM:{pid}"),
        ])
    rows.append([InlineKeyboardButton("‚¨ÖÔ∏è –í –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="BACK_MAIN_MENU")])
    return InlineKeyboardMarkup(rows)

async def cb_list_today(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    uid = q.from_user.id
    items = USER_STATE.get(uid, {}).get("items", [])
    if not items:
        return await _safe_edit_or_send(q, "–ù–∞ —Å–µ–≥–æ–¥–Ω—è –ø–æ–∫–∞ –ø—É—Å—Ç–æ.", reply_markup=main_planner_menu())
    lines = []
    for i, it in enumerate(items, 1):
        lines.append(_format_item_row(i, it))
    await _safe_edit_or_send(q, "–°–ø–∏—Å–æ–∫ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n" + "\n".join(lines), reply_markup=_list_kb(uid))

# -------------------------
# ITEM MENU / EDIT / DELETE / TIME / AI_FILL
# -------------------------
async def cb_item_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    uid = q.from_user.id
    try:
        pid = int(q.data.split(":", 1)[1])
    except Exception:
        return await _safe_edit_or_send(q, "–û—à–∏–±–∫–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞.", reply_markup=main_planner_menu())
    it = _find_item(uid, pid)
    if not it:
        return await _safe_edit_or_send(q, "–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=main_planner_menu())

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –∏ –¥–µ–π—Å—Ç–≤–∏—è
    lines = [
        f"ID: {pid}",
        f"–†–µ–∂–∏–º: {it['mode']}",
        f"–í—Ä–µ–º—è: {it.get('time') or '‚Äî'}",
    ]
    if it["mode"] == "plan":
        lines.append(f"–¢–µ–º–∞: {it.get('topic') or '‚Äî'}")
        txt = (it.get("text") or "‚Äî").strip()
        if len(txt) > 300: txt = txt[:297] + "‚Ä¶"
        lines.append(f"–¢–µ–∫—Å—Ç: {txt}")
    else:
        txt = (it.get("text") or "‚Äî").strip()
        if len(txt) > 300: txt = txt[:297] + "‚Ä¶"
        lines.append(f"–¢–µ–∫—Å—Ç: {txt}")
        lines.append(f"–ö–∞—Ä—Ç–∏–Ω–∫–∞: {'–µ—Å—Ç—å' if it.get('image_url') else '–Ω–µ—Ç'}")

    return await _safe_edit_or_send(q, "\n".join(lines), reply_markup=_item_actions_kb(pid, it["mode"]))

async def cb_delete_item(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    uid = q.from_user.id
    try:
        pid = int(q.data.split(":", 1)[1])
    except Exception:
        return await _safe_edit_or_send(q, "–û—à–∏–±–∫–∞ ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=main_planner_menu())
    items = USER_STATE.get(uid, {}).get("items", [])
    USER_STATE[uid]["items"] = [x for x in items if x.get("id") != pid]
    return await _safe_edit_or_send(q, f"–£–¥–∞–ª–µ–Ω–æ #{pid}.", reply_markup=main_planner_menu())

async def cb_edit_time_shortcut(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ë—ã—Å—Ç—Ä–∞—è —Å–º–µ–Ω–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ –º–µ–Ω—é —ç–ª–µ–º–µ–Ω—Ç–∞
    q = update.callback_query
    uid = q.from_user.id
    try:
        pid = int(q.data.split(":", 1)[1])
    except Exception:
        return await _safe_edit_or_send(q, "–û—à–∏–±–∫–∞ ID.", reply_markup=main_planner_menu())
    st = _ensure(uid)
    st.step = "editing_time"
    st.mode = "edit"
    USER_STATE[uid]["edit_target"] = pid
    return await _safe_edit_or_send(q, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>HH:MM</b> (–ö–∏–µ–≤).", reply_markup=InlineKeyboardMarkup([
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —ç–ª–µ–º–µ–Ω—Ç—É", callback_data=f"ITEM_MENU:{pid}")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="BACK_MAIN_MENU")]
    ]))

async def cb_edit_item(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    uid = q.from_user.id
    try:
        pid = int(q.data.split(":", 1)[1])
    except Exception:
        return await _safe_edit_or_send(q, "–û—à–∏–±–∫–∞ ID –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.", reply_markup=main_planner_menu())
    it = _find_item(uid, pid)
    if not it:
        return await _safe_edit_or_send(q, "–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=main_planner_menu())
    return await _safe_edit_or_send(q, "–ß—Ç–æ –º–µ–Ω—è–µ–º?", reply_markup=_edit_fields_kb(pid, it["mode"]))

async def cb_edit_field(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    uid = q.from_user.id
    try:
        _, field, pid_s = q.data.split(":", 2)
        pid = int(pid_s)
    except Exception:
        return await _safe_edit_or_send(q, "–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è.", reply_markup=main_planner_menu())

    it = _find_item(uid, pid)
    if not it:
        return await _safe_edit_or_send(q, "–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=main_planner_menu())

    st = _ensure(uid)
    USER_STATE[uid]["edit_target"] = pid

    if field == "topic":
        st.step = "editing_topic"
        return await _safe_edit_or_send(q, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ç–µ–º—É:", reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é", callback_data=f"EDIT_ITEM:{pid}")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="BACK_MAIN_MENU")]
        ]))
    if field == "text":
        st.step = "editing_text"
        return await _safe_edit_or_send(q, "–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:", reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é", callback_data=f"EDIT_ITEM:{pid}")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="BACK_MAIN_MENU")]
        ]))
    if field == "image":
        st.step = "editing_image"
        return await _safe_edit_or_send(q, "–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É <i>(–∫–∞–∫ —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç)</i> –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ¬´—É–¥–∞–ª–∏—Ç—å¬ª, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É.", reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é", callback_data=f"EDIT_ITEM:{pid}")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="BACK_MAIN_MENU")]
        ]))
    if field == "time":
        st.step = "editing_time"
        return await _safe_edit_or_send(q, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>HH:MM</b> (–ö–∏–µ–≤).", reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é", callback_data=f"EDIT_ITEM:{pid}")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="BACK_MAIN_MENU")]
        ]))
    return await _safe_edit_or_send(q, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø–æ–ª–µ.", reply_markup=main_planner_menu())

async def cb_ai_fill_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ò–ò-–¥–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ (–æ—Å—Ç–∞–≤–ª—è—è —Ç–µ–º—É/–≤—Ä–µ–º—è)
    q = update.callback_query
    uid = q.from_user.id
    try:
        pid = int(q.data.split(":", 1)[1])
    except Exception:
        return await _safe_edit_or_send(q, "–û—à–∏–±–∫–∞ ID.", reply_markup=main_planner_menu())
    it = _find_item(uid, pid)
    if not it:
        return await _safe_edit_or_send(q, "–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=main_planner_menu())
    if it["mode"] != "plan":
        return await _safe_edit_or_send(q, "–ò–ò-–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–∑–∏—Ü–∏–π —Å —Ä–µ–∂–∏–º–æ–º PLAN.", reply_markup=main_planner_menu())
    if _AI_GEN_FN is None:
        return await _safe_edit_or_send(q, "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ò–ò –Ω–µ –ø–æ–¥–∫–ª—é—á—ë–Ω.", reply_markup=main_planner_menu())

    topic = it.get("topic") or ""
    try:
        text_en, tags, img = await _AI_GEN_FN(topic)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç (+—Ö—ç—à—Ç–µ–≥–∏ –≤ —Å–∞–º–æ–º —Ç–µ–∫—Å—Ç–µ ‚Äî –∫–∞–∫ –≤ –∫–Ω–æ–ø–∫–µ AI build now), –∫–∞—Ä—Ç–∏–Ω–∫—É ‚Äî —Ç–æ–∂–µ
        it["text"] = f"{text_en}\n\n{' '.join(tags)}".strip()
        if img:
            it["image_url"] = img
        return await _safe_edit_or_send(q, "–¢–µ–∫—Å—Ç –¥–æ–ø–æ–ª–Ω—ë–Ω –ò–ò (—Ç–µ–º–∞/–≤—Ä–µ–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã).", reply_markup=_item_actions_kb(pid, it["mode"]))
    except Exception:
        return await _safe_edit_or_send(q, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –ò–ò.", reply_markup=_item_actions_kb(pid, it["mode"]))

# -------------------------
# CALLBACKS (—à–∞–≥–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è)
# -------------------------
async def cb_step_back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    uid = q.from_user.id
    USER_STATE.setdefault(uid, {"items": [], "current": PlannedItem(), "seq": 0})
    USER_STATE[uid]["current"] = PlannedItem()  # –ø–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞
    USER_STATE[uid].pop("edit_target", None)
    await _safe_edit_or_send(q, "–û—Ç–º–µ–Ω–µ–Ω–æ. –ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=main_planner_menu())

async def cb_back_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await _safe_edit_or_send(
        q, "–û—Ç–∫—Ä—ã–≤–∞—é –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é‚Ä¶",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –û—Ç–∫—Ä—ã—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="cancel_to_main")]])
    )

async def _finalize_current_and_back(q: CallbackQuery):
    uid = q.from_user.id
    st = _ensure(uid)
    if _can_finalize(st):
        _push(uid, st)
        return await _safe_edit_or_send(q, "–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=main_planner_menu())
    else:
        return await _safe_edit_or_send(q, "–ù–µ—á–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å ‚Äî –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –≤—Ä–µ–º—è.", reply_markup=main_planner_menu())

async def cb_plan_done(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await _finalize_current_and_back(update.callback_query)

async def cb_gen_done(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await _finalize_current_and_back(update.callback_query)

async def cb_add_more(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    uid = q.from_user.id
    st = _ensure(uid)
    if _can_finalize(st):
        _push(uid, st)
    if st.mode == "plan":
        await _ask_topic(q, mode="plan")
    else:
        await _ask_text(q)

# ---- AI build now (–ø–æ –∫–Ω–æ–ø–∫–µ) ----
async def cb_plan_ai_build_now(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    if not await _openai_usable():
        return await _safe_edit_or_send(
            q,
            "‚ùó <b>OpenAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –∫–≤–æ—Ç–∞ –∏—Å—á–µ—Ä–ø–∞–Ω–∞</b> ‚Äî –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å, —á—Ç–æ–±—ã —Å—Ç—Ä–æ–∏—Ç—å –ò–ò-–ø–ª–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n\n"
            "–ü–æ–∫–∞ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ –≤ —Ä—É—á–Ω–æ–π —Ä–µ–∂–∏–º:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚ú® –†—É—á–Ω–æ–π –ø–ª–∞–Ω (—Ç–µ–∫—Å—Ç/—Ñ–æ—Ç–æ‚Üí–≤—Ä–µ–º—è)", callback_data="OPEN_GEN_MODE")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –í –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="BACK_MAIN_MENU")]
            ])
        )

    if _AI_GEN_FN is None:
        return await _safe_edit_or_send(
            q,
            "–ù–µ –ø–æ–¥–∫–ª—é—á—ë–Ω –ò–ò-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞. –ú–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤—Ä—É—á–Ω—É—é.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚ú® –†—É—á–Ω–æ–π –ø–ª–∞–Ω (—Ç–µ–∫—Å—Ç/—Ñ–æ—Ç–æ‚Üí–≤—Ä–µ–º—è)", callback_data="OPEN_GEN_MODE")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –í –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="BACK_MAIN_MENU")]
            ])
        )

    topics = [
        "Utility, community growth and joining early.",
        "Governance & on-chain voting with AI analysis.",
        "AI-powered proposals and speed of execution."
    ]
    uid = q.from_user.id
    _ensure(uid)

    created = 0
    for th in topics:
        try:
            text_en, tags, img = await _AI_GEN_FN(th)
            USER_STATE[uid]["items"].append({
                "id": _new_pid(uid),
                "mode": "plan",
                "topic": th,
                "text": f"{text_en}\n\n{' '.join(tags)}".strip(),
                "time": None,
                "image_url": img,
                "added_at": datetime.utcnow().isoformat() + "Z"
            })
            created += 1
        except Exception:
            pass

    if created == 0:
        return await _safe_edit_or_send(
            q,
            "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä—É—á–Ω–æ–π —Ä–µ–∂–∏–º.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚ú® –†—É—á–Ω–æ–π –ø–ª–∞–Ω (—Ç–µ–∫—Å—Ç/—Ñ–æ—Ç–æ‚Üí–≤—Ä–µ–º—è)", callback_data="OPEN_GEN_MODE")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –í –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="BACK_MAIN_MENU")]
            ])
        )

    return await _safe_edit_or_send(
        q,
        f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–∑–∏—Ü–∏–π: <b>{created}</b>.\n–¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –Ω—É–∂–Ω—ã—Ö –∑–∞–¥–∞—á –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —á–µ—Ä–µ–∑ ¬´–°–ø–∏—Å–æ–∫ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è¬ª.",
        reply_markup=main_planner_menu()
    )

# -------------------------
# INPUT (—Ç–µ–∫—Å—Ç/—Ñ–æ—Ç–æ) –ü–û –®–ê–ì–ê–ú + –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï
# -------------------------
async def on_user_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    uid = update.effective_user.id
    st = _ensure(uid)
    # –†–µ–∂–∏–º—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –º—ã ¬´–ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º¬ª —Å–æ–æ–±—â–µ–Ω–∏–µ
    active_steps = {
        "waiting_topic", "waiting_text", "waiting_time",
        "editing_time", "editing_text", "editing_topic", "editing_image"
    }
    if (st.mode not in ("plan", "gen", "edit")) and (st.step not in active_steps):
        return  # –Ω–µ –Ω–∞—à —Ä–µ–∂–∏–º ‚Äî –ø—É—Å—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç

    msg: Message = update.message
    text = (msg.text or msg.caption or "").strip()

    # --- –ë–ª–æ–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ ---
    if st.step == "editing_topic":
        pid = USER_STATE[uid].get("edit_target")
        it = _find_item(uid, pid) if pid else None
        if not it:
            st.step = "idle"
            return await msg.reply_text("–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=main_planner_menu())
        if not text:
            return await msg.reply_text("–ù—É–∂–Ω–∞ –Ω–æ–≤–∞—è —Ç–µ–º–∞ —Ç–µ–∫—Å—Ç–æ–º.")
        it["topic"] = text
        st.step = "idle"; st.mode = "none"
        USER_STATE[uid].pop("edit_target", None)
        return await msg.reply_text(f"–¢–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è #{pid}.", reply_markup=_item_actions_kb(pid, it["mode"]))

    if st.step == "editing_text":
        pid = USER_STATE[uid].get("edit_target")
        it = _find_item(uid, pid) if pid else None
        if not it:
            st.step = "idle"
            return await msg.reply_text("–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=main_planner_menu())
        if not text:
            return await msg.reply_text("–ù—É–∂–µ–Ω –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç.")
        it["text"] = text
        st.step = "idle"; st.mode = "none"
        USER_STATE[uid].pop("edit_target", None)
        return await msg.reply_text(f"–¢–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª—ë–Ω –¥–ª—è #{pid}.", reply_markup=_item_actions_kb(pid, it["mode"]))

    if st.step == "editing_image":
        pid = USER_STATE[uid].get("edit_target")
        it = _find_item(uid, pid) if pid else None
        if not it:
            st.step = "idle"
            return await msg.reply_text("–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=main_planner_menu())

        # —É–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–æ–º
        if text.lower() in {"—É–¥–∞–ª–∏—Ç—å", "delete", "none", "remove"}:
            it["image_url"] = None
            st.step = "idle"; st.mode = "none"
            USER_STATE[uid].pop("edit_target", None)
            return await msg.reply_text(f"–ö–∞—Ä—Ç–∏–Ω–∫–∞ —É–¥–∞–ª–µ–Ω–∞ –¥–ª—è #{pid}.", reply_markup=_item_actions_kb(pid, it["mode"]))

        # —Ñ–æ—Ç–æ –∫–∞–∫ —Ñ–æ—Ç–æ
        if msg.photo:
            it["image_url"] = msg.photo[-1].file_id
        # —Ñ–æ—Ç–æ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
        if getattr(msg, "document", None) and getattr(msg.document, "mime_type", ""):
            if msg.document.mime_type.startswith("image/"):
                it["image_url"] = msg.document.file_id

        if not it.get("image_url"):
            return await msg.reply_text("–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ¬´—É–¥–∞–ª–∏—Ç—å¬ª.")
        st.step = "idle"; st.mode = "none"
        USER_STATE[uid].pop("edit_target", None)
        return await msg.reply_text(f"–ö–∞—Ä—Ç–∏–Ω–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è #{pid}.", reply_markup=_item_actions_kb(pid, it["mode"]))

    if st.step == "editing_time":
        pid = USER_STATE[uid].get("edit_target")
        it = _find_item(uid, pid) if pid else None
        if not it:
            st.step = "idle"
            return await msg.reply_text("–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=main_planner_menu())
        ok = False
        if len(text) >= 4 and ":" in text:
            hh, mm = text.split(":", 1)
            ok = hh.isdigit() and mm.isdigit() and 0 <= int(hh) < 24 and 0 <= int(mm) < 60
        if not ok:
            return await msg.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 14:30")
        it["time"] = f"{int(hh):02d}:{int(mm):02d}"
        st.step = "idle"; st.mode = "none"
        USER_STATE[uid].pop("edit_target", None)
        return await msg.reply_text(f"–í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è #{pid}.", reply_markup=_item_actions_kb(pid, it["mode"]))

    # --- –û–±—ã—á–Ω—ã–µ —à–∞–≥–∏ —Å–æ–∑–¥–∞–Ω–∏—è ---
    if st.step == "waiting_topic":
        if not text:
            return await msg.reply_text("–ù—É–∂–Ω–∞ —Ç–µ–º–∞ —Ç–µ–∫—Å—Ç–æ–º. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.", reply_markup=cancel_only())
        st.topic = text
        fake_cb = await update.to_callback_query(context.bot)
        if fake_cb:
            return await _ask_time(fake_cb)
        st.step = "waiting_time"
        return await msg.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>HH:MM</b> –ø–æ –ö–∏–µ–≤—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30).",
            reply_markup=cancel_only(),
            parse_mode="HTML"
        )

    if st.step == "waiting_text":
        if msg.photo:
            st.image_url = msg.photo[-1].file_id
        if getattr(msg, "document", None) and getattr(msg.document, "mime_type", ""):
            if msg.document.mime_type.startswith("image/"):
                st.image_url = msg.document.file_id
        if text:
            st.text = text
        if not (st.text or st.image_url):
            return await msg.reply_text("–ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –∏/–∏–ª–∏ —Ñ–æ—Ç–æ.", reply_markup=cancel_only())
        fake_cb = await update.to_callback_query(context.bot)
        if fake_cb:
            return await _ask_time(fake_cb)
        st.step = "waiting_time"
        return await msg.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>HH:MM</b> –ø–æ –ö–∏–µ–≤—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30).",
            reply_markup=cancel_only(),
            parse_mode="HTML"
        )

    if st.step == "waiting_time":
        ok = False
        if len(text) >= 4 and ":" in text:
            hh, mm = text.split(":", 1)
            ok = hh.isdigit() and mm.isdigit() and 0 <= int(hh) < 24 and 0 <= int(mm) < 60
        if not ok:
            return await msg.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 14:30", reply_markup=cancel_only())
        st.time_str = f"{int(hh):02d}:{int(mm):02d}"

        fake_cb = await update.to_callback_query(context.bot)
        if fake_cb:
            return await _show_ready_add_cancel(fake_cb)

        prefix = "PLAN_" if st.mode == "plan" else "GEN_"
        lines: List[str] = []
        if st.mode == "plan":
            lines.append(f"–¢–µ–º–∞: {st.topic or '‚Äî'}")
        else:
            t = (st.text or "‚Äî").strip()
            if len(t) > 400: t = t[:397] + "‚Ä¶"
            lines.append(f"–¢–µ–∫—Å—Ç: {t}")
            lines.append(f"–ö–∞—Ä—Ç–∏–Ω–∫–∞: {'–µ—Å—Ç—å' if st.image_url else '–Ω–µ—Ç'}")
        lines.append(f"–í—Ä–µ–º—è: {st.time_str or '‚Äî'}")

        return await msg.reply_text(
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:\n" + "\n".join(lines),
            reply_markup=step_buttons_done_add_cancel(prefix),
            parse_mode="HTML",
            disable_web_page_preview=True
        )

# -------------------------
# –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –•–ï–ù–î–õ–ï–†–û–í
# -------------------------
def register_planner_handlers(app: Application):
    # –†–µ–∂–∏–º—ã
    app.add_handler(CallbackQueryHandler(cb_open_plan_mode,    pattern="^OPEN_PLAN_MODE$"),    group=0)
    app.add_handler(CallbackQueryHandler(cb_open_gen_mode,     pattern="^OPEN_GEN_MODE$"),     group=0)
    app.add_handler(CallbackQueryHandler(cb_list_today,        pattern="^PLAN_LIST_TODAY$"),   group=0)
    app.add_handler(CallbackQueryHandler(cb_plan_ai_build_now, pattern="^PLAN_AI_BUILD_NOW$"), group=0)

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    app.add_handler(CallbackQueryHandler(cb_step_back,         pattern="^STEP_BACK$"),         group=0)
    app.add_handler(CallbackQueryHandler(cb_back_main_menu,    pattern="^BACK_MAIN_MENU$"),    group=0)

    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —à–∞–≥–æ–≤
    app.add_handler(CallbackQueryHandler(cb_plan_done,         pattern="^PLAN_DONE$"),         group=0)
    app.add_handler(CallbackQueryHandler(cb_gen_done,          pattern="^GEN_DONE$"),          group=0)
    app.add_handler(CallbackQueryHandler(cb_add_more,          pattern="^(PLAN_ADD_MORE|GEN_ADD_MORE)$"), group=0)

    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
    app.add_handler(CallbackQueryHandler(cb_item_menu,         pattern="^ITEM_MENU:\\d+$"),      group=0)
    app.add_handler(CallbackQueryHandler(cb_delete_item,       pattern="^DEL_ITEM:\\d+$"),       group=0)
    app.add_handler(CallbackQueryHandler(cb_edit_time_shortcut,pattern="^EDIT_TIME:\\d+$"),      group=0)
    app.add_handler(CallbackQueryHandler(cb_edit_item,         pattern="^EDIT_ITEM:\\d+$"),      group=0)
    app.add_handler(CallbackQueryHandler(cb_edit_field,        pattern="^EDIT_FIELD:(topic|text|image|time):\\d+$"), group=0)
    app.add_handler(CallbackQueryHandler(cb_ai_fill_text,      pattern="^AI_FILL_TEXT:\\d+$"),   group=0)

    # –í–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ‚Äî –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º, –∫–æ–≥–¥–∞ –º—ã —Ä–µ–∞–ª—å–Ω–æ –≤ —à–∞–≥–∞—Ö/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    app.add_handler(
        MessageHandler(filters.TEXT | filters.PHOTO | filters.Document.IMAGE, on_user_message),
        group=0
    )

# -------------------------
# FAKE CallbackQuery (–¥–ª—è —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏ —à–∞–≥–æ–≤)
# -------------------------
from typing import Optional as _Optional

async def _build_fake_callback_from_message(message: Message, bot) -> CallbackQuery:
    cq = CallbackQuery(
        id="fake",
        from_user=message.from_user,
        chat_instance="",
        message=message,
        bot=bot
    )
    return cq

async def _update_to_callback_query(update: Update, bot) -> _Optional[CallbackQuery]:
    if update.callback_query:
        return update.callback_query
    if update.message:
        return await _build_fake_callback_from_message(update.message, bot)
    return None

setattr(Update, "to_callback_query", _update_to_callback_query)