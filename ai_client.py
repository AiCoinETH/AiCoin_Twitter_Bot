# twitter_bot.py
import os
import io
import re
import sys
import time
import json
import hashlib
import logging
import tempfile
import mimetypes
from dataclasses import dataclass
from typing import Optional, Tuple

import requests
from PIL import Image

import tweepy
from telegram import InlineKeyboardMarkup, InlineKeyboardButton, InputFile
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters

import ai_client  # –Ω–∞—à –º–æ–¥—É–ª—å –≤—ã—à–µ

# --- –õ–û–ì–ì–ï–†–´ ---
log = logging.getLogger("twitter_bot")
logging.basicConfig(level=os.getenv("LOGLEVEL", "INFO"))

# --- –ì–õ–û–ë–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï ---
STATE = {
    "last_text": None,
    "last_image_url": None,
    "last_image_bytes": None,
}

# --- –¢WITTER AUTH ---
def _twitter_client():
    api_key = os.getenv("TWITTER_API_KEY")
    api_secret = os.getenv("TWITTER_API_SECRET")
    access_token = os.getenv("TWITTER_ACCESS_TOKEN")
    access_secret = os.getenv("TWITTER_ACCESS_TOKEN_SECRET")
    auth = tweepy.OAuth1UserHandler(api_key, api_secret, access_token, access_secret)
    return tweepy.API(auth)

# --- –£–¢–ò–õ–ò–¢–´ –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô ---

SIGS = {
    b"\x89PNG\r\n\x1a\n": "image/png",
    b"\xff\xd8\xff": "image/jpeg",
    b"GIF87a": "image/gif",
    b"GIF89a": "image/gif",
    b"RIFF": "image/webp",  # —Å –¥–æ–ø.–ø—Ä–æ–≤–µ—Ä–∫–æ–π "WEBP" –Ω–∞ –±–∞–π—Ç–∞—Ö 8:12
}

def _looks_like_image(b: bytes) -> bool:
    if not b or len(b) < 64:
        return False
    for sig, ctype in SIGS.items():
        if b.startswith(sig):
            return True
    if b.startswith(b"RIFF") and b[8:12] == b"WEBP":
        return True
    return False

def _pil_probe(b: bytes) -> Tuple[bool, Optional[str], Optional[Tuple[int,int]]]:
    try:
        with Image.open(io.BytesIO(b)) as im:
            im.verify()
        with Image.open(io.BytesIO(b)) as im2:
            return True, Image.MIME.get(im2.format), im2.size
    except Exception:
        return False, None, None

def robust_fetch_image(url: str, timeout: int = 20, max_tries: int = 3) -> Optional[bytes]:
    headers = {
        "User-Agent": "Mozilla/5.0 (compatible; AiCoinBot/1.0)",
        "Accept": "image/*,application/octet-stream;q=0.9,*/*;q=0.8",
        "Cache-Control": "no-cache",
    }
    last_exc = None
    for i in range(max_tries):
        try:
            r = requests.get(url, headers=headers, timeout=timeout, allow_redirects=True)
            if r.status_code != 200:
                time.sleep(0.8)
                continue
            b = r.content or b""
            # –ë—ã–≤–∞–µ—Ç, —á—Ç–æ raw.githubusercontent.com –æ—Ç–¥–∞—ë—Ç text/plain (120 –±–∞–π—Ç) –¥–æ –ø—Ä–æ–≥—Ä–µ–≤–∞.
            if not _looks_like_image(b):
                ok, mime, sz = _pil_probe(b)
                if not ok:
                    time.sleep(0.8)
                    continue
            return b
        except Exception as e:
            last_exc = e
            time.sleep(0.8)
    log.warning("Failed to fetch image from url=%s err=%s", url, last_exc)
    return None

def save_temp_image(image_bytes: bytes, suffix: str = ".png") -> str:
    fd, path = tempfile.mkstemp(prefix="aicoin_", suffix=suffix)
    os.close(fd)
    with open(path, "wb") as f:
        f.write(image_bytes)
    return path

async def send_photo_safely(bot, chat_id: int, *, raw_bytes: Optional[bytes] = None, url: Optional[str] = None, caption: Optional[str] = None):
    """
    –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–π—Ç—ã, –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –ø—ã—Ç–∞–µ–º—Å—è —Å–∫–∞—á–∞—Ç—å URL, –ø–æ—Ç–æ–º —à–ª—ë–º —Ñ–∞–π–ª.
    """
    b = raw_bytes
    if not b and url:
        b = robust_fetch_image(url)
    if not b:
        # —Ñ–æ–ª–±—ç–∫ ‚Äî —Ç–µ–∫—Å—Ç–æ–º
        await bot.send_message(chat_id, text=f"{caption or ''}\n\n(image_fallback_local)".strip())
        return

    ok, mime, sz = _pil_probe(b)
    if not ok:
        # –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ ‚Äî –¥–∞—Ç—å PIL –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∏ –ø–µ—Ä–µ—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ PNG
        try:
            with Image.open(io.BytesIO(b)) as im:
                bio = io.BytesIO()
                im.convert("RGB").save(bio, format="PNG")
                b = bio.getvalue()
        except Exception:
            await bot.send_message(chat_id, text=f"{caption or ''}\n\n(image_fallback_local)".strip())
            return

    filename = "preview.png"
    await bot.send_photo(chat_id, photo=InputFile(io.BytesIO(b), filename), caption=caption)

# --- UI / TELEGRAM ---

APPROVAL_CHAT_ID = int(os.getenv("TELEGRAM_APPROVAL_CHAT_ID", "0"))
BOT_TOKEN_APPROVAL = os.getenv("TELEGRAM_BOT_TOKEN_APPROVAL")

def _kb_main():
    return InlineKeyboardMarkup(
        [
            [InlineKeyboardButton("–ü–û–°–¢!", callback_data="post_both")],
            [InlineKeyboardButton("–ü–æ—Å—Ç –≤ Twitter", callback_data="post_twitter"),
             InlineKeyboardButton("–ü–æ—Å—Ç –≤ Telegram", callback_data="post_telegram")],
            [InlineKeyboardButton("‚úèÔ∏è –ü—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data="ai_text_edit"),
             InlineKeyboardButton("üñºÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –º–µ–¥–∏–∞", callback_data="ai_image_edit")],
        ]
    )

# -- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞
async def on_ai_generate_text(app, chat_id: int, topic: str):
    text = ai_client.generate_text_for_topic(topic)
    STATE["last_text"] = text
    kb = InlineKeyboardMarkup(
        [
            [InlineKeyboardButton("‚úÖ –¢–µ–∫—Å—Ç –æ–∫", callback_data="ai_text_ok"),
             InlineKeyboardButton("üîÅ –ï—â—ë –≤–∞—Ä–∏–∞–Ω—Ç", callback_data="ai_text_regen")],
            [InlineKeyboardButton("‚úèÔ∏è –ü—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data="ai_text_edit")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="cancel_to_main")],
        ]
    )
    await app.bot.send_message(
        chat_id,
        text=f"–ò–ò —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª —Ç–µ–∫—Å—Ç\n\n{text}\n\nWebsite | Twitter X\n\n–ü–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç?",
        reply_markup=kb,
        disable_web_page_preview=False,
    )

# -- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç–∏–Ω–∫–∏
async def on_ai_generate_image(app, chat_id: int, topic: str):
    gen = ai_client.generate_image_for_topic(topic)
    STATE["last_image_url"] = gen.url
    STATE["last_image_bytes"] = gen.png_bytes
    await send_photo_safely(app.bot, chat_id, raw_bytes=gen.png_bytes, url=gen.url, caption=None)

# --- –ü–£–ë–õ–ò–ö–ê–¶–ò–Ø ---
async def publish_to_twitter(text: str, image_url: Optional[str], image_bytes: Optional[bytes]) -> Tuple[bool, str]:
    try:
        api = _twitter_client()
        media_path = None
        b = image_bytes
        if not b and image_url:
            b = robust_fetch_image(image_url)
        if b:
            media_path = save_temp_image(b)
        if media_path:
            media = api.media_upload(media_path)
            api.update_status(status=text, media_ids=[media.media_id_string])
            os.remove(media_path)
        else:
            api.update_status(status=text)
        return True, "OK"
    except Exception as e:
        log.error("TW|publish failed: %s", e)
        return False, str(e)

async def publish_to_telegram(app, text: str, image_url: Optional[str], image_bytes: Optional[bytes]) -> Tuple[bool, str]:
    try:
        if image_url or image_bytes:
            await send_photo_safely(app.bot, APPROVAL_CHAT_ID, raw_bytes=image_bytes, url=image_url, caption=text)
        else:
            await app.bot.send_message(APPROVAL_CHAT_ID, text=text)
        return True, "OK"
    except Exception as e:
        log.error("TG|publish failed: %s", e)
        return False, str(e)

# --- –•–ï–ù–î–õ–ï–†–´ –ö–ù–û–ü–û–ö (–º–∏–Ω–∏–º—É–º –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞) ---

async def cb_ai_text_ok(update, context):
    await update.callback_query.answer()
    # —Å–ø—Ä–æ—Å–∏–º –ø—Ä–æ –∫–∞—Ä—Ç–∏–Ω–∫—É
    kb = InlineKeyboardMarkup(
        [
            [InlineKeyboardButton("üñº –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="ai_img_gen")],
            [InlineKeyboardButton("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–æ—é –∫–∞—Ä—Ç–∏–Ω–∫—É/–≤–∏–¥–µ–æ", callback_data="ai_img_upload")],
            [InlineKeyboardButton("üö´ –ë–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="ai_img_skip")],
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Ç–µ–∫—Å—Ç—É", callback_data="ai_img_back_to_text")],
        ]
    )
    await context.bot.send_message(APPROVAL_CHAT_ID, "üñº –ù—É–∂–Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –∫ –ø–æ—Å—Ç—É?", reply_markup=kb)

async def cb_ai_img_gen(update, context):
    await update.callback_query.answer()
    topic = STATE.get("last_text") or "AiCoin"
    await on_ai_generate_image(context.application, APPROVAL_CHAT_ID, topic)
    # –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–≤—å—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await context.bot.send_message(APPROVAL_CHAT_ID, "–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä (—Ç–µ–∫—Å—Ç —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω; –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ)", reply_markup=_kb_main())

async def cb_post_twitter(update, context):
    await update.callback_query.answer()
    ok, msg = await publish_to_twitter(STATE.get("last_text") or "", STATE.get("last_image_url"), STATE.get("last_image_bytes"))
    if not ok:
        await context.bot.send_message(APPROVAL_CHAT_ID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ X (Twitter).")
        await context.bot.send_message(APPROVAL_CHAT_ID, "‚ùå X/Twitter: –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏. –ü—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–∞ app (Read+Write) –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–µ–¥–∏–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º.",
                                      reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç –≤–æ—Ä–∫–µ—Ä–∞", url=os.getenv("TRIGGER_URL","https://example.com"))]]))

async def cb_post_telegram(update, context):
    await update.callback_query.answer()
    ok, msg = await publish_to_telegram(context.application, STATE.get("last_text") or "", STATE.get("last_image_url"), STATE.get("last_image_bytes"))
    if not ok:
        await context.bot.send_message(APPROVAL_CHAT_ID, f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Telegram: {msg}")
        await context.bot.send_message(APPROVAL_CHAT_ID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram.")

# --- –ë–ê–ó–û–í–´–ô –†–û–£–¢–ò–ù–ì (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π) ---
async def start(update, context):
    await context.bot.send_message(APPROVAL_CHAT_ID, "–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä (—Ä—É—á–Ω–æ–π —Ä–µ–∂–∏–º)\nWebsite | Twitter X\n\n–•—ç—à—Ç–µ–≥–∏: ‚Äî")

async def cb_ai_generate(update, context):
    await update.callback_query.answer()
    await context.bot.send_message(APPROVAL_CHAT_ID, "üß† –í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –ø–æ—Å—Ç–∞ (EN/RU/UA). –ú–æ–∂–Ω–æ –ø—Ä–∏–ª–æ–∂–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É/–≤–∏–¥–µ–æ –∏–ª–∏ URL. –£ –º–µ–Ω—è –µ—Å—Ç—å 5 –º–∏–Ω—É—Ç.")

async def on_message(update, context):
    # —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ —Ç–µ–º–æ–π
    topic = (update.message.text or "").strip()
    if not topic:
        return
    await on_ai_generate_text(context.application, APPROVAL_CHAT_ID, topic)

def main():
    token = BOT_TOKEN_APPROVAL or os.getenv("TELEGRAM_BOT_TOKEN_CHANNEL") or os.getenv("TELEGRAM_BOT_TOKEN_APPROVAL")
    app = Application.builder().token(token).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(cb_ai_text_ok, pattern=r"^ai_text_ok$"))
    app.add_handler(CallbackQueryHandler(cb_ai_img_gen, pattern=r"^ai_img_gen$"))
    app.add_handler(CallbackQueryHandler(cb_post_twitter, pattern=r"^post_twitter$"))
    app.add_handler(CallbackQueryHandler(cb_post_telegram, pattern=r"^post_telegram$"))
    app.add_handler(CallbackQueryHandler(cb_ai_generate, pattern=r"^ai_generate$"))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_message))

    log.info("Planner module loaded")
    app.run_polling()

if __name__ == "__main__":
    main()