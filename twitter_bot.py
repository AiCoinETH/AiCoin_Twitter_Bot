import os
import sys
import asyncio
import hashlib
import logging
import random
import tempfile
from datetime import datetime, timedelta, time as dt_time

import tweepy
import requests

from telegram import (
    InlineKeyboardButton, InlineKeyboardMarkup, Update, Bot, InputMediaPhoto
)
from telegram.ext import (
    Application, CallbackQueryHandler, ContextTypes, MessageHandler, filters
)
import aiosqlite
import telegram.error

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s %(levelname)s %(funcName)s %(message)s'
)

# --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ---
TELEGRAM_BOT_TOKEN_APPROVAL = os.getenv("TELEGRAM_BOT_TOKEN_APPROVAL")
TELEGRAM_APPROVAL_CHAT_ID   = int(os.getenv("TELEGRAM_APPROVAL_CHAT_ID"))
TELEGRAM_BOT_TOKEN_CHANNEL  = os.getenv("TELEGRAM_BOT_TOKEN_CHANNEL")
TELEGRAM_CHANNEL_USERNAME_ID = os.getenv("TELEGRAM_CHANNEL_USERNAME_ID")

TWITTER_API_KEY = os.getenv("TWITTER_API_KEY")
TWITTER_API_SECRET = os.getenv("TWITTER_API_SECRET")
TWITTER_ACCESS_TOKEN = os.getenv("TWITTER_ACCESS_TOKEN")
TWITTER_ACCESS_SECRET = os.getenv("TWITTER_ACCESS_SECRET")
TWITTER_BEARER_TOKEN = os.getenv("TWITTER_BEARER_TOKEN")

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π –∏ –∏—Å—Ç–æ—Ä–∏–∏
ACTION_PAT_GITHUB = os.getenv("ACTION_PAT_GITHUB") or os.getenv("ACTION_PAT")
ACTION_REPO_GITHUB = os.getenv("ACTION_REPO_GITHUB") or os.getenv("ACTION_REPO")
ACTION_EVENT_GITHUB = os.getenv("ACTION_EVENT_GITHUB") or "manual"

POST_APPROVE_TIMEOUT_SEC = 300
POST_IMAGE_DIR = "./img"
TRENDING_LOG = "trending_log.csv"

# ================ –°–û–°–¢–û–Ø–ù–ò–Ø =================
STATE_DEFAULT = "default"
STATE_CUSTOM = "custom"  # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç —Å–≤–æ–π –ø–æ—Å—Ç (–°–¥–µ–ª–∞–π —Å–∞–º)
STATE_WAITING = "waiting"

user_states = {}      # user_id: state (default, custom –∏ —Ç.–¥.)
custom_drafts = {}    # user_id: {'text': ..., 'photo': ...}

approval_lock = asyncio.Lock()

# ================== –ö–ù–û–ü–ö–ò ==================
def build_main_menu():
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="approve"),
            InlineKeyboardButton("‚ôªÔ∏è –ó–∞–Ω–æ–≤–æ", callback_data="redo"),
            InlineKeyboardButton("üñº –ö–∞—Ä—Ç–∏–Ω–∫—É", callback_data="picture"),
        ],
        [
            InlineKeyboardButton("üí¨ –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å", callback_data="talk"),
            InlineKeyboardButton("üõë –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel"),
            InlineKeyboardButton("üïí –ü–æ–¥—É–º–∞—Ç—å", callback_data="think"),
        ],
        [
            InlineKeyboardButton("‚úçÔ∏è –°–¥–µ–ª–∞–π —Å–∞–º", callback_data="custom"),
        ],
    ])

def build_custom_menu():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é", callback_data="custom_done")]
    ])
    # --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤ ---
def log_post(text, img_url=None):
    dt = datetime.now().strftime("%Y-%m-%d %H:%M")
    with open(TRENDING_LOG, "a", encoding="utf-8") as f:
        f.write(f"{dt};{repr(text)};{img_url or ''}\n")

def clear_old_trending_log():
    try:
        if not os.path.exists(TRENDING_LOG):
            return
        lines = []
        threshold = datetime.now() - timedelta(days=15)
        with open(TRENDING_LOG, "r", encoding="utf-8") as f:
            for line in f:
                parts = line.split(";")
                if not parts:
                    continue
                try:
                    dt = datetime.strptime(parts[0], "%Y-%m-%d %H:%M")
                    if dt >= threshold:
                        lines.append(line)
                except Exception:
                    continue
        with open(TRENDING_LOG, "w", encoding="utf-8") as f:
            f.writelines(lines)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ trending_log: {e}")

# --- –û—Å–Ω–æ–≤–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_states[user_id] = STATE_DEFAULT
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –ì–æ—Ç–æ–≤ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç—ã. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=build_main_menu()
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    state = user_states.get(user_id, STATE_DEFAULT)
    if state == STATE_CUSTOM:
        text = update.message.text or ""
        photo_file_id = None
        if update.message.photo:
            photo_file_id = update.message.photo[-1].file_id
        if user_id not in custom_drafts:
            custom_drafts[user_id] = {"text": "", "photo": None}
        custom_drafts[user_id]["text"] = text.strip()
        custom_drafts[user_id]["photo"] = photo_file_id
        await update.message.reply_text(
            "–ß–µ—Ä–Ω–æ–≤–∏–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω! –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
            reply_markup=build_custom_menu()
        )
        return
    # –¥—Ä—É–≥–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–±–µ–∫–æ–≤ (–∫–Ω–æ–ø–∫–∏) ---
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    state = user_states.get(user_id, STATE_DEFAULT)
    data = query.data

    # --- "–°–¥–µ–ª–∞–π —Å–∞–º" ---
    if data == "custom":
        user_states[user_id] = STATE_CUSTOM
        custom_drafts[user_id] = {"text": "", "photo": None}
        await query.message.reply_text(
            "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–æ—Å—Ç. –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–∞—Ä—Ç–∏–Ω–∫—É (–ø–æ –∂–µ–ª–∞–Ω–∏—é). –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´–ó–∞–≤–µ—Ä—à–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é¬ª.",
            reply_markup=build_custom_menu()
        )
        await query.answer()
        return

    # --- –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–≤–æ–µ–≥–æ –ø–æ—Å—Ç–∞ ---
    if data == "custom_done":
        draft = custom_drafts.get(user_id, {"text": "", "photo": None})
        if not draft["text"]:
            await query.message.reply_text(
                "‚ùóÔ∏è–í—ã –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–ø–∏—Å–∞–ª–∏. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ ¬´–ó–∞–≤–µ—Ä—à–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é¬ª.",
                reply_markup=build_custom_menu()
            )
            await query.answer()
            return
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –ø–æ—Å—Ç
        await send_for_approval(
            context=context,
            chat_id=user_id,
            text=draft["text"],
            photo_id=draft["photo"],
            is_custom=True
        )
        user_states[user_id] = STATE_WAITING
        await query.answer("–ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ!")
        return

    # --- –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ ---
    if data == "approve":
        await approve_post_callback(update, context)
        await query.answer("–ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!")
        return

    # --- –ó–∞–Ω–æ–≤–æ ---
    if data == "redo":
        await query.message.reply_text(
            "‚ôªÔ∏è –î–∞–≤–∞–π—Ç–µ –∑–∞–Ω–æ–≤–æ. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=build_main_menu()
        )
        user_states[user_id] = STATE_DEFAULT
        await query.answer()
        return

    # --- –û—Ç–º–µ–Ω–∞ ---
    if data == "cancel":
        await query.message.reply_text(
            "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=build_main_menu()
        )
        user_states[user_id] = STATE_DEFAULT
        await query.answer()
        return

    # --- –ü–æ–¥—É–º–∞—Ç—å ---
    if data == "think":
        await query.message.reply_text(
            "üïí –Ø –ø–æ–¥–æ–∂–¥—É, –∫–æ–≥–¥–∞ –≤—ã –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã. –ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
            reply_markup=build_custom_menu() if user_states.get(user_id) == STATE_CUSTOM else build_main_menu()
        )
        await query.answer()
        return

    # --- –ö–∞—Ä—Ç–∏–Ω–∫—É, –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å –∏ –¥—Ä. (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—é –æ–±—Ä–∞–±–æ—Ç–∫—É) ---

# --- –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞ –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ ---
async def send_for_approval(context, chat_id, text, photo_id=None, is_custom=False):
    kb = [
        [InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="approve"),
         InlineKeyboardButton("‚ôªÔ∏è –ó–∞–Ω–æ–≤–æ", callback_data="redo")],
        [InlineKeyboardButton("üñº –ö–∞—Ä—Ç–∏–Ω–∫—É", callback_data="picture"),
         InlineKeyboardButton("üí¨ –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å", callback_data="talk")],
        [InlineKeyboardButton("üïí –ü–æ–¥—É–º–∞—Ç—å", callback_data="think"),
         InlineKeyboardButton("üõë –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")]
    ]
    reply_markup = InlineKeyboardMarkup(kb)
    caption = text[:1024]  # Telegram –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
    if photo_id:
        await context.bot.send_photo(
            chat_id=chat_id,
            photo=photo_id,
            caption=caption,
            reply_markup=reply_markup
        )
    else:
        await context.bot.send_message(
            chat_id=chat_id,
            text=caption,
            reply_markup=reply_markup
        )
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ—Ç–∞–π–º–µ—Ä –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    context.job_queue.run_once(
        lambda ctx: asyncio.create_task(auto_approve_post(ctx, chat_id, text, photo_id)),
        POST_APPROVE_TIMEOUT_SEC,
        name=f"autopost_{chat_id}"
    )

async def auto_approve_post(context, chat_id, text, photo_id):
    await publish_post(context, chat_id, text, photo_id)
    await context.bot.send_message(chat_id, "‚è± –í—Ä–µ–º—è –≤—ã—à–ª–æ ‚Äî –ø–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")
    await context.bot.send_message(chat_id, "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=build_main_menu())
    user_states[chat_id] = STATE_DEFAULT

# --- –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (Approve) ---
async def approve_post_callback(update, context):
    query = update.callback_query
    user_id = query.from_user.id
    message = query.message
    text = message.text or message.caption or ""
    photo_id = message.photo[-1].file_id if message.photo else None
    await publish_post(context, user_id, text, photo_id)
    await context.bot.send_message(user_id, "‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!", reply_markup=build_main_menu())
    user_states[user_id] = STATE_DEFAULT

# --- –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª/–≤ Twitter ---
async def publish_post(context, user_id, text, photo_id=None):
    try:
        if photo_id:
            await context.bot.send_photo(
                chat_id=TELEGRAM_CHANNEL_USERNAME_ID,
                photo=photo_id,
                caption=text[:1024]
            )
        else:
            await context.bot.send_message(
                chat_id=TELEGRAM_CHANNEL_USERNAME_ID,
                text=text
            )
        log_post(text)
        # –¢–£–¢ –î–û–ë–ê–í–¨ –°–í–û–Æ –ü–£–ë–õ–ò–ö–ê–¶–ò–Æ –í TWITTER (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
        # --- –ö–ù–û–ü–ö–ò –ò –ú–ï–ù–Æ ---

def build_main_menu():
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="approve"),
            InlineKeyboardButton("‚ôªÔ∏è –ó–∞–Ω–æ–≤–æ", callback_data="redo"),
            InlineKeyboardButton("üñº –ö–∞—Ä—Ç–∏–Ω–∫—É", callback_data="picture"),
        ],
        [
            InlineKeyboardButton("üí¨ –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å", callback_data="talk"),
            InlineKeyboardButton("üõë –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel"),
            InlineKeyboardButton("üïí –ü–æ–¥—É–º–∞—Ç—å", callback_data="think"),
        ],
        [
            InlineKeyboardButton("‚úçÔ∏è –°–¥–µ–ª–∞–π —Å–∞–º", callback_data="custom"),
        ],
    ])

def build_custom_menu():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é", callback_data="custom_done")],
        [InlineKeyboardButton("üõë –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")]
    ])

# --- –°–û–°–¢–û–Ø–ù–ò–Ø –∏ –•–†–ê–ù–ò–õ–ò–©–ï ---

STATE_DEFAULT = "default"
STATE_CUSTOM = "custom"
STATE_WAITING = "waiting"

user_states = {}      # user_id: state (default, custom –∏ —Ç.–¥.)
custom_drafts = {}    # user_id: {'text': ..., 'photo': ...}

# --- –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ---
def main():
    app = Application.builder().token(TELEGRAM_BOT_TOKEN_APPROVAL).build()
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(CallbackQueryHandler(handle_callback))
    app.add_handler(MessageHandler(filters.COMMAND, start))  # /start
    app.run_polling()

if __name__ == "__main__":
    main()