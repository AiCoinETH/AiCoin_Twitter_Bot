# -*- coding: utf-8 -*-
from __future__ import annotations
import asyncio
from dataclasses import dataclass, field
from datetime import datetime
from typing import Optional, Dict, Any, List

from telegram import (
    InlineKeyboardButton, InlineKeyboardMarkup, Update, Message, CallbackQuery, InputMediaPhoto
)
from telegram.ext import (
    Application, CallbackQueryHandler, MessageHandler, ContextTypes, filters
)
from telegram.error import BadRequest

# -------------------------
# –ü–ê–ú–Ø–¢–¨ –°–ï–°–°–ò–ô –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê
# -------------------------
USER_STATE: Dict[int, Dict[str, Any]] = {}

# –ú–æ–¥–µ–ª—å –ø–æ—Å—Ç–∞ –≤ –æ—á–µ—Ä–µ–¥–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ (—Ç–µ–º—ã/–∫–æ–Ω—Ç–µ–Ω—Ç/–≤—Ä–µ–º—è/–∫–∞—Ä—Ç–∏–Ω–∫–∏)
@dataclass
class PlannedItem:
    topic: Optional[str] = None
    text: Optional[str] = None
    time_str: Optional[str] = None
    image_url: Optional[str] = None
    # –º–∞—Ä–∫–µ—Ä—ã –ø—Ä–æ—Ü–µ—Å—Å–∞
    step: str = "idle"   # idle | waiting_topic | waiting_text | waiting_time
    mode: str = "none"   # plan | gen
    queue: List[dict] = field(default_factory=list)

# -------------------------
# –ö–ù–û–ü–ö–ò
# -------------------------
def main_planner_menu() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üß≠ –ü–ª–∞–Ω –ò–ò (—Ç–µ–º—ã‚Üí–≤—Ä–µ–º—è)", callback_data="OPEN_PLAN_MODE")],
        [InlineKeyboardButton("‚ú® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è (–∫–æ–Ω—Ç–µ–Ω—Ç‚Üí–≤—Ä–µ–º—è)", callback_data="OPEN_GEN_MODE")],
        [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="PLAN_LIST_TODAY")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="PLAN_DONE")]
    ])

def step_buttons_done_add_cancel(prefix: str) -> InlineKeyboardMarkup:
    # prefix: PLAN_ | GEN_
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data=f"{prefix}DONE"),
            InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data=f"{prefix}ADD_MORE"),
        ],
        [InlineKeyboardButton("‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞ (—à–∞–≥ –Ω–∞–∑–∞–¥)", callback_data="STEP_BACK")]
    ])

def cancel_only() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([[InlineKeyboardButton("‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", callback_data="STEP_BACK")]])

# -------------------------
# –ë–ï–ó–û–ü–ê–°–ù–û–ï –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï
# -------------------------
async def _safe_edit_or_send(q: CallbackQuery, text: str, reply_markup: Optional[InlineKeyboardMarkup]=None, parse_mode: Optional[str]=None):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç UI:
    - –µ—Å–ª–∏ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å text -> edit_message_text
    - –µ—Å–ª–∏ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å caption (—Ñ–æ—Ç–æ) -> edit_message_caption
    - –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–ª—å–∑—è -> –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    m: Message = q.message
    try:
        if m and (m.text or m.html_text):
            return await q.edit_message_text(text, reply_markup=reply_markup, parse_mode=parse_mode)
        elif m and (m.caption or getattr(m, "caption_html", None)):
            return await q.edit_message_caption(caption=text, reply_markup=reply_markup, parse_mode=parse_mode)
        else:
            raise BadRequest("no text/caption to edit")
    except BadRequest:
        return await m.chat.send_message(text, reply_markup=reply_markup, parse_mode=parse_mode)

# -------------------------
# –û–¢–ö–†–´–¢–ò–ï –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ twitter_bot)
# -------------------------
async def open_planner(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    uid = update.effective_user.id
    # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
    if uid not in USER_STATE:
        USER_STATE[uid] = {"mode": "none", "items": [], "last_msg_id": None}

    if q:
        await _safe_edit_or_send(q, "–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: –≤—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º.", reply_markup=main_planner_menu())
    else:
        chat_id = update.effective_chat.id
        await context.bot.send_message(chat_id, "–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: –≤—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º.", reply_markup=main_planner_menu())

# -------------------------
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–û–ï
# -------------------------
def _ensure(uid: int) -> PlannedItem:
    row = USER_STATE.get(uid) or {}
    if "current" not in row:
        row["current"] = PlannedItem()
        USER_STATE[uid] = row
    return row["current"]

def _push(uid: int, item: PlannedItem):
    row = USER_STATE[uid]
    row.setdefault("items", [])
    row["items"].append({
        "mode": item.mode,
        "topic": item.topic,
        "text": item.text,
        "time": item.time_str,
        "image_url": item.image_url,
        "added_at": datetime.utcnow().isoformat() + "Z"
    })
    # —Å–±—Ä–æ—Å–∏—Ç—å current
    row["current"] = PlannedItem()

async def _ask_topic(q: CallbackQuery, mode: str):
    uid = q.from_user.id
    st = _ensure(uid)
    st.mode = mode
    st.step = "waiting_topic"
    text = "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É (–∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ) –¥–ª—è –ø–æ—Å—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n–ú–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ."
    await _safe_edit_or_send(q, text, reply_markup=cancel_only())

async def _ask_text(q: CallbackQuery):
    uid = q.from_user.id
    st = _ensure(uid)
    st.mode = "gen"
    st.step = "waiting_text"
    text = ("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ—Å—Ç–∞ (—Ç–µ–∫—Å—Ç). "
            "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É ‚Äî –ø—Ä–∏–ª–æ–∂–∏—Ç–µ –µ—ë –∫ —Å–æ–æ–±—â–µ–Ω–∏—é (–æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –ø–æ–¥–ø–∏—Å—å—é) –∏–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –æ—Ç–¥–µ–ª—å–Ω–æ.")
    await _safe_edit_or_send(q, text, reply_markup=cancel_only())

async def _ask_time(q: CallbackQuery):
    uid = q.from_user.id
    st = _ensure(uid)
    st.step = "waiting_time"
    text = "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM –ø–æ –ö–∏–µ–≤—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30)."
    await _safe_edit_or_send(q, text, reply_markup=cancel_only())

async def _show_ready_add_cancel(q: CallbackQuery):
    uid = q.from_user.id
    st = _ensure(uid)
    prefix = "PLAN_" if st.mode == "plan" else "GEN_"
    summary = []
    if st.mode == "plan":
        summary.append(f"–¢–µ–º–∞: {st.topic or '‚Äî'}")
    else:
        summary.append(f"–¢–µ–∫—Å—Ç: {st.text or '‚Äî'}")
        summary.append(f"–ö–∞—Ä—Ç–∏–Ω–∫–∞: {'–µ—Å—Ç—å' if st.image_url else '–Ω–µ—Ç'}")
    summary.append(f"–í—Ä–µ–º—è: {st.time_str or '‚Äî'}")
    await _safe_edit_or_send(q, "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:\n" + "\n".join(summary), reply_markup=step_buttons_done_add_cancel(prefix))

# -------------------------
# CALLBACKS
# -------------------------
async def cb_open_plan_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await _ask_topic(q, mode="plan")

async def cb_open_gen_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await _ask_text(q)

async def cb_list_today(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    uid = q.from_user.id
    items = USER_STATE.get(uid, {}).get("items", [])
    if not items:
        return await _safe_edit_or_send(q, "–ù–∞ —Å–µ–≥–æ–¥–Ω—è –ø–æ–∫–∞ –ø—É—Å—Ç–æ.", reply_markup=main_planner_menu())
    lines = []
    for i, it in enumerate(items, 1):
        if it["mode"] == "plan":
            lines.append(f"{i}) [PLAN] {it.get('time') or '‚Äî'} ‚Äî {it.get('topic')}")
        else:
            img = "üñº" if it.get("image_url") else "‚Äî"
            txt = (it.get("text") or "").strip()
            if len(txt) > 60: txt = txt[:57] + "‚Ä¶"
            lines.append(f"{i}) [GEN] {it.get('time') or '‚Äî'} ‚Äî {txt} {img}")
    await _safe_edit_or_send(q, "–°–ø–∏—Å–æ–∫ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n" + "\n".join(lines), reply_markup=main_planner_menu())

async def cb_step_back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    uid = q.from_user.id
    st = _ensure(uid)
    # –ø—Ä–æ—Å—Ç–æ —Å–±—Ä–æ—Å —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞
    st.step = "idle"
    st.topic = None
    st.text = None
    st.time_str = None
    st.image_url = None
    await _safe_edit_or_send(q, "–û—Ç–º–µ–Ω–µ–Ω–æ. –ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=main_planner_menu())

async def cb_plan_done(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await _safe_edit_or_send(q, "–ì–æ—Ç–æ–≤–æ. –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –º–µ–Ω—é.", reply_markup=main_planner_menu())

async def cb_gen_done(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await _safe_edit_or_send(q, "–ì–æ—Ç–æ–≤–æ. –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –º–µ–Ω—é.", reply_markup=main_planner_menu())

async def cb_add_more(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    uid = q.from_user.id
    st = _ensure(uid)
    # –ø–æ–≤—Ç–æ—Ä –ø–æ –∫—Ä—É–≥—É: —Å–Ω–æ–≤–∞ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Ç–µ–º—É/–∫–æ–Ω—Ç–µ–Ω—Ç
    if st.mode == "plan":
        await _ask_topic(q, mode="plan")
    else:
        await _ask_text(q)

# -------------------------
# INPUT (—Ç–µ–∫—Å—Ç/—Ñ–æ—Ç–æ) –ü–û –®–ê–ì–ê–ú
# -------------------------
async def on_user_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."""
    uid = update.effective_user.id
    st = _ensure(uid)
    if st.mode not in ("plan", "gen"):
        return  # –Ω–µ –Ω–∞—à —Ä–µ–∂–∏–º ‚Äî –ø—É—Å—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç

    msg: Message = update.message
    text = (msg.text or msg.caption or "").strip()

    # –°–±–æ—Ä —Ç–µ–º—ã (PLAN)
    if st.step == "waiting_topic":
        if not text:
            return await msg.reply_text("–ù—É–∂–Ω–∞ —Ç–µ–º–∞ —Ç–µ–∫—Å—Ç–æ–º. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.", reply_markup=cancel_only())
        st.topic = text
        await _ask_time(await update.to_callback_query(context.bot))  # —ç–º—É–ª–∏—Ä—É–µ–º —à–∞–≥ —á–µ—Ä–µ–∑ callback –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è
        return

    # –°–±–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (GEN) + –∫–∞—Ä—Ç–∏–Ω–∫–∞ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
    if st.step == "waiting_text":
        if msg.photo:
            # –µ—Å–ª–∏ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏–º –∫–∞—Ä—Ç–∏–Ω–∫—É –∏ —Ç–µ–∫—Å—Ç
            file_id = msg.photo[-1].file_id
            st.image_url = file_id  # —Ä–µ–∞–ª—å–Ω—ã–π URL –∑–∞–≥—Ä—É–∑–∏—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        if text:
            st.text = text
        if not (st.text or st.image_url):
            return await msg.reply_text("–ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –∏/–∏–ª–∏ —Ñ–æ—Ç–æ.", reply_markup=cancel_only())
        await _ask_time(await update.to_callback_query(context.bot))
        return

    # –í—Ä–µ–º—è –¥–ª—è –æ–±–æ–∏—Ö —Ä–µ–∂–∏–º–æ–≤
    if st.step == "waiting_time":
        # –ø—Ä–æ–≤–µ—Ä–∏–º —Ñ–æ—Ä–º–∞—Ç HH:MM
        ok = False
        if len(text) >= 4 and ":" in text:
            hh, mm = text.split(":", 1)
            ok = hh.isdigit() and mm.isdigit() and 0 <= int(hh) < 24 and 0 <= int(mm) < 60
        if not ok:
            return await msg.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 14:30", reply_markup=cancel_only())
        st.time_str = f"{int(hh):02d}:{int(mm):02d}"
        # –ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—é–º–µ + –∫–Ω–æ–ø–∫–∏
        fake_cb = await update.to_callback_query(context.bot)  # –µ–¥–∏–Ω—ã–π –ø—É—Ç—å —á–µ—Ä–µ–∑ safe edit
        await _show_ready_add_cancel(fake_cb)
        return

# -------------------------
# –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –•–ï–ù–î–õ–ï–†–û–í
# -------------------------
def register_planner_handlers(app: Application):
    # –û—Ç–∫—Ä—ã—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ (–∫–æ–ª–±—ç–∫ –≤—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç)
    app.add_handler(CallbackQueryHandler(cb_open_plan_mode, pattern="^OPEN_PLAN_MODE$"))
    app.add_handler(CallbackQueryHandler(cb_open_gen_mode,  pattern="^OPEN_GEN_MODE$"))
    app.add_handler(CallbackQueryHandler(cb_list_today,     pattern="^PLAN_LIST_TODAY$"))

    app.add_handler(CallbackQueryHandler(cb_step_back,      pattern="^STEP_BACK$"))
    app.add_handler(CallbackQueryHandler(cb_plan_done,      pattern="^(PLAN_DONE)$"))
    app.add_handler(CallbackQueryHandler(cb_gen_done,       pattern="^(GEN_DONE)$"))
    app.add_handler(CallbackQueryHandler(cb_add_more,       pattern="^(PLAN_ADD_MORE|GEN_ADD_MORE)$"))

    # –í–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (–ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –≤ —Ä–µ–∂–∏–º–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞)
    app.add_handler(MessageHandler(filters.TEXT | filters.PHOTO, on_user_message))

# -------------------------
# –•–ï–õ–ü–ï–†: –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º Update –≤ "–ø—Å–µ–≤–¥–æ" CallbackQuery
# -------------------------
async def _build_fake_callback_from_message(message: Message, bot) -> CallbackQuery:
    cq = CallbackQuery(
        id="fake",
        from_user=message.from_user,
        chat_instance="",
        message=message,
        bot=bot
    )
    return cq

# –ü—É–±–ª–∏—á–Ω—ã–π —à–æ—Ä—Ç–∫–∞—Ç ‚Äî –Ω—É–∂–µ–Ω –≤—ã—à–µ
async def _update_to_callback_query(update: Update, bot):
    if update.callback_query:
        return update.callback_query
    return await _build_fake_callback_from_message(update.message, bot)

# –ü–∞—Ç—á–∏–º –º–µ—Ç–æ–¥ Update "–Ω–∞ –ª–µ—Ç—É", —á—Ç–æ–±—ã –≤—ã–∑—ã–≤–∞—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤–æ
setattr(Update, "to_callback_query", _update_to_callback_query)