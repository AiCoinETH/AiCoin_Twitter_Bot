import os
import asyncio
import hashlib
import logging
import random
from datetime import datetime, timedelta

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, Bot
from telegram.ext import Application, CallbackQueryHandler, ContextTypes
import aiosqlite
import telegram.error

# AI-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://gptonline.ai/

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s %(levelname)s %(message)s')

# –ß—Ç–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN_APPROVAL = os.getenv("TELEGRAM_BOT_TOKEN_APPROVAL")
TELEGRAM_APPROVAL_CHAT_ID = os.getenv("TELEGRAM_APPROVAL_CHAT_ID")
TELEGRAM_APPROVAL_USER_ID = int(os.getenv("TELEGRAM_APPROVAL_USER_ID", "0"))
TELEGRAM_CHANNEL_USERNAME_ID = os.getenv("TELEGRAM_CHANNEL_USERNAME_ID")  # username –∫–∞–Ω–∞–ª–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä '@AiCoin_ETH'

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not TELEGRAM_BOT_TOKEN_APPROVAL or not TELEGRAM_APPROVAL_CHAT_ID or not TELEGRAM_CHANNEL_USERNAME_ID:
    logging.error("–ù–µ –∑–∞–¥–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (BOT_TOKEN_APPROVAL, APPROVAL_CHAT_ID –∏–ª–∏ CHANNEL_USERNAME_ID)")
    exit(1)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π (—á–∞—Å—Ç–∏—á–Ω–æ –¥–ª—è —Ç–æ–∫–µ–Ω–∞)
logging.info(f"BOT_TOKEN          = {TELEGRAM_BOT_TOKEN_APPROVAL[:8]}‚Ä¶")
logging.info(f"APPROVAL_CHAT_ID   = {TELEGRAM_APPROVAL_CHAT_ID}")
logging.info(f"CHANNEL_USERNAME   = {TELEGRAM_CHANNEL_USERNAME_ID}")

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
approval_bot = Bot(token=TELEGRAM_BOT_TOKEN_APPROVAL)

test_images = [
    "https://upload.wikimedia.org/wikipedia/commons/4/47/PNG_transparency_demonstration_1.png",
    "https://upload.wikimedia.org/wikipedia/commons/3/3f/Fronalpstock_big.jpg",
    "https://upload.wikimedia.org/wikipedia/commons/1/17/Google-flutter-logo.png",
    "https://upload.wikimedia.org/wikipedia/commons/d/d6/Wp-w4-big.jpg"
]

post_data = {
    "text_ru": "–ú–∞–π–Ω–∏–Ω–≥–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã —Å–Ω–æ–≤–∞ –≤ —Ñ–æ–∫—É—Å–µ...",
    "image_url": test_images[0],
    "timestamp": None,
    "post_id": 0
}
prev_data = post_data.copy()

pending_post = {"active": False, "timer": None}
text_in_progress = image_in_progress = full_in_progress = chat_in_progress = False

do_not_disturb = {"active": False}
countdown_task = None
last_action_time = {}
approval_message_ids = {"photo": None, "timer": None}

keyboard = InlineKeyboardMarkup([
    [InlineKeyboardButton("‚úÖ –ü–æ—Å—Ç", callback_data="approve")],
    [InlineKeyboardButton("üïí –ü–æ–¥—É–º–∞—Ç—å", callback_data="think")],
    [InlineKeyboardButton("üìù –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç", callback_data="regenerate")],
    [InlineKeyboardButton("üñºÔ∏è –ù–æ–≤–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞", callback_data="new_image")],
    [InlineKeyboardButton("üÜï –ü–æ—Å—Ç —Ü–µ–ª–∏–∫–æ–º", callback_data="new_post")],
    [InlineKeyboardButton("üí¨ –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å", callback_data="chat"), InlineKeyboardButton("üåô –ù–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å", callback_data="do_not_disturb")],
    [InlineKeyboardButton("‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–æ—Å—Ç", callback_data="restore_previous"), InlineKeyboardButton("üîö –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="end_day")]
])

DB_FILE = "post_history.db"

async def init_db():
    async with aiosqlite.connect(DB_FILE) as db:
        await db.execute(
            """
            CREATE TABLE IF NOT EXISTS posts (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                text TEXT NOT NULL,
                timestamp TEXT NOT NULL,
                image_hash TEXT
            )
            """
        )
        await db.commit()
    logging.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")

async def save_post_to_history(text, image_url=None):
    def get_hash(url):
        try:
            import requests
            r = requests.get(url, timeout=5)
            r.raise_for_status()
            return hashlib.sha256(r.content).hexdigest()
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ö–µ—à –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return None

    image_hash = get_hash(image_url) if image_url else None
    async with aiosqlite.connect(DB_FILE) as db:
        await db.execute(
            "INSERT INTO posts (text, timestamp, image_hash) VALUES (?, ?, ?)",
            (text, datetime.now().isoformat(), image_hash)
        )
        await db.commit()
    logging.info("–ü–æ—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –∏—Å—Ç–æ—Ä–∏—é.")

async def send_post_for_approval():
    if do_not_disturb["active"] or pending_post["active"]:
        return

    post_data["timestamp"] = datetime.now()
    pending_post.update({"active": True, "timer": datetime.now()})
    try:
        photo_msg = await approval_bot.send_photo(
            chat_id=TELEGRAM_APPROVAL_CHAT_ID,
            photo=post_data["image_url"],
            caption=post_data["text_ru"],
            reply_markup=keyboard
        )
        approval_message_ids["photo"] = photo_msg.message_id
        logging.info("–ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ.")
    except telegram.error.RetryAfter as e:
        await asyncio.sleep(e.retry_after)
        await send_post_for_approval()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ: {e}")

async def send_timer_message():
    countdown_msg = await approval_bot.send_message(
        chat_id=TELEGRAM_APPROVAL_CHAT_ID,
        text="‚è≥ –¢–∞–π–º–µ—Ä: 60 —Å–µ–∫—É–Ω–¥",
        reply_markup=keyboard
    )
    approval_message_ids["timer"] = countdown_msg.message_id

    async def update_countdown(msg_id):
        for i in range(59, -1, -1):
            await asyncio.sleep(1)
            try:
                await approval_bot.edit_message_text(
                    chat_id=TELEGRAM_APPROVAL_CHAT_ID,
                    message_id=msg_id,
                    text=f"‚è≥ –¢–∞–π–º–µ—Ä: {i} —Å–µ–∫—É–Ω–¥",
                    reply_markup=keyboard
                )
            except Exception:
                pass
        pending_post["active"] = False

    global countdown_task
    if countdown_task and not countdown_task.done():
        countdown_task.cancel()
    countdown_task = asyncio.create_task(update_countdown(approval_message_ids["timer"]))

async def publish_post():
    global pending_post, text_in_progress, image_in_progress, full_in_progress, chat_in_progress
    try:
        msg = await approval_bot.send_photo(
            chat_id=TELEGRAM_CHANNEL_USERNAME_ID,
            photo=post_data["image_url"],
            caption=post_data["text_ru"]
        )
        logging.info(f"–ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω, message_id={msg.message_id}")
    except telegram.error.RetryAfter as e:
        await asyncio.sleep(e.retry_after)
        return await publish_post()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")

    await save_post_to_history(post_data["text_ru"], post_data["image_url"])
    pending_post["active"] = False
    text_in_progress = image_in_progress = full_in_progress = chat_in_progress = False

async def check_timer():
    while True:
        await asyncio.sleep(1)
        if pending_post["active"] and pending_post.get("timer") and (datetime.now() - pending_post["timer"]) > timedelta(seconds=60):
            try:
                await approval_bot.send_message(
                    chat_id=TELEGRAM_APPROVAL_CHAT_ID,
                    text="‚åõ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ü—É–±–ª–∏–∫—É—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
                )
            except Exception:
                pass
            await publish_post()

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global text_in_progress, image_in_progress, full_in_progress, chat_in_progress, last_action_time
    await update.callback_query.answer()
    user_id = update.effective_user.id
    now = datetime.now()
    if user_id in last_action_time and (now - last_action_time[user_id]).seconds < 15:
        await approval_bot.send_message(chat_id=TELEGRAM_APPROVAL_CHAT_ID, text="‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ...")
        return
    last_action_time[user_id] = now
    action = update.callback_query.data
    prev_data.update(post_data)
    if action == 'approve':
        await approval_bot.send_message(chat_id=TELEGRAM_APPROVAL_CHAT_ID, text="‚è≥ –ü—É–±–ª–∏–∫—É—é...")
        await publish_post()
    elif action == 'think':
        if countdown_task and not countdown_task.done():
            countdown_task.cancel()
        pending_post["timer"] = datetime.now()
        await send_timer_message()
    # ... –¥—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π ...

async def delayed_start(app: Application):
    await init_db()
    await send_post_for_approval()
    asyncio.create_task(check_timer())
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")

if __name__ == "__main__":
    app = Application.builder()\
        .token(TELEGRAM_BOT_TOKEN_APPROVAL)\
        .post_init(delayed_start)\
        .build()
    app.add_handler(CallbackQueryHandler(button_handler))
    # –ß–∞—â–µ –æ–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä (Long Polling) –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Ä–µ–∞–∫—Ü–∏–∏
    app.run_polling(poll_interval=0.5, timeout=1)
