# -*- coding: utf-8 -*-
"""
–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ (RU) –¥–ª—è –∫–∞–Ω–∞–ª–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è ‚Äî –û–¢ –ó–ê–ü–†–û–°–ê –ö –°–¢–†–ê–ù–ê–ú
–î–ª—è –ö–ê–ñ–î–û–ì–û –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:
  ‚Ä¢ Google Trends: —Ç–æ–ø-—Å—Ç—Ä–∞–Ω—ã (now 7-d) –ø–æ —ç—Ç–æ–º—É –∑–∞–ø—Ä–æ—Å—É
  ‚Ä¢ –î–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω—ã: —Ç–æ–ø-3 related queries (–ø–æ —ç—Ç–æ–º—É –∑–∞–ø—Ä–æ—Å—É), —Å–≤–µ–∂–∏–µ —Ö—ç—à—Ç–µ–≥–∏ X
  ‚Ä¢ –í–Ω–∏–∑—É: –∫–Ω–æ–ø–∫–∏ ¬´üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å ‚Äî <–∑–∞–ø—Ä–æ—Å>/<—Å—Ç—Ä–∞–Ω–∞>¬ª (deeplink –≤ –õ–° –±–æ—Ç–∞ /start copy_<ISO2>_<slug>)

–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pytrends, snscrape, python-telegram-bot==21.*, pycountry
"""

import os, re, textwrap, asyncio
from collections import Counter
from datetime import datetime, timedelta
from zoneinfo import ZoneInfo

from telegram import Bot, InlineKeyboardButton, InlineKeyboardMarkup
from pytrends.request import TrendReq
import pycountry

# snscrape (X/Twitter) ‚Äî –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
try:
    import snscrape.modules.twitter as sntwitter
    SNS_OK = True
except Exception:
    SNS_OK = False

# ------------------ ENV ------------------
TOKEN        = os.getenv("TELEGRAM_BOT_TOKEN_APPROVAL")
CHAT_ID      = os.getenv("TELEGRAM_APPROVAL_CHAT_ID")       # -100... –∏–ª–∏ @username
BOT_USERNAME = os.getenv("TELEGRAM_BOT_USERNAME") or ""     # –±–µ–∑ @, –¥–ª—è deeplink (–µ—Å–ª–∏ –µ—Å—Ç—å)

if not TOKEN or not CHAT_ID:
    raise SystemExit("Set TELEGRAM_BOT_TOKEN_APPROVAL and TELEGRAM_APPROVAL_CHAT_ID")

# ------------------ –ù–ê–°–¢–†–û–ô–ö–ò ------------------
# –∫–ª—é—á–∏, –ø–æ –∫–æ—Ç–æ—Ä—ã–º —Å—Ç—Ä–æ–∏–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
SEARCH_TERMS = [
    "Ai Coin",
    "AI crypto",
    "blockchain AI",
    "$Ai",
]

KYIV_TZ = ZoneInfo("Europe/Kyiv")

# –°–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –∫–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å
TOP_COUNTRIES_PER_TERM = 3
# –°–∫–æ–ª—å–∫–æ related queries –Ω–∞ —Å—Ç—Ä–∞–Ω—É/–∑–∞–ø—Ä–æ—Å
TOP_RELATED_QUERIES = 3
# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ —Ç–≤–∏—Ç–∞–º –Ω–∞ —Å—Ç—Ä–∞–Ω—É/–∑–∞–ø—Ä–æ—Å (–¥–ª—è –≤—ã–±–æ—Ä–∫–∏ —Ö—ç—à—Ç–µ–≥–æ–≤)
TW_SAMPLE = 150

# —Ä–µ–≥—ç–∫—Å–ø –¥–ª—è –¥–æ–º–µ–Ω–æ–≤ (–µ—Å–ª–∏ –∫–æ–≥–¥–∞-—Ç–æ —Ä–µ—à–∏–º –≤–µ—Ä–Ω—É—Ç—å –¥–æ–º–µ–Ω—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞)
DOMAIN_RE = re.compile(r"(?:https?://)?([a-z0-9\-]+\.[a-z\.]{2,})(?:/|$)", re.I)

def _slug(s: str) -> str:
    return re.sub(r"[^a-z0-9]+", "-", s.lower()).strip("-")

def _iso2_from_name(name: str) -> str | None:
    try:
        if name == "United States":  # pycountry –Ω—é–∞–Ω—Å
            name = "United States of America"
        return pycountry.countries.lookup(name).alpha_2
    except Exception:
        return None

def _flag(iso2: str) -> str:
    if not iso2 or len(iso2)!=2: return "üåç"
    base = 0x1F1E6
    return "".join(chr(base + ord(c.upper()) - ord('A')) for c in iso2)

def _local_time_label(iso2: str) -> tuple[str, str]:
    tzmap = {
        "UA":"Europe/Kyiv","DE":"Europe/Berlin","TR":"Europe/Istanbul","GB":"Europe/London",
        "US":"America/New_York","CA":"America/Toronto","BR":"America/Sao_Paulo","MX":"America/Mexico_City",
        "IN":"Asia/Kolkata","ID":"Asia/Jakarta","PH":"Asia/Manila","JP":"Asia/Tokyo",
        "AE":"Asia/Dubai","SA":"Asia/Riyadh","NG":"Africa/Lagos","ZA":"Africa/Johannesburg"
    }
    tz = ZoneInfo(tzmap.get(iso2, "UTC"))
    now_local = datetime.now(tz).strftime("%Y-%m-%d %H:%M")
    return now_local, tz.key

# -------------- Google Trends: —Ç–æ–ø —Å—Ç—Ä–∞–Ω –¥–ª—è –ö–û–ù–ö–†–ï–¢–ù–û–ì–û –∑–∞–ø—Ä–æ—Å–∞ --------------
def trends_top_countries_for_term(term: str, top_n: int) -> list[tuple[str, str, int]]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç [(country_name, iso2, score), ...] –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.
    """
    py = TrendReq(hl='en-US', tz=0)
    # payload —Å—Ç—Ä–æ–∏–º –Ω–∞ –û–î–ù–û–ú –∑–∞–ø—Ä–æ—Å–µ, –∞ –Ω–µ –Ω–∞ —Å–ø–∏—Å–∫–µ
    py.build_payload([term], timeframe='now 7-d', geo='')
    df = py.interest_by_region(resolution='COUNTRY', inc_low_vol=True)
    if df.empty:
        return []
    # –≤ df –±—É–¥–µ—Ç —Å—Ç–æ–ª–±–µ—Ü —Å –∏–º–µ–Ω–µ–º term
    series = df[term].fillna(0).astype(int).sort_values(ascending=False)
    out = []
    for country_name, score in series.head(10).items():
        iso2 = _iso2_from_name(country_name)
        if not iso2: 
            continue
        out.append((country_name, iso2, int(score)))
        if len(out) >= top_n:
            break
    return out

# -------------- Google Trends: related queries –¥–ª—è (term, country) --------------
def related_queries_top_for(term: str, iso2: str, top_k: int) -> list[str]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¢–û–õ–¨–ö–û —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ (term, iso2)
    """
    py = TrendReq(hl='en-US', tz=0)
    py.build_payload([term], timeframe='now 7-d', geo=iso2)
    rq = py.related_queries() or {}
    # —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {'<term>': {'top': df|None, 'rising': df|None}}
    pack = rq.get(term) or {}
    items = []
    for kind in ("top", "rising"):
        df = pack.get(kind)
        if df is None or df.empty:
            continue
        for _, row in df.head(10).iterrows():
            q = (row.get('query') or '').strip()
            v = int(row.get('value') or 0)
            if q:
                items.append((q, v))
    if not items:
        return []
    # –∞–≥—Ä–µ–≥–∏—Ä—É–µ–º –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ query
    agg = Counter()
    for q, v in items:
        agg[q] += v
    return [q for q, _ in agg.most_common(top_k)]

# -------------- Twitter (snscrape): —Ö—ç—à—Ç–µ–≥–∏ –¥–ª—è (term, country) --------------
def twitter_tags_for(term: str, country_label: str, limit=TW_SAMPLE) -> list[str]:
    if not SNS_OK:
        return []
    # —Å–≤–µ–∂–∏–π —Å—É—Ç–æ—á–Ω—ã–π —Å—Ä–µ–∑ –ø–æ —Ç–µ—Ä–º–∏–Ω—É + –Ω–∞–∑–≤–∞–Ω–∏—é —Å—Ç—Ä–∞–Ω—ã
    since = (datetime.utcnow() - timedelta(days=1)).date()
    query = f'"{term}" {country_label} since:{since}'
    tags = Counter()
    try:
        for i, tw in enumerate(sntwitter.TwitterSearchScraper(query).get_items()):
            if i >= limit:
                break
            for tag in (getattr(tw, "hashtags", []) or []):
                t = str(tag).lower().lstrip("#")
                if t:
                    tags[t] += 1
    except Exception:
        # –µ—Å–ª–∏ —É snscrape –ø—Ä–æ–±–ª–µ–º—ã —Å SSL/–¥–æ—Å—Ç—É–ø–æ–º ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ
        return []
    return [f"#{t}" for t, _ in tags.most_common(6)]

# -------------- –¢–µ–∫—Å—Ç –∏ –∫–Ω–æ–ø–∫–∏ --------------
def build_message_and_buttons() -> tuple[str, InlineKeyboardMarkup | None]:
    now_kyiv = datetime.now(KYIV_TZ).strftime("%Y-%m-%d %H:%M")

    lines: list[str] = [
        "üìä <b>–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ç—Ä–µ–Ω–¥–æ–≤</b>",
        f"üïí –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {now_kyiv} (–ö–∏–µ–≤)",
        "üîé –ò—Å—Ç–æ—á–Ω–∏–∫–∏: Google Trends + Twitter (snscrape)",
        "",
    ]
    buttons: list[list[InlineKeyboardButton]] = []

    for term in SEARCH_TERMS:
        lines.append(f"üìå <b>–ó–∞–ø—Ä–æ—Å</b>: {term}")
        countries = trends_top_countries_for_term(term, TOP_COUNTRIES_PER_TERM)

        if not countries:
            lines.append("‚Äî –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å—Ç—Ä–∞–Ω–∞–º –∑–∞ 7 –¥–Ω–µ–π\n")
            continue

        for (country_name, iso2, score) in countries:
            flag = _flag(iso2)
            local_now, tzkey = _local_time_label(iso2)

            rel_q = related_queries_top_for(term, iso2, TOP_RELATED_QUERIES)
            tags  = twitter_tags_for(term, country_name)

            block = textwrap.dedent(f"""\
                {flag} <b>{country_name}</b> ¬∑ score {score}
                üïí –°–µ–π—á–∞—Å: {local_now} [{tzkey}]
                üìà Related (Google): {(' ¬∑ '.join(rel_q) if rel_q else '‚Äî')}
                üè∑Ô∏è –•—ç—à—Ç–µ–≥–∏ X: {(' '.join(tags[:3]) if tags else '‚Äî')}
            """).rstrip()
            lines.append(block)

            if BOT_USERNAME:
                deeplink = f"https://t.me/{BOT_USERNAME}?start=copy_{iso2}_{_slug(term)}"
                buttons.append([InlineKeyboardButton(f"üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å ‚Äî {country_name} / {term}", url=deeplink)])

        lines.append("")  # –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏

    text = "\n".join(lines).strip()
    kb = InlineKeyboardMarkup(buttons) if buttons else None
    return text, kb

# -------------- –û—Ç–ø—Ä–∞–≤–∫–∞ (—Ä–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, if needed) --------------
async def _send_long(bot: Bot, chat_id: str, text: str, **kw):
    LIMIT = 3900  # –∑–∞–ø–∞—Å –ø–æ–¥ HTML-—Ç–µ–≥–∏
    if len(text) <= LIMIT:
        await bot.send_message(chat_id=chat_id, text=text, **kw)
        return
    chunk = []
    total = 0
    parts: list[str] = []
    for line in text.splitlines(True):
        if total + len(line) > LIMIT:
            parts.append("".join(chunk))
            chunk, total = [line], len(line)
        else:
            chunk.append(line); total += len(line)
    if chunk:
        parts.append("".join(chunk))
    for i, p in enumerate(parts):
        await bot.send_message(
            chat_id=chat_id,
            text=p,
            **(kw if i == 0 else {k:v for k,v in kw.items() if k != "reply_markup"})
        )

async def amain():
    bot = Bot(token=TOKEN)
    text, kb = build_message_and_buttons()
    await _send_long(
        bot,
        CHAT_ID,
        text,
        parse_mode="HTML",
        disable_web_page_preview=True,
        reply_markup=kb
    )

if __name__ == "__main__":
    asyncio.run(amain())