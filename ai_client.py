# ai_client.py
# -*- coding: utf-8 -*-
"""
–ú–∏–Ω–∏-–∫–ª–∏–µ–Ω—Ç –ò–ò –¥–ª—è twitter_bot.py
- ai_generate_text(topic) -> (text, warning)
- ai_generate_image(topic) -> (local_image_path, warning)
- ai_suggest_hashtags(text) -> list[str]
"""

from __future__ import annotations

import os
import io
import logging
import tempfile
import urllib.parse as _up

log = logging.getLogger("ai_client")

# ========= –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: Google Gemini –¥–ª—è —Ç–µ–∫—Å—Ç–∞ =========
_GEMINI_KEY = (os.getenv("GEMINI_API_KEY") or "").strip()
_USE_GEMINI = bool(_GEMINI_KEY)

def _try_import_gemini():
    if not _USE_GEMINI:
        return None
    try:
        import google.generativeai as genai  # type: ignore
        genai.configure(api_key=_GEMINI_KEY)
        return genai
    except Exception as e:
        log.warning("Gemini import/config failed: %s", e)
        return None

_GENAI = _try_import_gemini()

# ========= –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ: –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ =========
def _safe_temp_path(suffix: str = ".png") -> str:
    tmp = tempfile.NamedTemporaryFile(delete=False, suffix=suffix)
    tmp.close()
    return tmp.name

# ========= –ü—É–±–ª–∏—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ =========
def ai_generate_text(topic: str) -> tuple[str, str]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (text, warning). –ï—Å–ª–∏ warning != "", –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –±—ã–ª–∞ –≤ fallback-—Ä–µ–∂–∏–º–µ.
    """
    topic = (topic or "").strip()
    if not topic:
        return "", "–ü—É—Å—Ç–∞—è —Ç–µ–º–∞."

    # --- –ü–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ Gemini ---
    if _GENAI:
        try:
            m = _GENAI.GenerativeModel("gemini-1.5-flash")
            prompt = (
                "Write a concise, punchy post for Twitter/X in English about:\n"
                f"\"{topic}\"\n"
                "- No emojis at the beginning\n"
                "- One to three short sentences\n"
                "- No hashtags and no links\n"
                "- Concrete and helpful tone\n"
            )
            resp = m.generate_content(prompt)
            txt = (getattr(resp, "text", "") or "").strip()
            if not txt:
                raise RuntimeError("Gemini returned empty text")
            return txt, ""
        except Exception as e:
            log.warning("Gemini text gen failed: %s", e)

    # --- –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–æ–ª–±—ç–∫ (–±–µ–∑ –≤–Ω–µ—à–Ω–µ–≥–æ –ò–ò) ---
    stub = (
        f"{topic}. Quick take: why it matters and how it helps real users. "
        "Actionable insight in a nutshell."
    )
    return stub, "‚ö†Ô∏è Gemini –æ—Ç–∫–ª—é—á—ë–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî –∏—Å–ø–æ–ª—å–∑—É—é —à–∞–±–ª–æ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç."

def ai_suggest_hashtags(text: str) -> list[str]:
    """
    –ü—Ä–æ—Å—Ç–æ–π –ª–æ–∫–∞–ª—å–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ö—ç—à—Ç–µ–≥–æ–≤.
    """
    base = {"#AI", "#crypto", "$AI", "#AiCoin"}
    tl = (text or "").lower()
    if "eth" in tl or "ethereum" in tl:
        base.add("#ETH")
    if "token" in tl or "coin" in tl:
        base.add("#altcoins")
    if "defi" in tl:
        base.add("#DeFi")
    if "nft" in tl:
        base.add("#NFT")
    return list(base)[:6]

def ai_generate_image(topic: str) -> tuple[str, str]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (local_image_path, warning).
    –°–æ–∑–¥–∞—ë—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π PNG 1200x675 —Å —Ç–µ–∫—Å—Ç–æ–º —Ç–µ–º—ã.
    –ü–æ—Ä—è–¥–æ–∫:
      1) –ü—ã—Ç–∞–µ–º—Å—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ Pillow (–ª–æ–∫–∞–ª—å–Ω–æ, –±–µ–∑ —Å–µ—Ç–∏).
      2) –ï—Å–ª–∏ Pillow –Ω–µ—Ç ‚Äî –∫–∞—á–∞–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä —Å dummyimage.com.
    """
    topic = (topic or "").strip()
    if not topic:
        return "", "–ü—É—Å—Ç–∞—è —Ç–µ–º–∞."

    text = topic.replace("\n", " ").strip()
    if len(text) > 120:
        text = text[:120] + "‚Ä¶"

    # --- –í–∞—Ä–∏–∞–Ω—Ç 1: Pillow (–ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ, –±–µ–∑ –≤–Ω–µ—à–Ω–µ–π —Å–µ—Ç–∏) ---
    try:
        from PIL import Image, ImageDraw, ImageFont  # type: ignore

        W, H = 1200, 675
        bg = (10, 10, 10)
        fg = (255, 255, 255)

        img = Image.new("RGB", (W, H), bg)
        draw = ImageDraw.Draw(img)

        # –®—Ä–∏—Ñ—Ç: –ø—Ä–æ–±—É–µ–º DejaVuSans, –∏–Ω–∞—á–µ –¥–µ—Ñ–æ–ª—Ç
        try:
            font = ImageFont.truetype("DejaVuSans.ttf", 44)
        except Exception:
            font = ImageFont.load_default()

        # –ú–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–∞—è —Ä–∞–∑–º–µ—Ç–∫–∞ –ø–æ —à–∏—Ä–∏–Ω–µ
        max_width = int(W * 0.88)
        words = text.split()
        lines, cur = [], ""
        for w in words:
            test = (cur + " " + w).strip()
            if draw.textlength(test, font=font) <= max_width:
                cur = test
            else:
                if cur:
                    lines.append(cur)
                cur = w
        if cur:
            lines.append(cur)
        if len(lines) > 5:
            lines = lines[:5]
            lines[-1] = (lines[-1] + " ‚Ä¶").strip()

        # –†–∏—Å—É–µ–º —Å —Ü–µ–Ω—Ç—Ä–æ–≤–∫–æ–π
        total_h = sum(int(font.getbbox(l)[3] - font.getbbox(l)[1]) for l in lines) + (len(lines) - 1) * 10
        y = (H - total_h) // 2
        for l in lines:
            w = int(draw.textlength(l, font=font))
            x = (W - w) // 2
            draw.text((x, y), l, font=font, fill=fg)
            y += int(font.getbbox(l)[3] - font.getbbox(l)[1]) + 10

        path = _safe_temp_path(".png")
        img.save(path, format="PNG", optimize=True)
        return path, ""
    except Exception as e:
        log.warning("Pillow image gen failed, fallback to dummyimage.com: %s", e)

    # --- –í–∞—Ä–∏–∞–Ω—Ç 2: dummyimage.com (—Ç—Ä–µ–±—É–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç) ---
    try:
        import requests  # type: ignore

        q = _up.quote_plus(text)
        url = f"https://dummyimage.com/1200x675/0a0a0a/ffffff.png&text={q}"
        r = requests.get(url, timeout=20, headers={"User-Agent": "ai-client/1.0"})
        r.raise_for_status()
        path = _safe_temp_path(".png")
        with open(path, "wb") as f:
            f.write(r.content)
        return path, "üñºÔ∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –ø—Ä–æ—Å—Ç–æ–π –±–∞–Ω–Ω–µ—Ä –ø–æ —Ç–µ–º–µ (–ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä)."
    except Exception as e:
        log.error("Image placeholder download failed: %s", e)
        return "", "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."
